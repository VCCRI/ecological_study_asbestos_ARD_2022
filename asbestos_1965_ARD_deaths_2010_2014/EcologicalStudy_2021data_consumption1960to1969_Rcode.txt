
options(width=250)
options(max.print=10000)
options(stringsAsFactors = FALSE)
options(scipen=10000)
library(data.table)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(sqldf)
library(reshape2)
library(scales)
library(plotly)

#load("EcologicalStudy_2021data_consumption1960to1969.RData")
#save.image(file="EcologicalStudy_2021data_consumption1960to1969.RData")


##### Output file

outfile_stats = "EcologicalStudy_2021data_asb1960to1969_output.txt"

header = "model_disease\tmodel_gender\tyears_of_deaths\tyears_of_asbestos\tnum_points\tcountries_included\tintercept\tBO_CI1\tBO_CI2\tB0_SE\tB0_p_value\tslope\tB1_CI1\tB1_CI2\tB1_SE\tB1_p_value\tadjusted_R_squared\tp_value"
write(header, file=outfile_stats, append=FALSE)


##### Countries from 2007 paper that various analysis will be restricted to

paper2007_countries_for_C45_males    = c("ARG", "AUS", "AUT", "BRA", "CAN", "CHL", "CRI", "DEU", "DNK", "ESP", "FIN", "FRA", "GBR", "HKG", "HUN", "ISL", "ISR", "JPN", "KOR", "MEX", "NIC", "NLD", "NOR", "NZL", "PAN", "PER", "POL", "PRT", "SWE", "URY", "USA", "VEN")
paper2007_countries_for_C45_females  = c("ARG", "AUS", "AUT", "BRA", "CAN", "CHL", "CRI", "DEU", "DNK", "ESP", "FIN", "FRA", "GBR", "HKG", "HUN", "ISL", "ISR", "JPN", "KOR", "MEX", "NLD", "NOR", "NZL", "PAN", "PER", "POL", "PRT", "SWE", "URY", "USA", "VEN")
paper2007_countries_for_C450_males   = c("ARG", "AUS", "AUT", "BRA", "CAN", "CHL", "CRI", "DEU", "DNK", "ESP", "FIN", "FRA", "GBR", "HKG", "HUN", "ISL", "ISR", "JPN", "MEX", "NLD", "NOR", "NZL", "PER", "POL", "PRT", "SWE", "URY", "USA", "VEN")
paper2007_countries_for_C450_females = c("ARG", "AUS", "AUT", "BRA", "CAN", "CHL", "DEU", "DNK", "ESP", "FIN", "FRA", "GBR", "HKG", "HUN", "ISR", "JPN", "MEX", "NLD", "NOR", "NZL", "PER", "POL", "PRT", "SWE", "USA")
paper2007_countries_for_C451_males   = c("ARG", "AUS", "AUT", "BRA", "CAN", "CHL", "DEU", "DNK", "ESP", "FIN", "FRA", "GBR", "HKG", "HUN", "ISR", "JPN", "MEX", "NLD", "NOR", "NZL", "POL", "PRT", "SWE", "USA", "VEN")
paper2007_countries_for_C451_females = c("ARG", "AUS", "AUT", "BRA", "CAN", "CHL", "CRI", "DEU", "DNK", "ESP", "FIN", "FRA", "GBR", "HKG", "HUN", "ISL", "ISR", "JPN", "MEX", "NLD", "NOR", "PAN", "POL", "PRT", "SWE", "USA", "VEN")
paper2007_countries_for_J61_males    = c("ARG", "AUS", "AUT", "BRA", "CAN", "CHL", "DEU", "DNK", "EGY", "ESP", "FIN", "FRA", "GBR", "HKG", "HUN", "ISR", "JPN", "KOR", "MEX", "NLD", "NOR", "NZL", "POL", "PRT", "SWE", "USA", "VEN")
paper2007_countries_for_J61_females  = c("ARG", "AUS", "AUT", "BRA", "CAN", "CHL", "DEU", "EGY", "ESP", "FIN", "FRA", "GBR", "HKG", "JPN", "NZL", "POL", "SWE", "USA", "VEN")

length(paper2007_countries_for_C45_males) # 32
length(paper2007_countries_for_C45_females) # 31
length(paper2007_countries_for_C450_males) # 29
length(paper2007_countries_for_C450_females) # 25
length(paper2007_countries_for_C451_males) # 25
length(paper2007_countries_for_C451_females) # 27
length(paper2007_countries_for_J61_males) # 27
length(paper2007_countries_for_J61_females) # 19


##### World Health Organisation (WHO) mortality
##### https://www.who.int/data/data-collection-tools/who-mortality-database
##### morticd10_part1.zip, morticd10_part2.zip, morticd10_part3.zip, morticd10_part4.zip, morticd10_part5.zip
##### Data file containing the detailed mortality data for the tenth revision of the ICD (International Classification of Diseases).
##### mort_country_codes.zip Country codes and names.

country_codes = read.table( "country_codes.txt", sep=",", header=TRUE, quote='"', comment.char="", row.names=NULL, stringsAsFactors=FALSE, colClasses=c("character") )
colnames(country_codes) = c("Country", "Country_Name")
country_codes$Country = as.character(country_codes$Country)
country_codes$Country_Name = as.character(country_codes$Country_Name)

country_codes_3char = read.table( "ISO_3166_country_codes.csv", sep=",", header=TRUE, quote='"', comment.char="", row.names=NULL, stringsAsFactors=FALSE, colClasses=c("character") )
colnames(country_codes_3char) = c("Country_Name", "Country_3char")
country_codes$Country_Name[(!(country_codes$Country_Name %in% country_codes_3char$Country_Name))]
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Cabo Verde"), "Cape Verde", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Central African Republic (the)"), "Central African Republic", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Comoros (the)"), "Comoros", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Congo (the)"), "Congo", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Côte d'Ivoire"), "Cote d'Ivoire", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Gambia (the)"), "Gambia", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Libya"), "Libyan Arab Jamahiriya", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Niger (the)"), "Niger", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Réunion"), "Reunion", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Sudan (the)"), "Sudan", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Tanzania, United Republic of"), "United Republic of Tanzania", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Congo (the Democratic Republic of the)"), "Democratic Republic of the Congo", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Bahamas (the)"), "Bahamas", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Bolivia (Plurinational State of)"), "Bolivia", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Virgin Islands (British)"), "British Virgin Islands", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Cayman Islands (the)"), "Cayman Islands", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Dominican Republic (the)"), "Dominican Republic", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Falkland Islands (the) [Malvinas]"), "Falkland Islands (Malvinas)", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Saint Vincent and the Grenadines"), "Saint Vincent and Grenadines", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Turks and Caicos Islands (the)"), "Turks and Caicos Islands", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="United States of America (the)"), "United States of America", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Virgin Islands (U.S.)"), "Virgin Islands (USA)", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Venezuela (Bolivarian Republic of)"), "Venezuela", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Taiwan (Province of China)"), "China: Province of Taiwan only", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Korea (the Democratic People's Republic of)"), "Democratic Peoples's Republic of Korea", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Hong Kong"), "Hong Kong SAR", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Lao People's Democratic Republic (the)"), "Lao People's Democratic Republic", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Macao"), "Macau", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Palestine, State of"), "Occupied Palestinian Territory", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Philippines (the)"), "Philippines", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Korea (the Republic of)"), "Republic of Korea", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="United Arab Emirates (the)"), "United Arab Emirates", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Czechia"), "Czech Republic", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Republic of North Macedonia"), "North Macedonia", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Netherlands (the)"), "Netherlands", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Moldova (the Republic of)"), "Republic of Moldova", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Russian Federation (the)"), "Russian Federation", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="United Kingdom of Great Britain and Northern Ireland (the)"), "United Kingdom", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Cook Islands (the)"), "Cook Islands", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Marshall Islands (the)"), "Marshall Islands", country_codes_3char$Country_Name )
country_codes_3char$Country_Name = ifelse( (country_codes_3char$Country_Name=="Curaçao"), "Netherlands Antilles", country_codes_3char$Country_Name )
country_codes$Country_Name[(!(country_codes$Country_Name %in% country_codes_3char$Country_Name))]

Morticd10_part1 = read.table( "Morticd10_part1.txt", sep=",", header=TRUE, quote='"', comment.char="", row.names=NULL, stringsAsFactors=FALSE, colClasses=c("character") )
Morticd10_part2 = read.table( "Morticd10_part2.txt", sep=",", header=TRUE, quote='"', comment.char="", row.names=NULL, stringsAsFactors=FALSE, colClasses=c("character") )
Morticd10_part3 = read.table( "Morticd10_part3.txt", sep=",", header=TRUE, quote='"', comment.char="", row.names=NULL, stringsAsFactors=FALSE, colClasses=c("character") )
Morticd10_part4 = read.table( "Morticd10_part4.txt", sep=",", header=TRUE, quote='"', comment.char="", row.names=NULL, stringsAsFactors=FALSE, colClasses=c("character") )
Morticd10_part5 = read.table( "Morticd10_part5.txt", sep=",", header=TRUE, quote='"', comment.char="", row.names=NULL, stringsAsFactors=FALSE, colClasses=c("character") )
Morticd10_part1$Cause = as.character(Morticd10_part1$Cause)
Morticd10_part2$Cause = as.character(Morticd10_part2$Cause)
Morticd10_part3$Cause = as.character(Morticd10_part3$Cause)
Morticd10_part4$Cause = as.character(Morticd10_part4$Cause)
Morticd10_part5$Cause = as.character(Morticd10_part5$Cause)
Morticd10_part1$icd10_3digit_code = substr(Morticd10_part1$Cause, 1, 3)
Morticd10_part2$icd10_3digit_code = substr(Morticd10_part2$Cause, 1, 3)
Morticd10_part3$icd10_3digit_code = substr(Morticd10_part3$Cause, 1, 3)
Morticd10_part4$icd10_3digit_code = substr(Morticd10_part4$Cause, 1, 3)
Morticd10_part5$icd10_3digit_code = substr(Morticd10_part5$Cause, 1, 3)
mort1 = Morticd10_part1[(Morticd10_part1$icd10_3digit_code %in% c("C45","J61")),]
mort2 = Morticd10_part2[(Morticd10_part2$icd10_3digit_code %in% c("C45","J61")),]
mort3 = Morticd10_part3[(Morticd10_part3$icd10_3digit_code %in% c("C45","J61")),]
mort4 = Morticd10_part4[(Morticd10_part4$icd10_3digit_code %in% c("C45","J61")),]
mort5 = Morticd10_part5[(Morticd10_part5$icd10_3digit_code %in% c("C45","J61")),]
mort = rbind(mort1, mort2, mort3, mort4, mort5)
rm(Morticd10_part1, Morticd10_part2, Morticd10_part3, Morticd10_part4, Morticd10_part5)
rm(mort1, mort2, mort3, mort4, mort5)

mort$Country = as.character(mort$Country)
mort2 = merge( x=mort, y=country_codes, by=c("Country"), all.x=TRUE, all.y=FALSE )
mort = mort2
rm(mort2)

mort$Admin1 = as.character(mort$Admin1)
mort$SubDiv = as.character(mort$SubDiv)
mort$Frmat = as.character(mort$Frmat)
mort$Year = as.numeric(as.character(mort$Year))
mort$Sex = as.numeric(as.character(mort$Sex))
for (i in 1:length(colnames(mort))) {
  col = colnames(mort)[i]
  if ((col %like% "^Deaths") | (col %like% "IM_Deaths")) {
    mort[,i] = as.numeric(as.character(mort[,i]))
  }
}

names(mort)[names(mort)=="Deaths1"] = "deaths_all"
names(mort)[names(mort)=="Deaths2"] = "deaths_0"
names(mort)[names(mort)=="Deaths3"] = "deaths_1"
names(mort)[names(mort)=="Deaths4"] = "deaths_2"
names(mort)[names(mort)=="Deaths5"] = "deaths_3"
names(mort)[names(mort)=="Deaths6"] = "deaths_4"
names(mort)[names(mort)=="Deaths7"] = "deaths_5_9"
names(mort)[names(mort)=="Deaths8"] = "deaths_10_14"
names(mort)[names(mort)=="Deaths9"] = "deaths_15_19"
names(mort)[names(mort)=="Deaths10"] = "deaths_20_24"
names(mort)[names(mort)=="Deaths11"] = "deaths_25_29"
names(mort)[names(mort)=="Deaths12"] = "deaths_30_34"
names(mort)[names(mort)=="Deaths13"] = "deaths_35_39"
names(mort)[names(mort)=="Deaths14"] = "deaths_40_44"
names(mort)[names(mort)=="Deaths15"] = "deaths_45_49"
names(mort)[names(mort)=="Deaths16"] = "deaths_50_54"
names(mort)[names(mort)=="Deaths17"] = "deaths_55_59"
names(mort)[names(mort)=="Deaths18"] = "deaths_60_64"
names(mort)[names(mort)=="Deaths19"] = "deaths_65_69"
names(mort)[names(mort)=="Deaths20"] = "deaths_70_74"
names(mort)[names(mort)=="Deaths21"] = "deaths_75_79"
names(mort)[names(mort)=="Deaths22"] = "deaths_80_84"
names(mort)[names(mort)=="Deaths23"] = "deaths_85_89"
names(mort)[names(mort)=="Deaths24"] = "deaths_90_94"
names(mort)[names(mort)=="Deaths25"] = "deaths_95_and_above"
names(mort)[names(mort)=="Deaths26"] = "deaths_age_unspecified"
names(mort)[names(mort)=="IM_deaths1"] = "infant_deaths_0_days"
names(mort)[names(mort)=="IM_deaths2"] = "deaths_1_6_days"
names(mort)[names(mort)=="IM_deaths3"] = "deaths_7_27_days"
names(mort)[names(mort)=="IM_deaths4"] = "deaths_28_364_days"

# C45 Mesothelioma
# C45.0 Mesothelioma of pleura
# C45.1 Mesothelioma of peritoneum
# C45.2 Mesothelioma of pericardium
# C45.7 Mesothelioma of other sites
# C45.9 Mesothelioma, unspecified
# J61 pneumoconiosis due to asbestos and other mineral fibers


##### United Nations (UN) world population
##### Total Population - Both Sexes. De facto population in a country, area or region as of 1 July of the year indicated. Figures are presented in thousands.
##### https://population.un.org/wpp/Download/Standard/Population/WPP2019_POP_F01_1_TOTAL_POPULATION_BOTH_SEXES.xlsx

pop_total = read.table( "WPP2019_POP_F01_1_TOTAL_POPULATION_BOTH_SEXES.csv", sep=",", header=TRUE, quote='"', comment.char="", row.names=NULL, stringsAsFactors=FALSE, colClasses=c("character") )

pop2 = melt(pop_total, id.vars=c("Index", "Variant", "Region..subregion..country.or.area..", "Notes", "Country.code", "Type", "Parent.code"))
names(pop2)[names(pop2)=="Region..subregion..country.or.area.."] = "Country_Name"
names(pop2)[names(pop2)=="variable"] = "Year"
names(pop2)[names(pop2)=="value"] = "population"
pop3 = pop2[(pop2$Type=="Country/Area"), c("Country_Name", "Year", "population")]
pop3$Year = gsub("X", "", pop3$Year)
pop3$population = gsub(" ", "", pop3$population)
pop3$Year = as.numeric(as.character(pop3$Year))
pop3$population = as.numeric(as.character(pop3$population))
pop3$population = pop3$population * 1000

country_codes$Country_Name[(!(country_codes$Country_Name %in% pop3$Country_Name))]
pop3$Country_Name = ifelse( (pop3$Country_Name=="Cabo Verde"), "Cape Verde", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="Côte d'Ivoire"), "Cote d'Ivoire", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="Libya"), "Libyan Arab Jamahiriya", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="Réunion"), "Reunion", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="Bolivia (Plurinational State of)"), "Bolivia", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="Saint Vincent and the Grenadines"), "Saint Vincent and Grenadines", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="United States Virgin Islands"), "Virgin Islands (USA)", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="Venezuela (Bolivarian Republic of)"), "Venezuela", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="China, Taiwan Province of China"), "China: Province of Taiwan only", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="Dem. People's Republic of Korea"), "Democratic Peoples's Republic of Korea", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="China, Hong Kong SAR"), "Hong Kong SAR", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="China, Macao SAR"), "Macau", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="State of Palestine"), "Occupied Palestinian Territory", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="Czechia"), "Czech Republic", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="Micronesia (Fed. States of)"), "Micronesia (Federated States of)", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="Curaçao"), "Netherlands Antilles", pop3$Country_Name)
country_codes$Country_Name[(!(country_codes$Country_Name %in% pop3$Country_Name))]

pop_total = pop3
rm(pop2, pop3)


#####
pop_1970 = pop_total[(pop_total$Year==1970),]

pop_1970_USSR = pop_total[((pop_total$Country_Name %in% c("Russian Federation", "Kazakhstan", "Ukraine", "Azerbaijan", "Estonia", "Kyrgyzstan", "Latvia", "Lithuania", "Republic of Moldova", "Tajikistan", "Uzbekistan")) & (pop_total$Year==1970)),]
pop_1970_USSR_sum = sum(pop_1970_USSR$population)
pop_1970_USSR$pop_fraction = pop_1970_USSR$population / pop_1970_USSR_sum
pop_1970_USSR

pop_1970_Yugoslavia = pop_total[((pop_total$Country_Name %in% c("Bosnia and Herzegovina", "Croatia", "Serbia", "Slovenia", "North Macedonia", "Montenegro")) & (pop_total$Year==1970)),]
pop_1970_Yugoslavia_sum = sum(pop_1970_Yugoslavia$population)
pop_1970_Yugoslavia$pop_fraction = pop_1970_Yugoslavia$population / pop_1970_Yugoslavia_sum
pop_1970_Yugoslavia

pop_1970_Czechoslovakia = pop_total[((pop_total$Country_Name %in% c("Czech Republic", "Slovakia")) & (pop_total$Year==1970)),]
pop_1970_Czechoslovakia_sum = sum(pop_1970_Czechoslovakia$population)
pop_1970_Czechoslovakia$pop_fraction = pop_1970_Czechoslovakia$population / pop_1970_Czechoslovakia_sum
pop_1970_Czechoslovakia

pop_1970_Belgium_and_Luxembourg = pop_total[((pop_total$Country_Name %in% c("Belgium", "Luxembourg")) & (pop_total$Year==1970)),]
pop_1970_Belgium_and_Luxembourg_sum = sum(pop_1970_Belgium_and_Luxembourg$population)
pop_1970_Belgium_and_Luxembourg$pop_fraction = pop_1970_Belgium_and_Luxembourg$population / pop_1970_Belgium_and_Luxembourg_sum
pop_1970_Belgium_and_Luxembourg


#####
pop_1965 = pop_total[(pop_total$Year==1965),]

pop_1965_USSR = pop_total[((pop_total$Country_Name %in% c("Russian Federation", "Kazakhstan", "Ukraine", "Azerbaijan", "Estonia", "Kyrgyzstan", "Latvia", "Lithuania", "Republic of Moldova", "Tajikistan", "Uzbekistan")) & (pop_total$Year==1965)),]
pop_1965_USSR_sum = sum(pop_1965_USSR$population)
pop_1965_USSR$pop_fraction = pop_1965_USSR$population / pop_1965_USSR_sum
pop_1965_USSR

pop_1965_Yugoslavia = pop_total[((pop_total$Country_Name %in% c("Bosnia and Herzegovina", "Croatia", "Serbia", "Slovenia", "North Macedonia", "Montenegro")) & (pop_total$Year==1965)),]
pop_1965_Yugoslavia_sum = sum(pop_1965_Yugoslavia$population)
pop_1965_Yugoslavia$pop_fraction = pop_1965_Yugoslavia$population / pop_1965_Yugoslavia_sum
pop_1965_Yugoslavia
   
pop_1965_Czechoslovakia = pop_total[((pop_total$Country_Name %in% c("Czech Republic", "Slovakia")) & (pop_total$Year==1965)),]
pop_1965_Czechoslovakia_sum = sum(pop_1965_Czechoslovakia$population)
pop_1965_Czechoslovakia$pop_fraction = pop_1965_Czechoslovakia$population / pop_1965_Czechoslovakia_sum
pop_1965_Czechoslovakia

pop_1965_Belgium_and_Luxembourg = pop_total[((pop_total$Country_Name %in% c("Belgium", "Luxembourg")) & (pop_total$Year==1965)),]
pop_1965_Belgium_and_Luxembourg_sum = sum(pop_1965_Belgium_and_Luxembourg$population)
pop_1965_Belgium_and_Luxembourg$pop_fraction = pop_1965_Belgium_and_Luxembourg$population / pop_1965_Belgium_and_Luxembourg_sum
pop_1965_Belgium_and_Luxembourg


#####
pop_1960 = pop_total[(pop_total$Year==1960),]

pop_1960_USSR = pop_total[((pop_total$Country_Name %in% c("Russian Federation", "Kazakhstan", "Ukraine", "Azerbaijan", "Estonia", "Kyrgyzstan", "Latvia", "Lithuania", "Republic of Moldova", "Tajikistan", "Uzbekistan")) & (pop_total$Year==1960)),]
pop_1960_USSR_sum = sum(pop_1960_USSR$population)
pop_1960_USSR$pop_fraction = pop_1960_USSR$population / pop_1960_USSR_sum
pop_1960_USSR

pop_1960_Yugoslavia = pop_total[((pop_total$Country_Name %in% c("Bosnia and Herzegovina", "Croatia", "Serbia", "Slovenia", "North Macedonia", "Montenegro")) & (pop_total$Year==1960)),]
pop_1960_Yugoslavia_sum = sum(pop_1960_Yugoslavia$population)
pop_1960_Yugoslavia$pop_fraction = pop_1960_Yugoslavia$population / pop_1960_Yugoslavia_sum
pop_1960_Yugoslavia
       
pop_1960_Czechoslovakia = pop_total[((pop_total$Country_Name %in% c("Czech Republic", "Slovakia")) & (pop_total$Year==1960)),]
pop_1960_Czechoslovakia_sum = sum(pop_1960_Czechoslovakia$population)
pop_1960_Czechoslovakia$pop_fraction = pop_1960_Czechoslovakia$population / pop_1960_Czechoslovakia_sum
pop_1960_Czechoslovakia

pop_1960_Belgium_and_Luxembourg = pop_total[((pop_total$Country_Name %in% c("Belgium", "Luxembourg")) & (pop_total$Year==1960)),]
pop_1960_Belgium_and_Luxembourg_sum = sum(pop_1960_Belgium_and_Luxembourg$population)
pop_1960_Belgium_and_Luxembourg$pop_fraction = pop_1960_Belgium_and_Luxembourg$population / pop_1960_Belgium_and_Luxembourg_sum
pop_1960_Belgium_and_Luxembourg


##### United Nations (UN) world population
##### Annual Population by Five-Year Age Groups - Both Sexes. De facto population as of 1 July of the year indicated classified by five-year age groups (0-4, 5-9, 10-14, ..., 95-99, 100+). Data are presented in thousands.
##### https://population.un.org/wpp/Download/Standard/Population/WPP2019_POP_F15_1_ANNUAL_POPULATION_BY_AGE_BOTH_SEXES.xlsx

pop_by_age = read.table( "WPP2019_POP_F15_1_ANNUAL_POPULATION_BY_AGE_BOTH_SEXES.csv", sep=",", header=TRUE, quote='"', comment.char="", row.names=NULL, stringsAsFactors=FALSE, colClasses=c("character") )

pop1 = pop_by_age

names(pop1)[names(pop1)=="X0.4"] = "age_0_to_4"
names(pop1)[names(pop1)=="X5.9"] = "age_5_to_9"
names(pop1)[names(pop1)=="X10.14"] = "age_10_to_14"
names(pop1)[names(pop1)=="X15.19"] = "age_15_to_19"
names(pop1)[names(pop1)=="X20.24"] = "age_20_to_24"
names(pop1)[names(pop1)=="X25.29"] = "age_25_to_29"
names(pop1)[names(pop1)=="X30.34"] = "age_30_to_34"
names(pop1)[names(pop1)=="X35.39"] = "age_35_to_39"
names(pop1)[names(pop1)=="X40.44"] = "age_40_to_44"
names(pop1)[names(pop1)=="X45.49"] = "age_45_to_49"
names(pop1)[names(pop1)=="X50.54"] = "age_50_to_54"
names(pop1)[names(pop1)=="X55.59"] = "age_55_to_59"
names(pop1)[names(pop1)=="X60.64"] = "age_60_to_64"
names(pop1)[names(pop1)=="X65.69"] = "age_65_to_69"
names(pop1)[names(pop1)=="X70.74"] = "age_70_to_74"
names(pop1)[names(pop1)=="X75.79"] = "age_75_to_79"
names(pop1)[names(pop1)=="X80.84"] = "age_80_to_84"
names(pop1)[names(pop1)=="X85.89"] = "age_85_to_89"
names(pop1)[names(pop1)=="X90.94"] = "age_90_to_94"
names(pop1)[names(pop1)=="X95.99"] = "age_95_to_99"
names(pop1)[names(pop1)=="X100."] = "age_100_plus"

pop2 = melt(pop1, id.vars=c("Index", "Variant", "Region..subregion..country.or.area..", "Notes", "Country.code", "Type", "Parent.code", "Reference.date..as.of.1.July."))
names(pop2)[names(pop2)=="Region..subregion..country.or.area.."] = "Country_Name"
names(pop2)[names(pop2)=="Reference.date..as.of.1.July."] = "Year"
names(pop2)[names(pop2)=="variable"] = "age_group"
names(pop2)[names(pop2)=="value"] = "population"

pop3 = pop2[(pop2$Type=="Country/Area"), c("Country_Name", "Year", "age_group", "population")]
pop3$population = gsub(" ", "", pop3$population)
pop3$Year = as.numeric(as.character(pop3$Year))
pop3$age_group = as.character(pop3$age_group)
pop3$population = as.numeric(as.character(pop3$population))
pop3$population = pop3$population * 1000

country_codes$Country_Name[(!(country_codes$Country_Name %in% pop3$Country_Name))]
pop3$Country_Name = ifelse( (pop3$Country_Name=="Cabo Verde"), "Cape Verde", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="Côte d'Ivoire"), "Cote d'Ivoire", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="Libya"), "Libyan Arab Jamahiriya", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="Réunion"), "Reunion", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="Bolivia (Plurinational State of)"), "Bolivia", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="Saint Vincent and the Grenadines"), "Saint Vincent and Grenadines", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="United States Virgin Islands"), "Virgin Islands (USA)", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="Venezuela (Bolivarian Republic of)"), "Venezuela", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="China, Taiwan Province of China"), "China: Province of Taiwan only", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="Dem. People's Republic of Korea"), "Democratic Peoples's Republic of Korea", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="China, Hong Kong SAR"), "Hong Kong SAR", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="China, Macao SAR"), "Macau", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="State of Palestine"), "Occupied Palestinian Territory", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="Czechia"), "Czech Republic", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="Micronesia (Fed. States of)"), "Micronesia (Federated States of)", pop3$Country_Name)
pop3$Country_Name = ifelse( (pop3$Country_Name=="Curaçao"), "Netherlands Antilles", pop3$Country_Name)
country_codes$Country_Name[(!(country_codes$Country_Name %in% pop3$Country_Name))]

pop4 = dcast(pop3, Country_Name + Year ~ age_group, value.var="population")
pop4$age_0_to_14 = apply( pop4[,c("age_0_to_4", "age_5_to_9", "age_10_to_14")], 1, sum, na.rm=TRUE )
pop4$age_75_plus = apply( pop4[,c("age_75_to_79", "age_80_to_84", "age_85_to_89", "age_90_to_94", "age_95_to_99", "age_100_plus")], 1, sum, na.rm=TRUE )
pop4$age_85_plus = apply( pop4[,c("age_85_to_89", "age_90_to_94", "age_95_to_99", "age_100_plus")], 1, sum, na.rm=TRUE )
pop4$age_95_plus = apply( pop4[,c("age_95_to_99", "age_100_plus")], 1, sum, na.rm=TRUE )

pop5 = melt(pop4, id.vars=c("Country_Name", "Year"))
names(pop5)[names(pop5)=="variable"] = "age_group"
names(pop5)[names(pop5)=="value"] = "population"
pop5$age_group = as.character(pop5$age_group)

pop_by_age = pop5
rm(pop2, pop3, pop4, pop5)


##### United Nations (UN) world population
##### Annual Population by Five-Year Age Groups - males. De facto population as of 1 July of the year indicated classified by five-year age groups (0-4, 5-9, 10-14, ..., 95-99, 100+). Data are presented in thousands.
##### https://population.un.org/wpp/Download/Standard/Population/WPP2019_POP_F15_2_ANNUAL_POPULATION_BY_AGE_males.xlsx

pop_males_by_age = read.table( "WPP2019_POP_F15_2_ANNUAL_POPULATION_BY_AGE_MALE.csv", sep=",", header=TRUE, quote='"', comment.char="", row.names=NULL, stringsAsFactors=FALSE, colClasses=c("character") )

pop1 = pop_males_by_age

names(pop1)[names(pop1)=="X0.4"] = "age_0_to_4"
names(pop1)[names(pop1)=="X5.9"] = "age_5_to_9"
names(pop1)[names(pop1)=="X10.14"] = "age_10_to_14"
names(pop1)[names(pop1)=="X15.19"] = "age_15_to_19"
names(pop1)[names(pop1)=="X20.24"] = "age_20_to_24"
names(pop1)[names(pop1)=="X25.29"] = "age_25_to_29"
names(pop1)[names(pop1)=="X30.34"] = "age_30_to_34"
names(pop1)[names(pop1)=="X35.39"] = "age_35_to_39"
names(pop1)[names(pop1)=="X40.44"] = "age_40_to_44"
names(pop1)[names(pop1)=="X45.49"] = "age_45_to_49"
names(pop1)[names(pop1)=="X50.54"] = "age_50_to_54"
names(pop1)[names(pop1)=="X55.59"] = "age_55_to_59"
names(pop1)[names(pop1)=="X60.64"] = "age_60_to_64"
names(pop1)[names(pop1)=="X65.69"] = "age_65_to_69"
names(pop1)[names(pop1)=="X70.74"] = "age_70_to_74"
names(pop1)[names(pop1)=="X75.79"] = "age_75_to_79"
names(pop1)[names(pop1)=="X80.84"] = "age_80_to_84"
names(pop1)[names(pop1)=="X85.89"] = "age_85_to_89"
names(pop1)[names(pop1)=="X90.94"] = "age_90_to_94"
names(pop1)[names(pop1)=="X95.99"] = "age_95_to_99"
names(pop1)[names(pop1)=="X100."] = "age_100_plus"

names(pop1)[names(pop1)=="Region..subregion..country.or.area.."] = "Country_Name"
names(pop1)[names(pop1)=="Reference.date..as.of.1.July."] = "Year"

country_codes$Country_Name[(!(country_codes$Country_Name %in% pop1$Country_Name))]
pop1$Country_Name = ifelse( (pop1$Country_Name=="Cabo Verde"), "Cape Verde", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="Côte d'Ivoire"), "Cote d'Ivoire", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="Libya"), "Libyan Arab Jamahiriya", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="Réunion"), "Reunion", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="Bolivia (Plurinational State of)"), "Bolivia", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="Saint Vincent and the Grenadines"), "Saint Vincent and Grenadines", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="United States Virgin Islands"), "Virgin Islands (USA)", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="Venezuela (Bolivarian Republic of)"), "Venezuela", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="China, Taiwan Province of China"), "China: Province of Taiwan only", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="Dem. People's Republic of Korea"), "Democratic Peoples's Republic of Korea", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="China, Hong Kong SAR"), "Hong Kong SAR", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="China, Macao SAR"), "Macau", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="State of Palestine"), "Occupied Palestinian Territory", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="Czechia"), "Czech Republic", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="Micronesia (Fed. States of)"), "Micronesia (Federated States of)", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="Curaçao"), "Netherlands Antilles", pop1$Country_Name)
country_codes$Country_Name[(!(country_codes$Country_Name %in% pop1$Country_Name))]

for (col in c("age_0_to_4", "age_5_to_9", "age_10_to_14", "age_15_to_19", "age_20_to_24", "age_25_to_29", "age_30_to_34", "age_35_to_39", "age_40_to_44", "age_45_to_49", "age_50_to_54", "age_55_to_59", "age_60_to_64", "age_65_to_69", "age_70_to_74", "age_75_to_79", "age_80_to_84", "age_85_to_89", "age_90_to_94", "age_95_to_99", "age_100_plus")) {
  pop1[,col] = gsub(" ", "", pop1[,col])
  pop1[,col] = as.numeric(as.character(pop1[,col]))
  pop1[,col] = ifelse( (is.na(pop1[,col])), 0, pop1[,col] )
  pop1[,col] = pop1[,col] * 1000
}

pop1$male_population = apply( pop1[,c("age_0_to_4", "age_5_to_9", "age_10_to_14", "age_15_to_19", "age_20_to_24", "age_25_to_29", "age_30_to_34", "age_35_to_39", "age_40_to_44", "age_45_to_49", "age_50_to_54", "age_55_to_59", "age_60_to_64", "age_65_to_69", "age_70_to_74", "age_75_to_79", "age_80_to_84", "age_85_to_89", "age_90_to_94", "age_95_to_99", "age_100_plus")], 1, sum, na.rm=TRUE )

pop_males = pop1[,c("Country_Name", "Year", "male_population")]

pop2 = melt(pop1, id.vars=c("Index", "Variant", "Country_Name", "Notes", "Country.code", "Type", "Parent.code", "Year"))

names(pop2)[names(pop2)=="variable"] = "age_group"
names(pop2)[names(pop2)=="value"] = "population"

pop3 = pop2[(pop2$Type=="Country/Area"), c("Country_Name", "Year", "age_group", "population")]
pop3$age_group = as.character(pop3$age_group)

pop_males_by_age = pop3

rm(pop1, pop2, pop3)


##### United Nations (UN) world population
##### Annual Population by Five-Year Age Groups - females. De facto population as of 1 July of the year indicated classified by five-year age groups (0-4, 5-9, 10-14, ..., 95-99, 100+). Data are presented in thousands.
##### https://population.un.org/wpp/Download/Standard/Population/WPP2019_POP_F15_3_ANNUAL_POPULATION_BY_AGE_females.xlsx

pop_females_by_age = read.table( "WPP2019_POP_F15_3_ANNUAL_POPULATION_BY_AGE_FEMALE.csv", sep=",", header=TRUE, quote='"', comment.char="", row.names=NULL, stringsAsFactors=FALSE, colClasses=c("character") )

pop1 = pop_females_by_age

names(pop1)[names(pop1)=="X0.4"] = "age_0_to_4"
names(pop1)[names(pop1)=="X5.9"] = "age_5_to_9"
names(pop1)[names(pop1)=="X10.14"] = "age_10_to_14"
names(pop1)[names(pop1)=="X15.19"] = "age_15_to_19"
names(pop1)[names(pop1)=="X20.24"] = "age_20_to_24"
names(pop1)[names(pop1)=="X25.29"] = "age_25_to_29"
names(pop1)[names(pop1)=="X30.34"] = "age_30_to_34"
names(pop1)[names(pop1)=="X35.39"] = "age_35_to_39"
names(pop1)[names(pop1)=="X40.44"] = "age_40_to_44"
names(pop1)[names(pop1)=="X45.49"] = "age_45_to_49"
names(pop1)[names(pop1)=="X50.54"] = "age_50_to_54"
names(pop1)[names(pop1)=="X55.59"] = "age_55_to_59"
names(pop1)[names(pop1)=="X60.64"] = "age_60_to_64"
names(pop1)[names(pop1)=="X65.69"] = "age_65_to_69"
names(pop1)[names(pop1)=="X70.74"] = "age_70_to_74"
names(pop1)[names(pop1)=="X75.79"] = "age_75_to_79"
names(pop1)[names(pop1)=="X80.84"] = "age_80_to_84"
names(pop1)[names(pop1)=="X85.89"] = "age_85_to_89"
names(pop1)[names(pop1)=="X90.94"] = "age_90_to_94"
names(pop1)[names(pop1)=="X95.99"] = "age_95_to_99"
names(pop1)[names(pop1)=="X100."] = "age_100_plus"

names(pop1)[names(pop1)=="Region..subregion..country.or.area.."] = "Country_Name"
names(pop1)[names(pop1)=="Reference.date..as.of.1.July."] = "Year"

country_codes$Country_Name[(!(country_codes$Country_Name %in% pop1$Country_Name))]
pop1$Country_Name = ifelse( (pop1$Country_Name=="Cabo Verde"), "Cape Verde", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="Côte d'Ivoire"), "Cote d'Ivoire", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="Libya"), "Libyan Arab Jamahiriya", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="Réunion"), "Reunion", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="Bolivia (Plurinational State of)"), "Bolivia", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="Saint Vincent and the Grenadines"), "Saint Vincent and Grenadines", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="United States Virgin Islands"), "Virgin Islands (USA)", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="Venezuela (Bolivarian Republic of)"), "Venezuela", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="China, Taiwan Province of China"), "China: Province of Taiwan only", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="Dem. People's Republic of Korea"), "Democratic Peoples's Republic of Korea", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="China, Hong Kong SAR"), "Hong Kong SAR", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="China, Macao SAR"), "Macau", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="State of Palestine"), "Occupied Palestinian Territory", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="Czechia"), "Czech Republic", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="Micronesia (Fed. States of)"), "Micronesia (Federated States of)", pop1$Country_Name)
pop1$Country_Name = ifelse( (pop1$Country_Name=="Curaçao"), "Netherlands Antilles", pop1$Country_Name)
country_codes$Country_Name[(!(country_codes$Country_Name %in% pop1$Country_Name))]

for (col in c("age_0_to_4", "age_5_to_9", "age_10_to_14", "age_15_to_19", "age_20_to_24", "age_25_to_29", "age_30_to_34", "age_35_to_39", "age_40_to_44", "age_45_to_49", "age_50_to_54", "age_55_to_59", "age_60_to_64", "age_65_to_69", "age_70_to_74", "age_75_to_79", "age_80_to_84", "age_85_to_89", "age_90_to_94", "age_95_to_99", "age_100_plus")) {
  pop1[,col] = gsub(" ", "", pop1[,col])
  pop1[,col] = as.numeric(as.character(pop1[,col]))
  pop1[,col] = ifelse( (is.na(pop1[,col])), 0, pop1[,col] )
  pop1[,col] = pop1[,col] * 1000
}

pop1$female_population = apply( pop1[,c("age_0_to_4", "age_5_to_9", "age_10_to_14", "age_15_to_19", "age_20_to_24", "age_25_to_29", "age_30_to_34", "age_35_to_39", "age_40_to_44", "age_45_to_49", "age_50_to_54", "age_55_to_59", "age_60_to_64", "age_65_to_69", "age_70_to_74", "age_75_to_79", "age_80_to_84", "age_85_to_89", "age_90_to_94", "age_95_to_99", "age_100_plus")], 1, sum, na.rm=TRUE )

pop_females = pop1[,c("Country_Name", "Year", "female_population")]

pop2 = melt(pop1, id.vars=c("Index", "Variant", "Country_Name", "Notes", "Country.code", "Type", "Parent.code", "Year"))

names(pop2)[names(pop2)=="variable"] = "age_group"
names(pop2)[names(pop2)=="value"] = "population"

pop3 = pop2[(pop2$Type=="Country/Area"), c("Country_Name", "Year", "age_group", "population")]
pop3$age_group = as.character(pop3$age_group)

pop_females_by_age = pop3

rm(pop1, pop2, pop3)


##### World Health Organization (WHO) world population
##### https://www.who.int/data/data-collection-tools/who-mortality-database/
##### Population and live births mort_pop.zip

who_pop_by_age_and_sex = read.table( "pop.txt", sep=",", header=TRUE, quote='"', comment.char="", row.names=NULL, stringsAsFactors=FALSE, colClasses=c("character") )

pop1 = who_pop_by_age_and_sex

pop1$Admin1 = as.character(pop1$Admin1)
pop1$SubDiv = as.character(pop1$SubDiv)
pop1$Frmat = as.character(pop1$Frmat)
pop1$Year = as.numeric(as.character(pop1$Year))
pop1$Sex = as.numeric(as.character(pop1$Sex))
for (i in 1:length(colnames(pop1))) {
  col = colnames(pop1)[i]
  if ((col %like% "^Pop") | (col == "Lb")) {
    pop1[,i] = ifelse( (pop1[,i]==""), "0", pop1[,i] )
    pop1[,i] = as.numeric(as.character(pop1[,i]))
  }
}

names(pop1)[names(pop1)=="Pop1"] = "age_all"
names(pop1)[names(pop1)=="Pop2"] = "age_0"
names(pop1)[names(pop1)=="Pop3"] = "age_1"
names(pop1)[names(pop1)=="Pop4"] = "age_2"
names(pop1)[names(pop1)=="Pop5"] = "age_3"
names(pop1)[names(pop1)=="Pop6"] = "age_4"
names(pop1)[names(pop1)=="Pop7"] = "age_5_to_9"
names(pop1)[names(pop1)=="Pop8"] = "age_10_to_14"
names(pop1)[names(pop1)=="Pop9"] = "age_15_to_19"
names(pop1)[names(pop1)=="Pop10"] = "age_20_to_24"
names(pop1)[names(pop1)=="Pop11"] = "age_25_to_29"
names(pop1)[names(pop1)=="Pop12"] = "age_30_to_34"
names(pop1)[names(pop1)=="Pop13"] = "age_35_to_39"
names(pop1)[names(pop1)=="Pop14"] = "age_40_to_44"
names(pop1)[names(pop1)=="Pop15"] = "age_45_to_49"
names(pop1)[names(pop1)=="Pop16"] = "age_50_to_54"
names(pop1)[names(pop1)=="Pop17"] = "age_55_to_59"
names(pop1)[names(pop1)=="Pop18"] = "age_60_to_64"
names(pop1)[names(pop1)=="Pop19"] = "age_65_to_69"
names(pop1)[names(pop1)=="Pop20"] = "age_70_to_74"
names(pop1)[names(pop1)=="Pop21"] = "age_75_to_79"
names(pop1)[names(pop1)=="Pop22"] = "age_80_to_84"
names(pop1)[names(pop1)=="Pop23"] = "age_85_to_89"
names(pop1)[names(pop1)=="Pop24"] = "age_90_to_94"
names(pop1)[names(pop1)=="Pop25"] = "age_95_plus"
names(pop1)[names(pop1)=="Pop26"] = "age_unspecified"
names(pop1)[names(pop1)=="Lb"] = "live_births"

pop1a = merge( x=pop1, y=country_codes, by=c("Country"), all.x=TRUE, all.y=FALSE )
pop1a$Country = NULL

who_pop_male = pop1a[(pop1a$Sex==1) ,c("Country_Name", "Year", "age_all")]
who_pop_female = pop1a[(pop1a$Sex==2) ,c("Country_Name", "Year", "age_all")]
colnames(who_pop_male) = c("Country_Name", "Year", "male_population")
colnames(who_pop_female) = c("Country_Name", "Year", "female_population")

pop1a$age_0_to_4 = apply(pop1a[,c("age_0","age_1","age_2","age_3","age_4")], 1, sum, na.rm=FALSE)
pop1a$age_0_to_14 = apply(pop1a[,c("age_0_to_4","age_5_to_9","age_10_to_14")], 1, sum, na.rm=FALSE)
pop1a$age_75_plus = apply(pop1a[,c("age_75_to_79","age_80_to_84","age_85_to_89","age_90_to_94","age_95_plus")], 1, sum, na.rm=FALSE)
pop1a$age_85_plus = apply(pop1a[,c("age_85_to_89","age_90_to_94","age_95_plus")], 1, sum, na.rm=FALSE)

# Make sure there is a row of data per Country+Year+Sex
pop1b = sqldf("select Country, Year, Sex, count(*) from pop1 group by Country, Year, Sex having count(*) > 1")
# Brazil, Panama, and Israel have extra rows for Admin1 in addition to whole of country rows
# China has multiple SubDiv that do not necessarily add up to whole of country figures

pop1c = pop1a[((pop1a$Admin1=="") & (pop1a$SubDiv=="")),]
pop1c$Admin1 = NULL
pop1c$SubDiv = NULL
pop1c$Frmat = NULL

pop1_males = pop1c[(pop1c$Sex==1),]
pop1_females = pop1c[(pop1c$Sex==2),]
pop1_males$Sex = NULL
pop1_females$Sex = NULL

pop1_both = sqldf("select Country_Name, Year, sum(age_all), sum(age_0), sum(age_1), sum(age_2), sum(age_3), sum(age_4), sum(age_5_to_9), sum(age_10_to_14), sum(age_15_to_19), sum(age_20_to_24), sum(age_25_to_29), sum(age_30_to_34), sum(age_35_to_39), sum(age_40_to_44), sum(age_45_to_49), sum(age_50_to_54), sum(age_55_to_59), sum(age_60_to_64), sum(age_65_to_69), sum(age_70_to_74), sum(age_75_to_79), sum(age_80_to_84), sum(age_85_to_89), sum(age_90_to_94), sum(age_95_plus), sum(age_unspecified), sum(live_births), sum(age_0_to_4), sum(age_0_to_14), sum(age_75_plus), sum(age_85_plus) from pop1c group by Country_Name, Year")
colnames(pop1_both) = c("Country_Name", "Year", "age_all", "age_0", "age_1", "age_2", "age_3", "age_4", "age_5_to_9", "age_10_to_14", "age_15_to_19", "age_20_to_24", "age_25_to_29", "age_30_to_34", "age_35_to_39", "age_40_to_44", "age_45_to_49", "age_50_to_54", "age_55_to_59", "age_60_to_64", "age_65_to_69", "age_70_to_74", "age_75_to_79", "age_80_to_84", "age_85_to_89", "age_90_to_94", "age_95_plus", "age_unspecified", "live_births", "age_0_to_4", "age_0_to_14", "age_75_plus", "age_85_plus")

who_pop_by_age = melt(pop1_both, id.vars=c("Country_Name", "Year"))
names(who_pop_by_age)[names(who_pop_by_age)=="variable"] = "age_group"
names(who_pop_by_age)[names(who_pop_by_age)=="value"] = "population"

who_pop_males_by_age = melt(pop1_males, id.vars=c("Country_Name", "Year"))
names(who_pop_males_by_age)[names(who_pop_males_by_age)=="variable"] = "age_group"
names(who_pop_males_by_age)[names(who_pop_males_by_age)=="value"] = "population"

who_pop_females_by_age = melt(pop1_females, id.vars=c("Country_Name", "Year"))
names(who_pop_females_by_age)[names(who_pop_females_by_age)=="variable"] = "age_group"
names(who_pop_females_by_age)[names(who_pop_females_by_age)=="value"] = "population"

rm(pop1, pop1a, pop1c, pop1_males, pop1_females, pop1_both)


#####
# The UN population data does not have Bermuda, Dominica, and Saint Kitts and Nevis. Thus get that data from WHO.

pop1 = who_pop_by_age[(who_pop_by_age$Country_Name %in% c("Bermuda", "Dominica", "Saint Kitts and Nevis")),]
pop_by_age_with_extra_countries = rbind( pop_by_age, pop1 )

pop0 = pop_males_by_age
pop1 = who_pop_males_by_age[(who_pop_males_by_age$Country_Name %in% c("Bermuda", "Dominica", "Saint Kitts and Nevis")),]
pop2 = rbind( pop0, pop1 )
pop_males_by_age_with_extra_countries = pop2

pop0 = pop_females_by_age
pop1 = who_pop_females_by_age[(who_pop_females_by_age$Country_Name %in% c("Bermuda", "Dominica", "Saint Kitts and Nevis")),]
pop2 = rbind( pop0, pop1 )
pop_females_by_age_with_extra_countries = pop2

pop1 = who_pop_male[(who_pop_male$Country_Name %in% c("Bermuda", "Dominica", "Saint Kitts and Nevis")),]
pop_males_with_extra_countries = rbind( pop_males, pop1 )

pop1 = who_pop_female[(who_pop_female$Country_Name %in% c("Bermuda", "Dominica", "Saint Kitts and Nevis")),]
pop_females_with_extra_countries = rbind( pop_females, pop1 )

rm(pop0, pop1, pop2)


##### AGE STANDARDIZATION OF RATES: A NEW WHO STANDARD
##### GPE Discussion Paper Series: No.31
##### EIP/GPE/EBD
##### World Health Organization 2001
##### https://www.who.int/healthinfo/paper31.pdf
##### Table 4. WHO World Standard Population Distribution (%), based on world average population between 2000-2025

std_pop_table1 = read.table( "WHO_World_Standard_paper31_Table1.csv", sep=",", header=TRUE, quote='"', comment.char="", row.names=NULL, stringsAsFactors=FALSE, colClasses=c("character") )
std_pop_table4 = read.table( "WHO_World_Standard_paper31_Table4.csv", sep=",", header=TRUE, quote='"', comment.char="", row.names=NULL, stringsAsFactors=FALSE, colClasses=c("character") )

std_pop_table1$Age_group = as.character(std_pop_table1$Age_group)
std_pop_table1$Segi_world_standard = as.numeric(as.character(std_pop_table1$Segi_world_standard))
std_pop_table1$Scandinavian_European_standard = as.numeric(as.character(std_pop_table1$Scandinavian_European_standard))
std_pop_table1$WHO_World_Standard = as.numeric(as.character(std_pop_table1$WHO_World_Standard))

std_pop_table4$Age_group = as.character(std_pop_table4$Age_group)
std_pop_table4$World_Average_2000_2025 = as.numeric(as.character(std_pop_table4$World_Average_2000_2025))

std_pop = std_pop_table1
std_pop$WHO_World_Standard_rate = std_pop$WHO_World_Standard / 100
std_pop$Segi_world_standard = NULL
std_pop$Scandinavian_European_standard = NULL
std_pop$WHO_World_Standard = NULL

names(std_pop)[names(std_pop)=="Age_group"] = "age_group"
std_pop$age_group = ifelse( (std_pop$age_group=="0-4"), "age_0_to_4", std_pop$age_group )
std_pop$age_group = ifelse( (std_pop$age_group=="5-9"), "age_5_to_9", std_pop$age_group )
std_pop$age_group = ifelse( (std_pop$age_group=="10-14"), "age_10_to_14", std_pop$age_group )
std_pop$age_group = ifelse( (std_pop$age_group=="15-19"), "age_15_to_19", std_pop$age_group )
std_pop$age_group = ifelse( (std_pop$age_group=="20-24"), "age_20_to_24", std_pop$age_group )
std_pop$age_group = ifelse( (std_pop$age_group=="25-29"), "age_25_to_29", std_pop$age_group )
std_pop$age_group = ifelse( (std_pop$age_group=="30-34"), "age_30_to_34", std_pop$age_group )
std_pop$age_group = ifelse( (std_pop$age_group=="35-39"), "age_35_to_39", std_pop$age_group )
std_pop$age_group = ifelse( (std_pop$age_group=="40-44"), "age_40_to_44", std_pop$age_group )
std_pop$age_group = ifelse( (std_pop$age_group=="45-49"), "age_45_to_49", std_pop$age_group )
std_pop$age_group = ifelse( (std_pop$age_group=="50-54"), "age_50_to_54", std_pop$age_group )
std_pop$age_group = ifelse( (std_pop$age_group=="55-59"), "age_55_to_59", std_pop$age_group )
std_pop$age_group = ifelse( (std_pop$age_group=="60-64"), "age_60_to_64", std_pop$age_group )
std_pop$age_group = ifelse( (std_pop$age_group=="65-69"), "age_65_to_69", std_pop$age_group )
std_pop$age_group = ifelse( (std_pop$age_group=="70-74"), "age_70_to_74", std_pop$age_group )
std_pop$age_group = ifelse( (std_pop$age_group=="75-79"), "age_75_to_79", std_pop$age_group )
std_pop$age_group = ifelse( (std_pop$age_group=="80-84"), "age_80_to_84", std_pop$age_group )
std_pop$age_group = ifelse( (std_pop$age_group=="85+"), "age_85_plus", std_pop$age_group )

pop1a = std_pop[(std_pop$age_group %in% c("age_0_to_4", "age_5_to_9", "age_10_to_14")),]
pop1b = sqldf('select "age_0_to_14", sum(WHO_World_Standard_rate) from pop1a')
colnames(pop1b) = c("age_group", "WHO_World_Standard_rate")

pop2a = std_pop[(std_pop$age_group %in% c("age_75_to_79", "age_80_to_84", "age_85_plus")),]
pop2b = sqldf('select "age_75_plus", sum(WHO_World_Standard_rate) from pop2a')
colnames(pop2b) = c("age_group", "WHO_World_Standard_rate")

pop3 = rbind( std_pop, pop1b, pop2b )
std_pop = pop3
rm(pop3)

std_pop
#       age_group WHO_World_Standard_rate
# 1    age_0_to_4                  0.0886
# 2    age_5_to_9                  0.0869
# 3  age_10_to_14                  0.0860
# 4  age_15_to_19                  0.0847
# 5  age_20_to_24                  0.0822
# 6  age_25_to_29                  0.0793
# 7  age_30_to_34                  0.0761
# 8  age_35_to_39                  0.0715
# 9  age_40_to_44                  0.0659
# 10 age_45_to_49                  0.0604
# 11 age_50_to_54                  0.0537
# 12 age_55_to_59                  0.0455
# 13 age_60_to_64                  0.0372
# 14 age_65_to_69                  0.0296
# 15 age_70_to_74                  0.0221
# 16 age_75_to_79                  0.0152
# 17 age_80_to_84                  0.0091
# 18  age_85_plus                  0.0063
# 19        Total                  1.0000
# 20  age_0_to_14                  0.2615
# 21  age_75_plus                  0.0306


##### United States Geological Survey (USGS) asbestos consumption
##### USGS Worldwide Asbestos Supply and Consumption Trends from 1900 through 2003
##### https://pubs.usgs.gov/circ/2006/1298/c1298.pdf
##### Data in metric tons

asbestos_1995 = read.table( "USGS_asbestos_consumption_1995.txt", sep="\t", header=TRUE, quote='"', comment.char="", row.names=NULL, stringsAsFactors=FALSE, colClasses=c("character") )
asbestos_1995[(asbestos_1995=="-")] = 0
asbestos_1995[is.na(asbestos_1995)] = 0
asbestos_1995$Production = as.numeric(as.character(asbestos_1995$Production))
asbestos_1995$Imports = as.numeric(as.character(asbestos_1995$Imports))
asbestos_1995$Exports = as.numeric(as.character(asbestos_1995$Exports))
asbestos_1995$Apparent_consumption = as.numeric(as.character(asbestos_1995$Apparent_consumption))

asbestos_1995$Country_Name = ifelse( (asbestos_1995$Country_Name=="Korea, Republic of"), "Republic of Korea", asbestos_1995$Country_Name )
asbestos_1995$Country_Name = ifelse( (asbestos_1995$Country_Name=="Russia"), "Russian Federation", asbestos_1995$Country_Name )
asbestos_1995$Country_Name = ifelse( (asbestos_1995$Country_Name=="Moldova"), "Republic of Moldova", asbestos_1995$Country_Name )
asbestos_1995$Country_Name = ifelse( (asbestos_1995$Country_Name=="Macedonia"), "North Macedonia", asbestos_1995$Country_Name )

asbestos_1995_USSR = asbestos_1995[(asbestos_1995$Country_Name %in% c("Russian Federation", "Kazakhstan", "Ukraine", "Azerbaijan", "Estonia", "Kyrgyzstan", "Latvia", "Lithuania", "Republic of Moldova", "Tajikistan", "Uzbekistan")),]
# Estonia's 1995 Apparent_consumption is -1,061. Estonia's 1976 Apparent_consumption is 500. Use 1996 consumption.
asbestos_1995_USSR$Apparent_consumption = ifelse( (asbestos_1995_USSR$Country_Name=="Estonia"), 500, asbestos_1995_USSR$Apparent_consumption )
asbestos_1995_USSR_sum_Production = sum(asbestos_1995_USSR$Production)
asbestos_1995_USSR_sum_Imports = sum(asbestos_1995_USSR$Imports)
asbestos_1995_USSR_sum_Exports = sum(asbestos_1995_USSR$Exports)
asbestos_1995_USSR_sum_Apparent_consumption = sum(asbestos_1995_USSR$Apparent_consumption)
asbestos_1995_USSR$Production_fraction = asbestos_1995_USSR$Production / asbestos_1995_USSR_sum_Production
asbestos_1995_USSR$Imports_fraction = asbestos_1995_USSR$Imports / asbestos_1995_USSR_sum_Imports
asbestos_1995_USSR$Exports_fraction = asbestos_1995_USSR$Exports / asbestos_1995_USSR_sum_Exports
asbestos_1995_USSR$Apparent_consumption_fraction = asbestos_1995_USSR$Apparent_consumption / asbestos_1995_USSR_sum_Apparent_consumption
asbestos_1995_USSR
#           Country_Name Production Imports Exports Apparent_consumption Production_fraction Imports_fraction Exports_fraction Apparent_consumption_fraction
# 42             Estonia          0    7976    9037                  500           0.0000000       0.11163207      0.043610024                  0.0007026261
# 49          Kazakhstan     160829       0  115400                45429           0.1901436       0.00000000      0.556887990                  0.0638392054
# 50          Kyrgyzstan          0   11445     793                10652           0.0000000       0.16018419      0.003826795                  0.0149687472
# 51              Latvia          0    2228       0                 2228           0.0000000       0.03118308      0.000000000                  0.0031309021
# 52           Lithuania          0    5600    5173                  427           0.0000000       0.07837758      0.024963445                  0.0006000427
# 54 Republic of Moldova          0    2800       0                 2800           0.0000000       0.03918879      0.000000000                  0.0039347064
# 58  Russian Federation     685000   41400   76820               649580           0.8098564       0.57943428      0.370711745                  0.9128237701

asbestos_1995_Czechoslovakia = asbestos_1995[(asbestos_1995$Country_Name %in% c("Czech Republic", "Slovakia")),]
asbestos_1995_Czechoslovakia_sum_Production = sum(asbestos_1995_Czechoslovakia$Production)
asbestos_1995_Czechoslovakia_sum_Imports = sum(asbestos_1995_Czechoslovakia$Imports)
asbestos_1995_Czechoslovakia_sum_Exports = sum(asbestos_1995_Czechoslovakia$Exports)
asbestos_1995_Czechoslovakia_sum_Apparent_consumption = sum(asbestos_1995_Czechoslovakia$Apparent_consumption)
asbestos_1995_Czechoslovakia$Production_fraction = asbestos_1995_Czechoslovakia$Production / asbestos_1995_Czechoslovakia_sum_Production
asbestos_1995_Czechoslovakia$Production_fraction = 0
asbestos_1995_Czechoslovakia$Imports_fraction = asbestos_1995_Czechoslovakia$Imports / asbestos_1995_Czechoslovakia_sum_Imports
asbestos_1995_Czechoslovakia$Exports_fraction = asbestos_1995_Czechoslovakia$Exports / asbestos_1995_Czechoslovakia_sum_Exports
asbestos_1995_Czechoslovakia$Apparent_consumption_fraction = asbestos_1995_Czechoslovakia$Apparent_consumption / asbestos_1995_Czechoslovakia_sum_Apparent_consumption
asbestos_1995_Czechoslovakia
#      Country_Name Production Imports Exports Apparent_consumption Production_fraction Imports_fraction Exports_fraction Apparent_consumption_fraction
# 40 Czech Republic          0    4500     100                 4400                   0        0.6617647              0.5                     0.6666667
# 60       Slovakia          0    2300     100                 2200                   0        0.3382353              0.5                     0.3333333

asbestos_1998 = read.table( "USGS_asbestos_consumption_1998.txt", sep="\t", header=TRUE, quote='"', comment.char="", row.names=NULL, stringsAsFactors=FALSE, colClasses=c("character") )
asbestos_1998[(asbestos_1998=="-")] = 0
asbestos_1998[is.na(asbestos_1998)] = 0
asbestos_1998$Production = as.numeric(as.character(asbestos_1998$Production))
asbestos_1998$Imports = as.numeric(as.character(asbestos_1998$Imports))
asbestos_1998$Exports = as.numeric(as.character(asbestos_1998$Exports))
asbestos_1998$Apparent_consumption = as.numeric(as.character(asbestos_1998$Apparent_consumption))

asbestos_1998$Country_Name = ifelse( (asbestos_1998$Country_Name=="Korea, Republic of"), "Republic of Korea", asbestos_1998$Country_Name )
asbestos_1998$Country_Name = ifelse( (asbestos_1998$Country_Name=="Russia"), "Russian Federation", asbestos_1998$Country_Name )
asbestos_1998$Country_Name = ifelse( (asbestos_1998$Country_Name=="Moldova"), "Republic of Moldova", asbestos_1998$Country_Name )
asbestos_1998$Country_Name = ifelse( (asbestos_1998$Country_Name=="Macedonia"), "North Macedonia", asbestos_1998$Country_Name )

# For Montenegro, use data of 1999 with 1998 Serbia removed, because 1998 data not available.
# For North Macedonia, use data of 2000, because 1998 data not available.
# Country_Name	Production	Imports	Exports	Apparent_consumption	Year
# Serbia		361	-	-	361	1998
# Serbia and Montenegro	563	127	-	690	1999
# Montenegro		202	127	-	329
# North Macedonia	-	48	-	48	2000

temp1 = c("Montenegro", "202", "127", "-", "329")
temp2 = c("North Macedonia", "-", "48", "-", "48")
temp = as.data.frame(as.matrix(rbind(temp1, temp2)))
colnames(temp) = c("Country_Name", "Production", "Imports", "Exports", "Apparent_consumption")
temp[(temp=="-")] = 0
temp$Production = as.numeric(as.character(temp$Production))
temp$Imports = as.numeric(as.character(temp$Imports))
temp$Exports = as.numeric(as.character(temp$Exports))
temp$Apparent_consumption = as.numeric(as.character(temp$Apparent_consumption))
asbestos_1998 = rbind( asbestos_1998, temp )
rm(temp, temp1, temp2)

asbestos_1998_Yugoslavia = asbestos_1998[(asbestos_1998$Country_Name %in% c("Bosnia and Herzegovina", "Croatia", "Serbia", "Slovenia", "North Macedonia", "Montenegro")),]
asbestos_1998_Yugoslavia_sum_Production = sum(asbestos_1998_Yugoslavia$Production)
asbestos_1998_Yugoslavia_sum_Imports = sum(asbestos_1998_Yugoslavia$Imports)
asbestos_1998_Yugoslavia_sum_Exports = sum(asbestos_1998_Yugoslavia$Exports)
asbestos_1998_Yugoslavia_sum_Apparent_consumption = sum(asbestos_1998_Yugoslavia$Apparent_consumption)
asbestos_1998_Yugoslavia$Production_fraction = asbestos_1998_Yugoslavia$Production / asbestos_1998_Yugoslavia_sum_Production
asbestos_1998_Yugoslavia$Imports_fraction = asbestos_1998_Yugoslavia$Imports / asbestos_1998_Yugoslavia_sum_Imports
asbestos_1998_Yugoslavia$Exports_fraction = asbestos_1998_Yugoslavia$Exports / asbestos_1998_Yugoslavia_sum_Exports
asbestos_1998_Yugoslavia$Apparent_consumption_fraction = asbestos_1998_Yugoslavia$Apparent_consumption / asbestos_1998_Yugoslavia_sum_Apparent_consumption
asbestos_1998_Yugoslavia
#                 Country_Name Production Imports Exports Apparent_consumption Production_fraction Imports_fraction Exports_fraction Apparent_consumption_fraction
# 60    Bosnia and Herzegovina          0      12       0                   12           0.0000000      0.004255319                0                   0.003559775
# 62                   Croatia          0     948      12                  936           0.0000000      0.336170213                1                   0.277662415
# 81                    Serbia        361       0       0                  361           0.6412078      0.000000000                0                   0.107089884
# 83                  Slovenia          0    1685       0                 1685           0.0000000      0.597517730                0                   0.499851676
# temp1             Montenegro        202     127       0                  329           0.3587922      0.045035461                0                   0.097597152
# temp2        North Macedonia          0      48       0                   48           0.0000000      0.017021277                0                   0.014239098

#####
asbestos_1970 = read.table( "USGS_asbestos_consumption_1970.txt", sep="\t", header=TRUE, quote='"', comment.char="", row.names=NULL, stringsAsFactors=FALSE, colClasses=c("character") )
asbestos_1970[(asbestos_1970=="-")] = 0
asbestos_1970[is.na(asbestos_1970)] = 0
asbestos_1970$Production = as.numeric(as.character(asbestos_1970$Production))
asbestos_1970$Imports = as.numeric(as.character(asbestos_1970$Imports))
asbestos_1970$Exports = as.numeric(as.character(asbestos_1970$Exports))
asbestos_1970$Apparent_consumption = as.numeric(as.character(asbestos_1970$Apparent_consumption))

asbestos_1970$Country_Name[(!(asbestos_1970$Country_Name %in% country_codes$Country_Name))]
asbestos_1970$Country_Name = ifelse( (asbestos_1970$Country_Name=="Libya"), "Libyan Arab Jamahiriya", asbestos_1970$Country_Name )
asbestos_1970$Country_Name = ifelse( (asbestos_1970$Country_Name=="Southern Rhodesia"), "Zimbabwe", asbestos_1970$Country_Name )
asbestos_1970$Country_Name = ifelse( (asbestos_1970$Country_Name=="Swaziland"), "Eswatini", asbestos_1970$Country_Name )
asbestos_1970$Country_Name = ifelse( (asbestos_1970$Country_Name=="Zaire"), "Democratic Republic of the Congo", asbestos_1970$Country_Name )
asbestos_1970$Country_Name = ifelse( (asbestos_1970$Country_Name=="Hong Kong"), "Hong Kong SAR", asbestos_1970$Country_Name )
asbestos_1970$Country_Name = ifelse( (asbestos_1970$Country_Name=="Iran"), "Iran (Islamic Republic of)", asbestos_1970$Country_Name )
asbestos_1970$Country_Name = ifelse( (asbestos_1970$Country_Name=="Korea, North"), "Democratic Peoples's Republic of Korea", asbestos_1970$Country_Name )
asbestos_1970$Country_Name = ifelse( (asbestos_1970$Country_Name=="Korea, Republic of"), "Republic of Korea", asbestos_1970$Country_Name )
asbestos_1970$Country_Name = ifelse( (asbestos_1970$Country_Name=="Syria"), "Syrian Arab Republic", asbestos_1970$Country_Name )
asbestos_1970$Country_Name = ifelse( (asbestos_1970$Country_Name=="Taiwan"), "China: Province of Taiwan only", asbestos_1970$Country_Name )
asbestos_1970$Country_Name = ifelse( (asbestos_1970$Country_Name=="United States"), "United States of America", asbestos_1970$Country_Name )
asbestos_1970$Country_Name = ifelse( (asbestos_1970$Country_Name=="Burma"), "Myanmar", asbestos_1970$Country_Name )
asbestos_1970$Country_Name[(!(asbestos_1970$Country_Name %in% country_codes$Country_Name))]

# Apparent_consumption is negative in the sampled case in a few cases,
# and this is assumed to not reflect annual consumption for the preceding and following 5 years.
# In those cases, take the average of the preceding and following periods for that country.

asbestos_1970[asbestos_1970$Apparent_consumption<0,] # none are negative

asbestos_1970_before_splitting_and_merging_countries = asbestos_1970

asbestos_1970_Germany = asbestos_1970[(asbestos_1970$Country_Name %in% c("Germany, East", "Germany, West")),]
asbestos_1970_Germany_sum = sqldf("select 'Germany', sum(Production), sum(Imports), sum(Exports), sum(Apparent_consumption) from asbestos_1970_Germany")
colnames(asbestos_1970_Germany_sum) = colnames(asbestos_1970)
asbestos_1970_Germany
#     Country_Name Production Imports Exports Apparent_consumption
# 50 Germany, East          0   52015       0                52015
# 51 Germany, West          0  175612     924               174688

# Split 1970 USSR asbestos consumption by 1995 consumption because that is the first year where we have asbestos figures by country.
asbestos_1970_USSR = asbestos_1995_USSR
asbestos_1970_USSR$Production = asbestos_1970_before_splitting_and_merging_countries[(asbestos_1970_before_splitting_and_merging_countries$Country_Name=="Soviet Union"), c("Production")]
asbestos_1970_USSR$Imports = asbestos_1970_before_splitting_and_merging_countries[(asbestos_1970_before_splitting_and_merging_countries$Country_Name=="Soviet Union"), c("Imports")]
asbestos_1970_USSR$Exports = asbestos_1970_before_splitting_and_merging_countries[(asbestos_1970_before_splitting_and_merging_countries$Country_Name=="Soviet Union"), c("Exports")]
asbestos_1970_USSR$Apparent_consumption = asbestos_1970_before_splitting_and_merging_countries[(asbestos_1970_before_splitting_and_merging_countries$Country_Name=="Soviet Union"), c("Apparent_consumption")]
asbestos_1970_USSR$Production = asbestos_1970_USSR$Production * asbestos_1970_USSR$Production_fraction
asbestos_1970_USSR$Imports = asbestos_1970_USSR$Imports * asbestos_1970_USSR$Imports_fraction
asbestos_1970_USSR$Exports = asbestos_1970_USSR$Exports * asbestos_1970_USSR$Exports_fraction
asbestos_1970_USSR$Apparent_consumption = asbestos_1970_USSR$Apparent_consumption * asbestos_1970_USSR$Apparent_consumption_fraction
asbestos_1970_USSR$Production_fraction = NULL
asbestos_1970_USSR$Imports_fraction = NULL
asbestos_1970_USSR$Exports_fraction = NULL
asbestos_1970_USSR$Apparent_consumption_fraction = NULL
asbestos_1970_USSR
#           Country_Name Production Imports    Exports Apparent_consumption
# 42             Estonia          0       0  16802.942             478.1996
# 49          Kazakhstan     202672       0 214568.943           43448.2610
# 50          Kyrgyzstan          0       0   1474.464           10187.5647
# 51              Latvia          0       0      0.000            2130.8575
# 52           Lithuania          0       0   9618.415             408.3825
# 54 Republic of Moldova          0       0      0.000            2677.9179
# 58  Russian Federation     863217       0 142835.235          621257.8169

# Split 1970 Czechoslovakia asbestos consumption by 1995 consumption because that is the first year where we have asbestos data by country.
asbestos_1970_Czechoslovakia = asbestos_1995_Czechoslovakia
asbestos_1970_Czechoslovakia$Production = asbestos_1970_before_splitting_and_merging_countries[(asbestos_1970_before_splitting_and_merging_countries$Country_Name=="Czechoslovakia"), c("Production")]
asbestos_1970_Czechoslovakia$Imports = asbestos_1970_before_splitting_and_merging_countries[(asbestos_1970_before_splitting_and_merging_countries$Country_Name=="Czechoslovakia"), c("Imports")]
asbestos_1970_Czechoslovakia$Exports = asbestos_1970_before_splitting_and_merging_countries[(asbestos_1970_before_splitting_and_merging_countries$Country_Name=="Czechoslovakia"), c("Exports")]
asbestos_1970_Czechoslovakia$Apparent_consumption = asbestos_1970_before_splitting_and_merging_countries[(asbestos_1970_before_splitting_and_merging_countries$Country_Name=="Czechoslovakia"), c("Apparent_consumption")]
asbestos_1970_Czechoslovakia$Production = asbestos_1970_Czechoslovakia$Production * asbestos_1970_Czechoslovakia$Production_fraction
asbestos_1970_Czechoslovakia$Imports = asbestos_1970_Czechoslovakia$Imports * asbestos_1970_Czechoslovakia$Imports_fraction
asbestos_1970_Czechoslovakia$Exports = asbestos_1970_Czechoslovakia$Exports * asbestos_1970_Czechoslovakia$Exports_fraction
asbestos_1970_Czechoslovakia$Apparent_consumption = asbestos_1970_Czechoslovakia$Apparent_consumption * asbestos_1970_Czechoslovakia$Apparent_consumption_fraction
asbestos_1970_Czechoslovakia$Production_fraction = NULL
asbestos_1970_Czechoslovakia$Imports_fraction = NULL
asbestos_1970_Czechoslovakia$Exports_fraction = NULL
asbestos_1970_Czechoslovakia$Apparent_consumption_fraction = NULL
asbestos_1970_Czechoslovakia
#      Country_Name Production  Imports Exports Apparent_consumption
# 40 Czech Republic          0 25820.07       0             26011.33
# 60       Slovakia          0 13196.93       0             13005.67

# Split 1970 Yugoslavia asbestos consumption by 1998 consumption because that is the first year where we have asbestos data by country.
asbestos_1970_Yugoslavia = asbestos_1998_Yugoslavia
asbestos_1970_Yugoslavia$Production = asbestos_1970_before_splitting_and_merging_countries[(asbestos_1970_before_splitting_and_merging_countries$Country_Name=="Yugoslavia"), c("Production")]
asbestos_1970_Yugoslavia$Imports = asbestos_1970_before_splitting_and_merging_countries[(asbestos_1970_before_splitting_and_merging_countries$Country_Name=="Yugoslavia"), c("Imports")]
asbestos_1970_Yugoslavia$Exports = asbestos_1970_before_splitting_and_merging_countries[(asbestos_1970_before_splitting_and_merging_countries$Country_Name=="Yugoslavia"), c("Exports")]
asbestos_1970_Yugoslavia$Apparent_consumption = asbestos_1970_before_splitting_and_merging_countries[(asbestos_1970_before_splitting_and_merging_countries$Country_Name=="Yugoslavia"), c("Apparent_consumption")]
asbestos_1970_Yugoslavia$Production = asbestos_1970_Yugoslavia$Production * asbestos_1970_Yugoslavia$Production_fraction
asbestos_1970_Yugoslavia$Imports = asbestos_1970_Yugoslavia$Imports * asbestos_1970_Yugoslavia$Imports_fraction
asbestos_1970_Yugoslavia$Exports = asbestos_1970_Yugoslavia$Exports * asbestos_1970_Yugoslavia$Exports_fraction
asbestos_1970_Yugoslavia$Apparent_consumption = asbestos_1970_Yugoslavia$Apparent_consumption * asbestos_1970_Yugoslavia$Apparent_consumption_fraction
asbestos_1970_Yugoslavia$Production_fraction = NULL
asbestos_1970_Yugoslavia$Imports_fraction = NULL
asbestos_1970_Yugoslavia$Exports_fraction = NULL
asbestos_1970_Yugoslavia$Apparent_consumption_fraction = NULL
asbestos_1970_Yugoslavia
#                 Country_Name Production    Imports Exports Apparent_consumption
# 60    Bosnia and Herzegovina      0.000   121.4979       0             128.1198
# 62                   Croatia      0.000  9598.3319    4666            9993.3480
# 81                    Serbia   7761.821     0.0000       0            3854.2720
# 83                  Slovenia      0.000 17060.3262       0           17990.1617
# temp1             Montenegro   4343.179  1285.8525       0            3512.6191
# temp2        North Macedonia      0.000   485.9915       0             512.4794

# Split 1970 Belgium_and_Luxembourg asbestos consumption by 1970 population proportions because in data upto 2003 we never have asbestos consumption data by country.
asbestos_1970_Belgium_and_Luxembourg = pop_1970_Belgium_and_Luxembourg
asbestos_1970_Belgium_and_Luxembourg$Production = asbestos_1970_before_splitting_and_merging_countries[(asbestos_1970_before_splitting_and_merging_countries$Country_Name=="Belgium and Luxembourg"), c("Production")]
asbestos_1970_Belgium_and_Luxembourg$Imports = asbestos_1970_before_splitting_and_merging_countries[(asbestos_1970_before_splitting_and_merging_countries$Country_Name=="Belgium and Luxembourg"), c("Imports")]
asbestos_1970_Belgium_and_Luxembourg$Exports = asbestos_1970_before_splitting_and_merging_countries[(asbestos_1970_before_splitting_and_merging_countries$Country_Name=="Belgium and Luxembourg"), c("Exports")]
asbestos_1970_Belgium_and_Luxembourg$Apparent_consumption = asbestos_1970_before_splitting_and_merging_countries[(asbestos_1970_before_splitting_and_merging_countries$Country_Name=="Belgium and Luxembourg"), c("Apparent_consumption")]
asbestos_1970_Belgium_and_Luxembourg$Production = asbestos_1970_Belgium_and_Luxembourg$Production * asbestos_1970_Belgium_and_Luxembourg$pop_fraction
asbestos_1970_Belgium_and_Luxembourg$Imports = asbestos_1970_Belgium_and_Luxembourg$Imports * asbestos_1970_Belgium_and_Luxembourg$pop_fraction
asbestos_1970_Belgium_and_Luxembourg$Exports = asbestos_1970_Belgium_and_Luxembourg$Exports * asbestos_1970_Belgium_and_Luxembourg$pop_fraction
asbestos_1970_Belgium_and_Luxembourg$Apparent_consumption = asbestos_1970_Belgium_and_Luxembourg$Apparent_consumption * asbestos_1970_Belgium_and_Luxembourg$pop_fraction
asbestos_1970_Belgium_and_Luxembourg$Year = NULL
asbestos_1970_Belgium_and_Luxembourg$population = NULL
asbestos_1970_Belgium_and_Luxembourg$pop_fraction = NULL
asbestos_1970_Belgium_and_Luxembourg
#      Country_Name Production   Imports   Exports Apparent_consumption
# 6056      Belgium          0 52969.239 920.50702            52048.732
# 6060   Luxembourg          0  1869.761  32.49298             1837.268

asbestos_1970_minus_adjusted_countries = asbestos_1970_before_splitting_and_merging_countries[(!(asbestos_1970_before_splitting_and_merging_countries$Country_Name %in% c("Germany, East", "Germany, West", "Soviet Union", "Yugoslavia", "Czechoslovakia", "Belgium and Luxembourg"))),]

asbestos_1970 = rbind(asbestos_1970_minus_adjusted_countries, asbestos_1970_Germany_sum, asbestos_1970_USSR, asbestos_1970_Yugoslavia, asbestos_1970_Czechoslovakia, asbestos_1970_Belgium_and_Luxembourg)

PC_asbestos_1970 = merge( x=asbestos_1970, y=pop_1970, by=c("Country_Name"), all.x=TRUE, all.y=FALSE )

PC_asbestos_1970[is.na(PC_asbestos_1970$population),c("Country_Name")] # no asbestos data are missing population data

PC_asbestos_1970 = merge( x=asbestos_1970, y=pop_1970, by=c("Country_Name"), all.x=FALSE, all.y=FALSE )

PC_asbestos_1970$PC_asbestos_kg = PC_asbestos_1970$Apparent_consumption * 1000 / PC_asbestos_1970$population # 1 metric tonne = 1000 kg


#####
asbestos_1960 = read.table( "USGS_asbestos_consumption_1960.txt", sep="\t", header=TRUE, quote='"', comment.char="", row.names=NULL, stringsAsFactors=FALSE, colClasses=c("character") )
asbestos_1960[(asbestos_1960=="-")] = 0
asbestos_1960[is.na(asbestos_1960)] = 0
asbestos_1960$Production = as.numeric(as.character(asbestos_1960$Production))
asbestos_1960$Imports = as.numeric(as.character(asbestos_1960$Imports))
asbestos_1960$Exports = as.numeric(as.character(asbestos_1960$Exports))
asbestos_1960$Apparent_consumption = as.numeric(as.character(asbestos_1960$Apparent_consumption))

asbestos_1960$Country_Name[(!(asbestos_1960$Country_Name %in% country_codes$Country_Name))]
asbestos_1960$Country_Name = ifelse( (asbestos_1960$Country_Name=="Libya"), "Libyan Arab Jamahiriya", asbestos_1960$Country_Name )
asbestos_1960$Country_Name = ifelse( (asbestos_1960$Country_Name=="Southern Rhodesia"), "Zimbabwe", asbestos_1960$Country_Name )
asbestos_1960$Country_Name = ifelse( (asbestos_1960$Country_Name=="Swaziland"), "Eswatini", asbestos_1960$Country_Name )
asbestos_1960$Country_Name = ifelse( (asbestos_1960$Country_Name=="Zaire"), "Democratic Republic of the Congo", asbestos_1960$Country_Name )
asbestos_1960$Country_Name = ifelse( (asbestos_1960$Country_Name=="Hong Kong"), "Hong Kong SAR", asbestos_1960$Country_Name )
asbestos_1960$Country_Name = ifelse( (asbestos_1960$Country_Name=="Iran"), "Iran (Islamic Republic of)", asbestos_1960$Country_Name )
asbestos_1960$Country_Name = ifelse( (asbestos_1960$Country_Name=="Korea, North"), "Democratic Peoples's Republic of Korea", asbestos_1960$Country_Name )
asbestos_1960$Country_Name = ifelse( (asbestos_1960$Country_Name=="Korea, Republic of"), "Republic of Korea", asbestos_1960$Country_Name )
asbestos_1960$Country_Name = ifelse( (asbestos_1960$Country_Name=="Syria"), "Syrian Arab Republic", asbestos_1960$Country_Name )
asbestos_1960$Country_Name = ifelse( (asbestos_1960$Country_Name=="Taiwan"), "China: Province of Taiwan only", asbestos_1960$Country_Name )
asbestos_1960$Country_Name = ifelse( (asbestos_1960$Country_Name=="United States"), "United States of America", asbestos_1960$Country_Name )
asbestos_1960$Country_Name = ifelse( (asbestos_1960$Country_Name=="Burma"), "Myanmar", asbestos_1960$Country_Name )
asbestos_1960$Country_Name = ifelse( (asbestos_1960$Country_Name=="Bechuanaland"), "Botswana", asbestos_1960$Country_Name )
asbestos_1960$Country_Name[(!(asbestos_1960$Country_Name %in% country_codes$Country_Name))]

# Apparent_consumption is negative in the sampled case in a few cases,
# and this is assumed to not reflect annual consumption for the preceding and following 5 years.
# In those cases, take the average of the preceding and following periods for that country.

asbestos_1960[asbestos_1960$Apparent_consumption<0,]
#   Country_Name Production Imports Exports Apparent_consumption
# 8 South Africa     159551       0  193696               -34145

# South Africa 1950 apparent_consumption = -12,851 # This negative consumption is assumed to be an anomaly due to preceding years' production being exported in current year.
# South Africa 1960 apparent_consumption = -34,145 # This negative consumption is assumed to be an anomaly due to preceding years' production being exported in current year.
# South Africa 1970 apparent_consumption = 14,241
# South Africa 1975 apparent_consumption = 15,270
# Extrapolate 1970 and 1975 consumption back to 1960.
temp = as.data.frame(matrix(c(1970, 1975, 14241, 15270), nrow = 2))
colnames(temp) = c("Year", "consumption")
lm(consumption ~ Year, data=temp)
# Coefficients:
# (Intercept)         Year  
#   -391185.0        205.8 
1960 * 205.8 + -391185.0 # = 12183
asbestos_1960$Apparent_consumption = ifelse( (asbestos_1960$Country_Name == "South Africa"), 12183, asbestos_1960$Apparent_consumption )

asbestos_1960_before_splitting_and_merging_countries = asbestos_1960

asbestos_1960_Germany = asbestos_1960[(asbestos_1960$Country_Name %in% c("Germany, East", "Germany, West")),]
asbestos_1960_Germany_sum = sqldf("select 'Germany', sum(Production), sum(Imports), sum(Exports), sum(Apparent_consumption) from asbestos_1960_Germany")
colnames(asbestos_1960_Germany_sum) = colnames(asbestos_1960)
asbestos_1960_Germany
#     Country_Name Production Imports Exports Apparent_consumption
# 43 Germany, East          0   35000       0                35000
# 44 Germany, West          0  132634     226               132408

# Split 1960 USSR asbestos consumption by 1995 consumption because that is the first year where we have asbestos figures by country.
asbestos_1960_USSR = asbestos_1995_USSR
asbestos_1960_USSR$Production = asbestos_1960_before_splitting_and_merging_countries[(asbestos_1960_before_splitting_and_merging_countries$Country_Name=="Soviet Union"), c("Production")]
asbestos_1960_USSR$Imports = asbestos_1960_before_splitting_and_merging_countries[(asbestos_1960_before_splitting_and_merging_countries$Country_Name=="Soviet Union"), c("Imports")]
asbestos_1960_USSR$Exports = asbestos_1960_before_splitting_and_merging_countries[(asbestos_1960_before_splitting_and_merging_countries$Country_Name=="Soviet Union"), c("Exports")]
asbestos_1960_USSR$Apparent_consumption = asbestos_1960_before_splitting_and_merging_countries[(asbestos_1960_before_splitting_and_merging_countries$Country_Name=="Soviet Union"), c("Apparent_consumption")]
asbestos_1960_USSR$Production = asbestos_1960_USSR$Production * asbestos_1960_USSR$Production_fraction
asbestos_1960_USSR$Imports = asbestos_1960_USSR$Imports * asbestos_1960_USSR$Imports_fraction
asbestos_1960_USSR$Exports = asbestos_1960_USSR$Exports * asbestos_1960_USSR$Exports_fraction
asbestos_1960_USSR$Apparent_consumption = asbestos_1960_USSR$Apparent_consumption * asbestos_1960_USSR$Apparent_consumption_fraction
asbestos_1960_USSR$Production_fraction = NULL
asbestos_1960_USSR$Imports_fraction = NULL
asbestos_1960_USSR$Exports_fraction = NULL
asbestos_1960_USSR$Apparent_consumption_fraction = NULL
asbestos_1960_USSR
#           Country_Name Production Imports    Exports Apparent_consumption
# 42             Estonia        0.0       0  6372.0787             318.5594
# 49          Kazakhstan   113990.9       0 81369.6887           28943.6743
# 50          Kyrgyzstan        0.0       0   559.1522            6786.5905
# 51              Latvia        0.0       0     0.0000            1419.5009
# 52           Lithuania        0.0       0  3647.5338             272.0498
# 54 Republic of Moldova        0.0       0     0.0000            1783.9329
# 58  Russian Federation   485508.1       0 54166.5467          413859.6922

# Split 1960 Czechoslovakia asbestos consumption by 1995 consumption because that is the first year where we have asbestos data by country.
asbestos_1960_Czechoslovakia = asbestos_1995_Czechoslovakia
asbestos_1960_Czechoslovakia$Production = asbestos_1960_before_splitting_and_merging_countries[(asbestos_1960_before_splitting_and_merging_countries$Country_Name=="Czechoslovakia"), c("Production")]
asbestos_1960_Czechoslovakia$Imports = asbestos_1960_before_splitting_and_merging_countries[(asbestos_1960_before_splitting_and_merging_countries$Country_Name=="Czechoslovakia"), c("Imports")]
asbestos_1960_Czechoslovakia$Exports = asbestos_1960_before_splitting_and_merging_countries[(asbestos_1960_before_splitting_and_merging_countries$Country_Name=="Czechoslovakia"), c("Exports")]
asbestos_1960_Czechoslovakia$Apparent_consumption = asbestos_1960_before_splitting_and_merging_countries[(asbestos_1960_before_splitting_and_merging_countries$Country_Name=="Czechoslovakia"), c("Apparent_consumption")]
asbestos_1960_Czechoslovakia$Production = asbestos_1960_Czechoslovakia$Production * asbestos_1960_Czechoslovakia$Production_fraction
asbestos_1960_Czechoslovakia$Imports = asbestos_1960_Czechoslovakia$Imports * asbestos_1960_Czechoslovakia$Imports_fraction
asbestos_1960_Czechoslovakia$Exports = asbestos_1960_Czechoslovakia$Exports * asbestos_1960_Czechoslovakia$Exports_fraction
asbestos_1960_Czechoslovakia$Apparent_consumption = asbestos_1960_Czechoslovakia$Apparent_consumption * asbestos_1960_Czechoslovakia$Apparent_consumption_fraction
asbestos_1960_Czechoslovakia$Production_fraction = NULL
asbestos_1960_Czechoslovakia$Imports_fraction = NULL
asbestos_1960_Czechoslovakia$Exports_fraction = NULL
asbestos_1960_Czechoslovakia$Apparent_consumption_fraction = NULL
asbestos_1960_Czechoslovakia
#      Country_Name Production   Imports Exports Apparent_consumption
# 40 Czech Republic          0 18146.912       0            18281.333
# 60       Slovakia          0  9275.088       0             9140.667

# Split 1960 Yugoslavia asbestos consumption by 1998 consumption because that is the first year where we have asbestos data by country.
asbestos_1960_Yugoslavia = asbestos_1998_Yugoslavia
asbestos_1960_Yugoslavia$Production = asbestos_1960_before_splitting_and_merging_countries[(asbestos_1960_before_splitting_and_merging_countries$Country_Name=="Yugoslavia"), c("Production")]
asbestos_1960_Yugoslavia$Imports = asbestos_1960_before_splitting_and_merging_countries[(asbestos_1960_before_splitting_and_merging_countries$Country_Name=="Yugoslavia"), c("Imports")]
asbestos_1960_Yugoslavia$Exports = asbestos_1960_before_splitting_and_merging_countries[(asbestos_1960_before_splitting_and_merging_countries$Country_Name=="Yugoslavia"), c("Exports")]
asbestos_1960_Yugoslavia$Apparent_consumption = asbestos_1960_before_splitting_and_merging_countries[(asbestos_1960_before_splitting_and_merging_countries$Country_Name=="Yugoslavia"), c("Apparent_consumption")]
asbestos_1960_Yugoslavia$Production = asbestos_1960_Yugoslavia$Production * asbestos_1960_Yugoslavia$Production_fraction
asbestos_1960_Yugoslavia$Imports = asbestos_1960_Yugoslavia$Imports * asbestos_1960_Yugoslavia$Imports_fraction
asbestos_1960_Yugoslavia$Exports = asbestos_1960_Yugoslavia$Exports * asbestos_1960_Yugoslavia$Exports_fraction
asbestos_1960_Yugoslavia$Apparent_consumption = asbestos_1960_Yugoslavia$Apparent_consumption * asbestos_1960_Yugoslavia$Apparent_consumption_fraction
asbestos_1960_Yugoslavia$Production_fraction = NULL
asbestos_1960_Yugoslavia$Imports_fraction = NULL
asbestos_1960_Yugoslavia$Exports_fraction = NULL
asbestos_1960_Yugoslavia$Apparent_consumption_fraction = NULL
asbestos_1960_Yugoslavia
#                 Country_Name Production    Imports Exports Apparent_consumption
# 60    Bosnia and Herzegovina      0.000   37.13617       0             31.77455
# 62                   Croatia      0.000 2933.75745    5217           2478.41471
# 81                    Serbia   3472.782    0.00000       0            955.88431
# 83                  Slovenia      0.000 5214.53723       0           4461.67606
# temp1             Montenegro   1943.218  393.02447       0            871.15218
# temp2        North Macedonia      0.000  148.54468       0            127.09819

# Split 1960 Belgium_and_Luxembourg asbestos consumption by 1960 population proportions because in data upto 2003 we never have asbestos consumption data by country.
asbestos_1960_Belgium_and_Luxembourg = pop_1960_Belgium_and_Luxembourg
asbestos_1960_Belgium_and_Luxembourg$Production = asbestos_1960_before_splitting_and_merging_countries[(asbestos_1960_before_splitting_and_merging_countries$Country_Name=="Belgium and Luxembourg"), c("Production")]
asbestos_1960_Belgium_and_Luxembourg$Imports = asbestos_1960_before_splitting_and_merging_countries[(asbestos_1960_before_splitting_and_merging_countries$Country_Name=="Belgium and Luxembourg"), c("Imports")]
asbestos_1960_Belgium_and_Luxembourg$Exports = asbestos_1960_before_splitting_and_merging_countries[(asbestos_1960_before_splitting_and_merging_countries$Country_Name=="Belgium and Luxembourg"), c("Exports")]
asbestos_1960_Belgium_and_Luxembourg$Apparent_consumption = asbestos_1960_before_splitting_and_merging_countries[(asbestos_1960_before_splitting_and_merging_countries$Country_Name=="Belgium and Luxembourg"), c("Apparent_consumption")]
asbestos_1960_Belgium_and_Luxembourg$Production = asbestos_1960_Belgium_and_Luxembourg$Production * asbestos_1960_Belgium_and_Luxembourg$pop_fraction
asbestos_1960_Belgium_and_Luxembourg$Imports = asbestos_1960_Belgium_and_Luxembourg$Imports * asbestos_1960_Belgium_and_Luxembourg$pop_fraction
asbestos_1960_Belgium_and_Luxembourg$Exports = asbestos_1960_Belgium_and_Luxembourg$Exports * asbestos_1960_Belgium_and_Luxembourg$pop_fraction
asbestos_1960_Belgium_and_Luxembourg$Apparent_consumption = asbestos_1960_Belgium_and_Luxembourg$Apparent_consumption * asbestos_1960_Belgium_and_Luxembourg$pop_fraction
asbestos_1960_Belgium_and_Luxembourg$Year = NULL
asbestos_1960_Belgium_and_Luxembourg$population = NULL
asbestos_1960_Belgium_and_Luxembourg$pop_fraction = NULL
asbestos_1960_Belgium_and_Luxembourg
#      Country_Name Production   Imports    Exports Apparent_consumption
# 3166      Belgium          0 52196.407 287.133411             51910.24
# 3170   Luxembourg          0  1793.593   9.866589              1783.76

asbestos_1960_minus_adjusted_countries = asbestos_1960_before_splitting_and_merging_countries[(!(asbestos_1960_before_splitting_and_merging_countries$Country_Name %in% c("Germany, East", "Germany, West", "Soviet Union", "Yugoslavia", "Czechoslovakia", "Belgium and Luxembourg"))),]

asbestos_1960 = rbind(asbestos_1960_minus_adjusted_countries, asbestos_1960_Germany_sum, asbestos_1960_USSR, asbestos_1960_Yugoslavia, asbestos_1960_Czechoslovakia, asbestos_1960_Belgium_and_Luxembourg)

PC_asbestos_1960 = merge( x=asbestos_1960, y=pop_1960, by=c("Country_Name"), all.x=TRUE, all.y=FALSE )

PC_asbestos_1960[is.na(PC_asbestos_1960$population),c("Country_Name")] # no asbestos data are missing population data

PC_asbestos_1960 = merge( x=asbestos_1960, y=pop_1960, by=c("Country_Name"), all.x=FALSE, all.y=FALSE )

PC_asbestos_1960$PC_asbestos_kg = PC_asbestos_1960$Apparent_consumption * 1000 / PC_asbestos_1960$population # 1 metric tonne = 1000 kg


#####
# Calculate 1965 asbestos consumption as the average of 1960 and 1970

PC_asbestos_1965 = merge( x=PC_asbestos_1960, y=PC_asbestos_1970, by=c("Country_Name"), all.x=TRUE, all.y=TRUE )

PC_asbestos_1965[(is.na(PC_asbestos_1965$Apparent_consumption.x)) | (is.na(PC_asbestos_1965$Apparent_consumption.y)),]
#              Country_Name Production.x Imports.x Exports.x Apparent_consumption.x Year.x population.x PC_asbestos_kg.x Production.y Imports.y Exports.y Apparent_consumption.y Year.y population.y PC_asbestos_kg.y
# 3               Argentina           NA        NA        NA                     NA     NA           NA               NA           35     21106         0                  21141   1970     23881000       0.88526444
# 9                Botswana         1163         0         0                   1163   1960       503000      2.312127237           NA        NA        NA                     NA     NA           NA               NA
# 13                  Chile           NA        NA        NA                     NA     NA           NA               NA            0      8800         0                   8800   1970      9783000       0.89951957
# 17             Costa Rica           NA        NA        NA                     NA     NA           NA               NA            0       736         0                    736   1970      1847000       0.39848403
# 35              Indonesia            0       588         0                    588   1960     87751000      0.006700778           NA        NA        NA                     NA     NA           NA               NA
# 47 Libyan Arab Jamahiriya           NA        NA        NA                     NA     NA           NA               NA            0       540         0                    540   1970      2134000       0.25304592
# 57   Netherlands Antilles           NA        NA        NA                     NA     NA           NA               NA            0       335         0                    335   1970       144000       2.32638889
# 59              Nicaragua           NA        NA        NA                     NA     NA           NA               NA            0       316         0                    316   1970      2407000       0.13128376
# 60                Nigeria           NA        NA        NA                     NA     NA           NA               NA            0     34443         0                  34443   1970     55982000       0.61525133
# 63                 Panama           NA        NA        NA                     NA     NA           NA               NA            0       146         0                    146   1970      1519000       0.09611587
# 71                Senegal           NA        NA        NA                     NA     NA           NA               NA            0       799         0                    799   1970      4258000       0.18764678
# 73              Singapore           NA        NA        NA                     NA     NA           NA               NA            0      3150         0                   3150   1970      2072000       1.52027027
# 86                Uruguay           NA        NA        NA                     NA     NA           NA               NA            0      1996         0                   1996   1970      2810000       0.71032028
# 88                 Zambia           NA        NA        NA                     NA     NA           NA               NA            0     15607         0                  15607   1970      4179000       3.73462551

# For countries having data in 1970 and not in 1960, the 1960 data will be assumed to be zero.
# For countries having data in 1960 and not in 1970, the 1970 data will be assumed to be zero.
PC_asbestos_1965[is.na(PC_asbestos_1965)] = 0

PC_asbestos_1965$Production = apply(PC_asbestos_1965[,c("Production.x","Production.y")], 1, mean, na.rm=FALSE)
PC_asbestos_1965$Imports = apply(PC_asbestos_1965[,c("Imports.x","Imports.y")], 1, mean, na.rm=FALSE)
PC_asbestos_1965$Exports = apply(PC_asbestos_1965[,c("Exports.x","Exports.y")], 1, mean, na.rm=FALSE)
PC_asbestos_1965$Apparent_consumption = apply(PC_asbestos_1965[,c("Apparent_consumption.x","Apparent_consumption.y")], 1, mean, na.rm=FALSE)

PC_asbestos_1965$Production.x = NULL
PC_asbestos_1965$Imports.x = NULL
PC_asbestos_1965$Exports.x = NULL
PC_asbestos_1965$Apparent_consumption.x = NULL
PC_asbestos_1965$Year.x = NULL
PC_asbestos_1965$population.x = NULL
PC_asbestos_1965$PC_asbestos_kg.x = NULL
PC_asbestos_1965$Production.y = NULL
PC_asbestos_1965$Imports.y = NULL
PC_asbestos_1965$Exports.y = NULL
PC_asbestos_1965$Apparent_consumption.y = NULL
PC_asbestos_1965$Year.y = NULL
PC_asbestos_1965$population.y = NULL
PC_asbestos_1965$PC_asbestos_kg.y = NULL

new_PC_asbestos_1965 = merge( x=PC_asbestos_1965, y=pop_1965, by=c("Country_Name"), all.x=TRUE, all.y=FALSE )
PC_asbestos_1965 = new_PC_asbestos_1965
rm(new_PC_asbestos_1965)

PC_asbestos_1965$PC_asbestos_kg = PC_asbestos_1965$Apparent_consumption * 1000 / PC_asbestos_1965$population # 1 metric tonne = 1000 kg


#####

mort1 = mort[((mort$Year>=2010) & (mort$Year<=2014)),]

# Some years for some countries do not have data for some age ranges. Need to aggregate those to an age group that does have data
# Remove those super-aggregations when not needed when the sub-age-ranges data does exist.

mort1$deaths_0_4 = apply( mort1[,c("deaths_0", "deaths_1", "deaths_2", "deaths_3", "deaths_4")], 1, sum, na.rm=TRUE )
mort1$deaths_0_14 = apply( mort1[,c("deaths_0", "deaths_1", "deaths_2", "deaths_3", "deaths_4", "deaths_5_9", "deaths_10_14")], 1, sum, na.rm=TRUE )
mort1$deaths_75_and_above = apply( mort1[,c("deaths_75_79", "deaths_80_84", "deaths_85_89", "deaths_90_94", "deaths_95_and_above")], 1, sum, na.rm=TRUE )
mort1$deaths_85_and_above = apply( mort1[,c("deaths_85_89", "deaths_90_94", "deaths_95_and_above")], 1, sum, na.rm=TRUE )
mort1[is.na(mort1)] = -1
mort1$deaths_0_14 = ifelse( ((mort1$deaths_0!=-1)&(mort1$deaths_1!=-1)&(mort1$deaths_2!=-1)&(mort1$deaths_3!=-1)&(mort1$deaths_4!=-1)&(mort1$deaths_5_9!=-1)), -1, mort1$deaths_0_14 )
mort1$deaths_75_and_above = ifelse( ((mort1$deaths_80_84!=-1)&(mort1$deaths_85_89!=-1)&(mort1$deaths_90_94!=-1)&(mort1$deaths_95_and_above!=-1)), -1, mort1$deaths_75_and_above )
mort1$deaths_85_and_above = ifelse( ((mort1$deaths_90_94!=-1)&(mort1$deaths_95_and_above!=-1)), -1, mort1$deaths_85_and_above )

mort2 = mort1[,c("Country_Name", "Year", "Cause", "icd10_3digit_code", "Sex", "deaths_0_4", "deaths_5_9", "deaths_10_14", "deaths_0_14", "deaths_15_19", "deaths_20_24", "deaths_25_29", "deaths_30_34", "deaths_35_39", "deaths_40_44", "deaths_45_49", "deaths_50_54", "deaths_55_59", "deaths_60_64", "deaths_65_69", "deaths_70_74", "deaths_75_79", "deaths_80_84", "deaths_85_89", "deaths_90_94", "deaths_75_and_above", "deaths_85_and_above", "deaths_95_and_above" )]

mort3 = melt(mort2, id.vars=c("Country_Name", "Year", "Cause", "icd10_3digit_code", "Sex"))
names(mort3)[names(mort3)=="variable"] = "age_group"
names(mort3)[names(mort3)=="value"] = "deaths"
mort3$age_group = as.character(mort3$age_group)
mort3$deaths = as.numeric(as.character(mort3$deaths))

mort3$age_group = ifelse( (mort3$age_group=="deaths_0_4"), "age_0_to_4", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_5_9"), "age_5_to_9", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_10_14"), "age_10_to_14", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_0_14"), "age_0_to_14", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_15_19"), "age_15_to_19", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_20_24"), "age_20_to_24", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_25_29"), "age_25_to_29", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_30_34"), "age_30_to_34", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_35_39"), "age_35_to_39", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_40_44"), "age_40_to_44", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_45_49"), "age_45_to_49", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_50_54"), "age_50_to_54", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_55_59"), "age_55_to_59", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_60_64"), "age_60_to_64", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_65_69"), "age_65_to_69", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_70_74"), "age_70_to_74", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_75_79"), "age_75_to_79", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_80_84"), "age_80_to_84", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_85_89"), "age_85_to_89", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_90_94"), "age_90_to_94", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_75_and_above"), "age_75_plus", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_85_and_above"), "age_85_plus", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_95_and_above"), "age_95_plus", mort3$age_group )

mort4 = merge( x=mort3, y=country_codes_3char, by=c("Country_Name"), all.x=TRUE, all.y=FALSE )

mort_2010_to_2014_C45_J61 = mort4

rm(mort1, mort2, mort3, mort4)

### verifications
sqldf('select Country_Name, Cause, Sex, sum(deaths) from mort_2010_to_2014_C45_J61 where Sex=1 and Cause is not "J61" group by Country_Name, Cause, Sex')
mort_2010_to_2014_C45_J61[((mort_2010_to_2014_C45_J61$Sex==1)&(mort_2010_to_2014_C45_J61$Cause!="J61")),]


#####

mort1 = mort[((mort$Year>=2000) & (mort$Year<=2004)),]

# Some years for some countries do not have data for some age ranges. Need to aggregate those to an age group that does have data
# Remove those super-aggregations when not needed when the sub-age-ranges data does exist.

mort1$deaths_0_4 = apply( mort1[,c("deaths_0", "deaths_1", "deaths_2", "deaths_3", "deaths_4")], 1, sum, na.rm=TRUE )
mort1$deaths_0_14 = apply( mort1[,c("deaths_0", "deaths_1", "deaths_2", "deaths_3", "deaths_4", "deaths_5_9", "deaths_10_14")], 1, sum, na.rm=TRUE )
mort1$deaths_75_and_above = apply( mort1[,c("deaths_75_79", "deaths_80_84", "deaths_85_89", "deaths_90_94", "deaths_95_and_above")], 1, sum, na.rm=TRUE )
mort1$deaths_85_and_above = apply( mort1[,c("deaths_85_89", "deaths_90_94", "deaths_95_and_above")], 1, sum, na.rm=TRUE )
mort1[is.na(mort1)] = -1
mort1$deaths_0_14 = ifelse( ((mort1$deaths_0!=-1)&(mort1$deaths_1!=-1)&(mort1$deaths_2!=-1)&(mort1$deaths_3!=-1)&(mort1$deaths_4!=-1)&(mort1$deaths_5_9!=-1)), -1, mort1$deaths_0_14 )
mort1$deaths_75_and_above = ifelse( ((mort1$deaths_80_84!=-1)&(mort1$deaths_85_89!=-1)&(mort1$deaths_90_94!=-1)&(mort1$deaths_95_and_above!=-1)), -1, mort1$deaths_75_and_above )
mort1$deaths_85_and_above = ifelse( ((mort1$deaths_90_94!=-1)&(mort1$deaths_95_and_above!=-1)), -1, mort1$deaths_85_and_above )

mort2 = mort1[,c("Country_Name", "Year", "Cause", "icd10_3digit_code", "Sex", "deaths_0_4", "deaths_5_9", "deaths_10_14", "deaths_0_14", "deaths_15_19", "deaths_20_24", "deaths_25_29", "deaths_30_34", "deaths_35_39", "deaths_40_44", "deaths_45_49", "deaths_50_54", "deaths_55_59", "deaths_60_64", "deaths_65_69", "deaths_70_74", "deaths_75_79", "deaths_80_84", "deaths_85_89", "deaths_90_94", "deaths_75_and_above", "deaths_85_and_above", "deaths_95_and_above" )]

mort3 = melt(mort2, id.vars=c("Country_Name", "Year", "Cause", "icd10_3digit_code", "Sex"))
names(mort3)[names(mort3)=="variable"] = "age_group"
names(mort3)[names(mort3)=="value"] = "deaths"
mort3$age_group = as.character(mort3$age_group)
mort3$deaths = as.numeric(as.character(mort3$deaths))

mort3$age_group = ifelse( (mort3$age_group=="deaths_0_4"), "age_0_to_4", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_5_9"), "age_5_to_9", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_10_14"), "age_10_to_14", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_0_14"), "age_0_to_14", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_15_19"), "age_15_to_19", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_20_24"), "age_20_to_24", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_25_29"), "age_25_to_29", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_30_34"), "age_30_to_34", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_35_39"), "age_35_to_39", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_40_44"), "age_40_to_44", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_45_49"), "age_45_to_49", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_50_54"), "age_50_to_54", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_55_59"), "age_55_to_59", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_60_64"), "age_60_to_64", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_65_69"), "age_65_to_69", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_70_74"), "age_70_to_74", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_75_79"), "age_75_to_79", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_80_84"), "age_80_to_84", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_85_89"), "age_85_to_89", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_90_94"), "age_90_to_94", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_75_and_above"), "age_75_plus", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_85_and_above"), "age_85_plus", mort3$age_group )
mort3$age_group = ifelse( (mort3$age_group=="deaths_95_and_above"), "age_95_plus", mort3$age_group )

mort4 = merge( x=mort3, y=country_codes_3char, by=c("Country_Name"), all.x=TRUE, all.y=FALSE )

mort_2000_to_2004_C45_J61 = mort4

rm(mort1, mort2, mort3, mort4)



##########
##### Analysis for males mesothelioma C45 deaths 2010-2014 vs asbestos 1965

mort1 = mort_2010_to_2014_C45_J61[((mort_2010_to_2014_C45_J61$icd10_3digit_code=="C45") & (mort_2010_to_2014_C45_J61$Sex==1) & (mort_2010_to_2014_C45_J61$deaths>0)),]
pop1 = pop_males_by_age_with_extra_countries

unique(mort1$Country_Name[(!(mort1$Country_Name %in% pop1$Country_Name))])

mort2 = merge( x=mort1, y=pop1, by=c("Country_Name", "Year", "age_group"), x.all=TRUE, y.all=FALSE )

mort2b = sqldf("select Country_Name, Country_3char, Year, age_group, sum(deaths), max(population) from mort2 where population > 0 group by Country_Name, Country_3char, Year, age_group")
colnames(mort2b) = c("Country_Name", "Country_3char", "Year", "age_group", "deaths", "population")
mort2b$death_rate_per_million = mort2b$deaths * 1000000 / mort2b$population

mort3 = merge( x=mort2b, y=std_pop, by=c("age_group"), x.all=TRUE, y.all=FALSE )
mort3$adjusted_death_rate_per_million = mort3$death_rate_per_million * mort3$WHO_World_Standard_rate

mort4 = sqldf('select Country_Name, Country_3char, Year, sum(adjusted_death_rate_per_million) from mort3 group by Country_Name, Country_3char, Year')
names(mort4)[names(mort4)=="sum(adjusted_death_rate_per_million)"] = "AAMR_per_million"

mort6 = sqldf('select Country_Name, Country_3char, avg(AAMR_per_million) from mort4 group by Country_Name, Country_3char')
names(mort6)[names(mort6)=="avg(AAMR_per_million)"] = "AAMR_per_million"

mort6$Country_Name[(!(mort6$Country_Name %in% PC_asbestos_1965$Country_Name))]
PC_asbestos_1965$Country_Name[(!(PC_asbestos_1965$Country_Name %in% mort6$Country_Name))]

mort_asb1 = merge( x=mort6, y=PC_asbestos_1965, by=c("Country_Name"), all.x=FALSE, all.y=FALSE )
mort_asb1$Production = NULL
mort_asb1$Imports = NULL
mort_asb1$Exports = NULL
mort_asb1$Apparent_consumption = NULL
mort_asb1$Year = NULL
mort_asb1$AAMR_per_million_log10 = log10(mort_asb1$AAMR_per_million)

pop2 = pop_males[(pop_males$Year==1965),]

mort_asb3 = merge( x=mort_asb1, y=pop2, by=c("Country_Name"), all.x=TRUE, all.y=FALSE )

mortasb = mort_asb3

# nudge the country text on the plot
min_population = min(mortasb$population)
max_population = max(mortasb$population)
nudge_x_slope_m = (0.10 - 0.6) / (max_population - min_population)
nudge_x_intercept_b = 0.6 - nudge_x_slope_m * min_population
mortasb$nudge_x = 1 * (mortasb$population * nudge_x_slope_m + nudge_x_intercept_b)
mortasb$nudge_y = 0

#mortasb$nudge_x = ifelse( (mortasb$Country_3char=="NLD"), 0.2, mortasb$nudge_x )
#mortasb$nudge_y = ifelse( (mortasb$Country_3char=="TUN"), 0.01, mortasb$nudge_y )
#mortasb[,c("Country_Name", "Country_3char", "population", "AAMR_per_million", "nudge_x", "nudge_y")]

data_for_plot = mortasb
data_for_plot$nudge_x = NULL
data_for_plot$nudge_y = NULL

C45_males_AAMR_2010_2014_asbestos_1965 = data_for_plot
data_name = "C45_males_AAMR_2010_2014_asbestos_1965"
plot_title = gsub( "_", " ", data_name )

file_name = paste("Results/", data_name, ".txt", sep="" )
plot_name = paste("Results/", data_name, ".png", sep="" )

ggplot(mortasb, aes(x=PC_asbestos_kg, y=AAMR_per_million, size=population)) + geom_point(colour="#4E8D24", shape=21) + 
  theme(axis.text.x=element_text(angle=0, vjust=0.5, hjust=1)) + scale_y_log10() + theme_bw() +
  theme(panel.border=element_blank(), panel.grid.major = element_blank(), panel.grid.minor=element_blank(), axis.line=element_line(colour="black")) +
  geom_text(label=mortasb$Country_3char, nudge_x=mortasb$nudge_x, nudge_y=mortasb$nudge_y, check_overlap=FALSE, size=3) +
  ggtitle(plot_title) + labs(x="1965 asbestos consumption (kg per head per year)", y="Deaths per million people per year 2010-2014")
ggsave(plot_name, width=8, height=5)

write.table( data_for_plot, file=file_name, quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE )

nrow(C45_males_AAMR_2010_2014_asbestos_1965)

cor.test( C45_males_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg, C45_males_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10, method="pearson", use="complete.obs")

model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C45_males_AAMR_2010_2014_asbestos_1965, weights=male_population)
model_lm
summary(model_lm)
confint(model_lm, '(Intercept)', level=0.95)
confint(model_lm, 'PC_asbestos_kg', level=0.95)
se = sqrt(diag(vcov(model_lm)))
se
AIC(model_lm)
BIC(model_lm)
shapiro.test(residuals(model_lm))

###
> nrow(C45_males_AAMR_2010_2014_asbestos_1965)
[1] 66
> 
> cor.test( C45_males_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg, C45_males_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10, method="pearson", use="complete.obs")

	Pearson's product-moment correlation

data:  C45_males_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg and C45_males_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10
t = 5.5113, df = 64, p-value = 0.0000006805
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 0.3770599 0.7116368
sample estimates:
      cor 
0.5673187 

> 
> model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C45_males_AAMR_2010_2014_asbestos_1965, weights=male_population)
> model_lm

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C45_males_AAMR_2010_2014_asbestos_1965, 
    weights = male_population)

Coefficients:
   (Intercept)  PC_asbestos_kg  
       -0.1353          0.3849  

> summary(model_lm)

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C45_males_AAMR_2010_2014_asbestos_1965, 
    weights = male_population)

Weighted Residuals:
    Min      1Q  Median      3Q     Max 
-6037.1  -556.8   221.9   862.0  3496.8 

Coefficients:
               Estimate Std. Error t value       Pr(>|t|)    
(Intercept)    -0.13528    0.11161  -1.212           0.23    
PC_asbestos_kg  0.38488    0.05138   7.491 0.000000000254 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1641 on 64 degrees of freedom
Multiple R-squared:  0.4672,	Adjusted R-squared:  0.4589 
F-statistic: 56.12 on 1 and 64 DF,  p-value: 0.0000000002541

> confint(model_lm, '(Intercept)', level=0.95)
                 2.5 %     97.5 %
(Intercept) -0.3582349 0.08768105
> confint(model_lm, 'PC_asbestos_kg', level=0.95)
                   2.5 %    97.5 %
PC_asbestos_kg 0.2822438 0.4875121
> se = sqrt(diag(vcov(model_lm)))
> se
   (Intercept) PC_asbestos_kg 
    0.11160569     0.05137538 
> AIC(model_lm)
[1] 167.905
> BIC(model_lm)
[1] 174.474
> shapiro.test(residuals(model_lm))

	Shapiro-Wilk normality test

data:  residuals(model_lm)
W = 0.91514, p-value = 0.0002512
###

jpeg(paste("Results/", data_name, "_model_lm_hist_residuals.jpg", sep=""), width=600, height=600)
hist(residuals(model_lm), main=paste("residuals for model_lm_", data_name, sep=""))
dev.off()
jpeg(paste("Results/", data_name, "_model_lm_qqplot_residuals.jpg", sep=""), width=600, height=600)
qqnorm( residuals(model_lm), pch=1, frame=FALSE, main=paste("Q-Q plot(model_lm_", data_name, ")", sep="") )
qqline( residuals(model_lm), col="steelblue", lwd=2 )
dev.off()

model_lm_C45_males_AAMR_2010_2014_asbestos_1965 = model_lm
model_name = "model_lm_C45_males_AAMR_2010_2014_asbestos_1965"
model_disease = "all mesothelioma"
model_gender = "males"
years_of_deaths = "2010-2014"
years_of_asbestos = "1965"
countries_included = "all"

num_points = nrow(mortasb)
y_intercept = model_lm$coefficients[[1]]
slope = model_lm$coefficients[[2]]
BO_CI1 = confint(model_lm, '(Intercept)', level=0.95)[[1]]
BO_CI2 = confint(model_lm, '(Intercept)', level=0.95)[[2]]
B0_SE = sqrt(diag(vcov(model_lm)))[[1]]
B0_p_value = summary(model_lm)$coefficients[7]
B1_CI1 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[1]]
B1_CI2 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[2]]
B1_SE = sqrt(diag(vcov(model_lm)))[[2]]
B1_p_value = summary(model_lm)$coefficients[8]
R_squared = summary(model_lm)$r.squared
adjusted_R_squared = summary(model_lm)$adj.r.squared
fstat = summary(model_lm)$fstatistic
if (is.null(fstat)) {
  p_value = 1
} else {
  p_value = pf(fstat[1], fstat[2], fstat[3], lower.tail=F)
}

#outline = paste(model_disease, model_gender, years_of_deaths, years_of_asbestos, num_points, countries_included, y_intercept, BO_CI1, BO_CI2, B0_SE, B0_p_value, slope, B1_CI1, B1_CI2, B1_SE, B1_p_value, adjusted_R_squared, p_value, sep="\t")
#write(outline, file=outfile_stats, append=TRUE)



##########
##### Analysis for males mesothelioma C45 deaths 2010-2014 vs asbestos 1965, using only countries in 2007 paper

mort_asb5 = C45_males_AAMR_2010_2014_asbestos_1965

mort_asb6 = mort_asb5[(mort_asb5$Country_3char %in% paper2007_countries_for_C45_males),]

mortasb = mort_asb6

# nudge the country text on the plot
min_population = min(mortasb$population)
max_population = max(mortasb$population)
nudge_x_slope_m = (0.10 - 0.6) / (max_population - min_population)
nudge_x_intercept_b = 0.6 - nudge_x_slope_m * min_population
mortasb$nudge_x = 1 * (mortasb$population * nudge_x_slope_m + nudge_x_intercept_b)
mortasb$nudge_y = 0

#mortasb$nudge_x = ifelse( (mortasb$Country_3char=="NLD"), 0.2, mortasb$nudge_x )
#mortasb$nudge_y = ifelse( (mortasb$Country_3char=="TUN"), 0.01, mortasb$nudge_y )
#mortasb[,c("Country_Name", "Country_3char", "population", "AAMR_per_million", "nudge_x", "nudge_y")]

data_for_plot = mortasb
data_for_plot$nudge_x = NULL
data_for_plot$nudge_y = NULL

C45_males_AAMR_2010_2014_asbestos_1965_paper2007countries = data_for_plot
data_name = "C45_males_AAMR_2010_2014_asbestos_1965_paper2007countries"
plot_title = gsub( "_", " ", data_name )

file_name = paste("Results/", data_name, ".txt", sep="" )
plot_name = paste("Results/", data_name, ".png", sep="" )

ggplot(mortasb, aes(x=PC_asbestos_kg, y=AAMR_per_million, size=population)) + geom_point(colour="#4E8D24", shape=21) + 
  theme(axis.text.x=element_text(angle=0, vjust=0.5, hjust=1)) + scale_y_log10() + theme_bw() +
  theme(panel.border=element_blank(), panel.grid.major = element_blank(), panel.grid.minor=element_blank(), axis.line=element_line(colour="black")) +
  geom_text(label=mortasb$Country_3char, nudge_x=mortasb$nudge_x, nudge_y=mortasb$nudge_y, check_overlap=FALSE, size=3) +
  ggtitle(plot_title) + labs(x="1965 asbestos consumption (kg per head per year)", y="Deaths per million people per year 2010-2014")
ggsave(plot_name, width=8, height=5)

write.table( data_for_plot, file=file_name, quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE )

nrow(C45_males_AAMR_2010_2014_asbestos_1965_paper2007countries)

cor.test( C45_males_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg, C45_males_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10, method="pearson", use="complete.obs")

model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C45_males_AAMR_2010_2014_asbestos_1965_paper2007countries, weights=male_population)
model_lm
summary(model_lm)
confint(model_lm, '(Intercept)', level=0.95)
confint(model_lm, 'PC_asbestos_kg', level=0.95)
se = sqrt(diag(vcov(model_lm)))
se
AIC(model_lm)
BIC(model_lm)
shapiro.test(residuals(model_lm))

###
> nrow(C45_males_AAMR_2010_2014_asbestos_1965_paper2007countries)
[1] 32
> 
> cor.test( C45_males_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg, C45_males_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10, method="pearson", use="complete.obs")

	Pearson's product-moment correlation

data:  C45_males_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg and C45_males_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10
t = 7.2174, df = 30, p-value = 0.00000004936
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 0.6201519 0.8963168
sample estimates:
      cor 
0.7965889 

> 
> model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C45_males_AAMR_2010_2014_asbestos_1965_paper2007countries, weights=male_population)
> model_lm

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C45_males_AAMR_2010_2014_asbestos_1965_paper2007countries, 
    weights = male_population)

Coefficients:
   (Intercept)  PC_asbestos_kg  
        0.1695          0.2868  

> summary(model_lm)

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C45_males_AAMR_2010_2014_asbestos_1965_paper2007countries, 
    weights = male_population)

Weighted Residuals:
    Min      1Q  Median      3Q     Max 
-3289.7  -297.1   203.4   608.8  2517.5 

Coefficients:
               Estimate Std. Error t value    Pr(>|t|)    
(Intercept)     0.16951    0.10757   1.576       0.126    
PC_asbestos_kg  0.28676    0.04507   6.363 0.000000508 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1092 on 30 degrees of freedom
Multiple R-squared:  0.5744,	Adjusted R-squared:  0.5602 
F-statistic: 40.48 on 1 and 30 DF,  p-value: 0.0000005083

> confint(model_lm, '(Intercept)', level=0.95)
                  2.5 %   97.5 %
(Intercept) -0.05016699 0.389188
> confint(model_lm, 'PC_asbestos_kg', level=0.95)
                   2.5 %    97.5 %
PC_asbestos_kg 0.1947161 0.3788036
> se = sqrt(diag(vcov(model_lm)))
> se
   (Intercept) PC_asbestos_kg 
    0.10756523     0.04506926 
> AIC(model_lm)
[1] 47.46848
> BIC(model_lm)
[1] 51.86568
> shapiro.test(residuals(model_lm))

	Shapiro-Wilk normality test

data:  residuals(model_lm)
W = 0.97377, p-value = 0.6091
###

jpeg(paste("Results/", data_name, "_model_lm_hist_residuals.jpg", sep=""), width=600, height=600)
hist(residuals(model_lm), main=paste("residuals for model_lm_", data_name, sep=""))
dev.off()
jpeg(paste("Results/", data_name, "_model_lm_qqplot_residuals.jpg", sep=""), width=600, height=600)
qqnorm( residuals(model_lm), pch=1, frame=FALSE, main=paste("Q-Q plot(model_lm_", data_name, ")", sep="") )
qqline( residuals(model_lm), col="steelblue", lwd=2 )
dev.off()

model_lm_C45_males_AAMR_2010_2014_asbestos_1965_paper2007countries = model_lm
model_name = "model_lm_C45_males_AAMR_2010_2014_asbestos_1965_paper2007countries"
model_disease = "all mesothelioma"
model_gender = "males"
years_of_deaths = "2010-2014"
years_of_asbestos = "1965"
countries_included = "paper 2007 countries"

num_points = nrow(mortasb)
y_intercept = model_lm$coefficients[[1]]
slope = model_lm$coefficients[[2]]
BO_CI1 = confint(model_lm, '(Intercept)', level=0.95)[[1]]
BO_CI2 = confint(model_lm, '(Intercept)', level=0.95)[[2]]
B0_SE = sqrt(diag(vcov(model_lm)))[[1]]
B0_p_value = summary(model_lm)$coefficients[7]
B1_CI1 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[1]]
B1_CI2 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[2]]
B1_SE = sqrt(diag(vcov(model_lm)))[[2]]
B1_p_value = summary(model_lm)$coefficients[8]
R_squared = summary(model_lm)$r.squared
adjusted_R_squared = summary(model_lm)$adj.r.squared
fstat = summary(model_lm)$fstatistic
if (is.null(fstat)) {
  p_value = 1
} else {
  p_value = pf(fstat[1], fstat[2], fstat[3], lower.tail=F)
}

outline = paste(model_disease, model_gender, years_of_deaths, years_of_asbestos, num_points, countries_included, y_intercept, BO_CI1, BO_CI2, B0_SE, B0_p_value, slope, B1_CI1, B1_CI2, B1_SE, B1_p_value, adjusted_R_squared, p_value, sep="\t")
write(outline, file=outfile_stats, append=TRUE)



##########
##### Analysis for females mesothelioma C45 deaths 2010-2014 vs asbestos 1965

mort1 = mort_2010_to_2014_C45_J61[((mort_2010_to_2014_C45_J61$icd10_3digit_code=="C45") & (mort_2010_to_2014_C45_J61$Sex==2) & (mort_2010_to_2014_C45_J61$deaths>0)),]
pop1 = pop_females_by_age_with_extra_countries

unique(mort1$Country_Name[(!(mort1$Country_Name %in% pop1$Country_Name))])

mort2 = merge( x=mort1, y=pop1, by=c("Country_Name", "Year", "age_group"), x.all=TRUE, y.all=FALSE )

mort2b = sqldf("select Country_Name, Country_3char, Year, age_group, sum(deaths), max(population) from mort2 where population > 0 group by Country_Name, Country_3char, Year, age_group")
colnames(mort2b) = c("Country_Name", "Country_3char", "Year", "age_group", "deaths", "population")
mort2b$death_rate_per_million = mort2b$deaths * 1000000 / mort2b$population

mort3 = merge( x=mort2b, y=std_pop, by=c("age_group"), x.all=TRUE, y.all=FALSE )
mort3$adjusted_death_rate_per_million = mort3$death_rate_per_million * mort3$WHO_World_Standard_rate

mort4 = sqldf('select Country_Name, Country_3char, Year, sum(adjusted_death_rate_per_million) from mort3 group by Country_Name, Country_3char, Year')
names(mort4)[names(mort4)=="sum(adjusted_death_rate_per_million)"] = "AAMR_per_million"

mort6 = sqldf('select Country_Name, Country_3char, avg(AAMR_per_million) from mort4 group by Country_Name, Country_3char')
names(mort6)[names(mort6)=="avg(AAMR_per_million)"] = "AAMR_per_million"

mort6$Country_Name[(!(mort6$Country_Name %in% PC_asbestos_1965$Country_Name))]
PC_asbestos_1965$Country_Name[(!(PC_asbestos_1965$Country_Name %in% mort6$Country_Name))]

mort_asb1 = merge( x=mort6, y=PC_asbestos_1965, by=c("Country_Name"), all.x=FALSE, all.y=FALSE )
mort_asb1$Production = NULL
mort_asb1$Imports = NULL
mort_asb1$Exports = NULL
mort_asb1$Apparent_consumption = NULL
mort_asb1$Year = NULL
mort_asb1$AAMR_per_million_log10 = log10(mort_asb1$AAMR_per_million)

pop2 = pop_females[(pop_females$Year==1965),]

mort_asb3 = merge( x=mort_asb1, y=pop2, by=c("Country_Name"), all.x=TRUE, all.y=FALSE )

mortasb = mort_asb3

# nudge the country text on the plot
min_population = min(mortasb$population)
max_population = max(mortasb$population)
nudge_x_slope_m = (0.10 - 0.6) / (max_population - min_population)
nudge_x_intercept_b = 0.6 - nudge_x_slope_m * min_population
mortasb$nudge_x = 1 * (mortasb$population * nudge_x_slope_m + nudge_x_intercept_b)
mortasb$nudge_y = 0

#mortasb$nudge_x = ifelse( (mortasb$Country_3char=="NLD"), 0.2, mortasb$nudge_x )
#mortasb$nudge_y = ifelse( (mortasb$Country_3char=="TUN"), 0.01, mortasb$nudge_y )
#mortasb[,c("Country_Name", "Country_3char", "population", "AAMR_per_million", "nudge_x", "nudge_y")]

data_for_plot = mortasb
data_for_plot$nudge_x = NULL
data_for_plot$nudge_y = NULL

C45_females_AAMR_2010_2014_asbestos_1965 = data_for_plot
data_name = "C45_females_AAMR_2010_2014_asbestos_1965"
plot_title = gsub( "_", " ", data_name )

file_name = paste("Results/", data_name, ".txt", sep="" )
plot_name = paste("Results/", data_name, ".png", sep="" )

ggplot(mortasb, aes(x=PC_asbestos_kg, y=AAMR_per_million, size=population)) + geom_point(colour="#4E8D24", shape=21) + 
  theme(axis.text.x=element_text(angle=0, vjust=0.5, hjust=1)) + scale_y_log10() + theme_bw() +
  theme(panel.border=element_blank(), panel.grid.major = element_blank(), panel.grid.minor=element_blank(), axis.line=element_line(colour="black")) +
  geom_text(label=mortasb$Country_3char, nudge_x=mortasb$nudge_x, nudge_y=mortasb$nudge_y, check_overlap=FALSE, size=3) +
  ggtitle(plot_title) + labs(x="1965 asbestos consumption (kg per head per year)", y="Deaths per million people per year 2010-2014")
ggsave(plot_name, width=8, height=5)

write.table( data_for_plot, file=file_name, quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE )

nrow(C45_females_AAMR_2010_2014_asbestos_1965)

cor.test( C45_females_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg, C45_females_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10, method="pearson", use="complete.obs")

model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C45_females_AAMR_2010_2014_asbestos_1965, weights=female_population)
model_lm
summary(model_lm)
confint(model_lm, '(Intercept)', level=0.95)
confint(model_lm, 'PC_asbestos_kg', level=0.95)
se = sqrt(diag(vcov(model_lm)))
se
AIC(model_lm)
BIC(model_lm)
shapiro.test(residuals(model_lm))

###
> nrow(C45_females_AAMR_2010_2014_asbestos_1965)
[1] 64
> 
> cor.test( C45_females_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg, C45_females_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10, method="pearson", use="complete.obs")

	Pearson's product-moment correlation

data:  C45_females_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg and C45_females_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10
t = 4.6206, df = 62, p-value = 0.00001985
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 0.2972907 0.6687290
sample estimates:
      cor 
0.5061148 

> 
> model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C45_females_AAMR_2010_2014_asbestos_1965, weights=female_population)
> model_lm

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C45_females_AAMR_2010_2014_asbestos_1965, 
    weights = female_population)

Coefficients:
   (Intercept)  PC_asbestos_kg  
       -0.3700          0.2495  

> summary(model_lm)

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C45_females_AAMR_2010_2014_asbestos_1965, 
    weights = female_population)

Weighted Residuals:
    Min      1Q  Median      3Q     Max 
-5480.4  -404.3   184.0   493.8  3591.6 

Coefficients:
               Estimate Std. Error t value    Pr(>|t|)    
(Intercept)    -0.36997    0.09487  -3.900    0.000239 ***
PC_asbestos_kg  0.24954    0.04327   5.768 0.000000274 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1385 on 62 degrees of freedom
Multiple R-squared:  0.3492,	Adjusted R-squared:  0.3387 
F-statistic: 33.27 on 1 and 62 DF,  p-value: 0.0000002738

> confint(model_lm, '(Intercept)', level=0.95)
                 2.5 %     97.5 %
(Intercept) -0.5596186 -0.1803202
> confint(model_lm, 'PC_asbestos_kg', level=0.95)
                  2.5 %    97.5 %
PC_asbestos_kg 0.163059 0.3360303
> se = sqrt(diag(vcov(model_lm)))
> se
   (Intercept) PC_asbestos_kg 
    0.09487339     0.04326507 
> AIC(model_lm)
[1] 138.4145
> BIC(model_lm)
[1] 144.8911
> shapiro.test(residuals(model_lm))

	Shapiro-Wilk normality test

data:  residuals(model_lm)
W = 0.90662, p-value = 0.0001435
###

jpeg(paste("Results/", data_name, "_model_lm_hist_residuals.jpg", sep=""), width=600, height=600)
hist(residuals(model_lm), main=paste("residuals for model_lm_", data_name, sep=""))
dev.off()
jpeg(paste("Results/", data_name, "_model_lm_qqplot_residuals.jpg", sep=""), width=600, height=600)
qqnorm( residuals(model_lm), pch=1, frame=FALSE, main=paste("Q-Q plot(model_lm_", data_name, ")", sep="") )
qqline( residuals(model_lm), col="steelblue", lwd=2 )
dev.off()

model_lm_C45_females_AAMR_2010_2014_asbestos_1965 = model_lm
model_name = "model_lm_C45_females_AAMR_2010_2014_asbestos_1965"
model_disease = "all mesothelioma"
model_gender = "females"
years_of_deaths = "2010-2014"
years_of_asbestos = "1965"
countries_included = "all"

num_points = nrow(mortasb)
y_intercept = model_lm$coefficients[[1]]
slope = model_lm$coefficients[[2]]
BO_CI1 = confint(model_lm, '(Intercept)', level=0.95)[[1]]
BO_CI2 = confint(model_lm, '(Intercept)', level=0.95)[[2]]
B0_SE = sqrt(diag(vcov(model_lm)))[[1]]
B0_p_value = summary(model_lm)$coefficients[7]
B1_CI1 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[1]]
B1_CI2 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[2]]
B1_SE = sqrt(diag(vcov(model_lm)))[[2]]
B1_p_value = summary(model_lm)$coefficients[8]
R_squared = summary(model_lm)$r.squared
adjusted_R_squared = summary(model_lm)$adj.r.squared
fstat = summary(model_lm)$fstatistic
if (is.null(fstat)) {
  p_value = 1
} else {
  p_value = pf(fstat[1], fstat[2], fstat[3], lower.tail=F)
}

#outline = paste(model_disease, model_gender, years_of_deaths, years_of_asbestos, num_points, countries_included, y_intercept, BO_CI1, BO_CI2, B0_SE, B0_p_value, slope, B1_CI1, B1_CI2, B1_SE, B1_p_value, adjusted_R_squared, p_value, sep="\t")
#write(outline, file=outfile_stats, append=TRUE)



##########
##### Analysis for females mesothelioma C45 deaths 2010-2014 vs asbestos 1965, using only countries in 2007 paper

mort_asb5 = C45_females_AAMR_2010_2014_asbestos_1965

mort_asb6 = mort_asb5[(mort_asb5$Country_3char %in% paper2007_countries_for_C45_females),]

mortasb = mort_asb6

# nudge the country text on the plot
min_population = min(mortasb$population)
max_population = max(mortasb$population)
nudge_x_slope_m = (0.10 - 0.6) / (max_population - min_population)
nudge_x_intercept_b = 0.6 - nudge_x_slope_m * min_population
mortasb$nudge_x = 1 * (mortasb$population * nudge_x_slope_m + nudge_x_intercept_b)
mortasb$nudge_y = 0

#mortasb$nudge_x = ifelse( (mortasb$Country_3char=="NLD"), 0.2, mortasb$nudge_x )
#mortasb$nudge_y = ifelse( (mortasb$Country_3char=="TUN"), 0.01, mortasb$nudge_y )
#mortasb[,c("Country_Name", "Country_3char", "population", "AAMR_per_million", "nudge_x", "nudge_y")]

data_for_plot = mortasb
data_for_plot$nudge_x = NULL
data_for_plot$nudge_y = NULL

C45_females_AAMR_2010_2014_asbestos_1965_paper2007countries = data_for_plot
data_name = "C45_females_AAMR_2010_2014_asbestos_1965_paper2007countries"
plot_title = gsub( "_", " ", data_name )

file_name = paste("Results/", data_name, ".txt", sep="" )
plot_name = paste("Results/", data_name, ".png", sep="" )

ggplot(mortasb, aes(x=PC_asbestos_kg, y=AAMR_per_million, size=population)) + geom_point(colour="#4E8D24", shape=21) + 
  theme(axis.text.x=element_text(angle=0, vjust=0.5, hjust=1)) + scale_y_log10() + theme_bw() +
  theme(panel.border=element_blank(), panel.grid.major = element_blank(), panel.grid.minor=element_blank(), axis.line=element_line(colour="black")) +
  geom_text(label=mortasb$Country_3char, nudge_x=mortasb$nudge_x, nudge_y=mortasb$nudge_y, check_overlap=FALSE, size=3) +
  ggtitle(plot_title) + labs(x="1965 asbestos consumption (kg per head per year)", y="Deaths per million people per year 2010-2014")
ggsave(plot_name, width=8, height=5)

write.table( data_for_plot, file=file_name, quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE )

nrow(C45_females_AAMR_2010_2014_asbestos_1965_paper2007countries)

cor.test( C45_females_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg, C45_females_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10, method="pearson", use="complete.obs")

model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C45_females_AAMR_2010_2014_asbestos_1965_paper2007countries, weights=female_population)
model_lm
summary(model_lm)
confint(model_lm, '(Intercept)', level=0.95)
confint(model_lm, 'PC_asbestos_kg', level=0.95)
se = sqrt(diag(vcov(model_lm)))
se
AIC(model_lm)
BIC(model_lm)
shapiro.test(residuals(model_lm))

###
> nrow(C45_females_AAMR_2010_2014_asbestos_1965_paper2007countries)
[1] 31
> 
> cor.test( C45_females_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg, C45_females_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10, method="pearson", use="complete.obs")

	Pearson's product-moment correlation

data:  C45_females_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg and C45_females_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10
t = 5.9302, df = 29, p-value = 0.00000193
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 0.5232150 0.8671697
sample estimates:
      cor 
0.7403054 

> 
> model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C45_females_AAMR_2010_2014_asbestos_1965_paper2007countries, weights=female_population)
> model_lm

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C45_females_AAMR_2010_2014_asbestos_1965_paper2007countries, 
    weights = female_population)

Coefficients:
   (Intercept)  PC_asbestos_kg  
       -0.1549          0.1730  

> summary(model_lm)

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C45_females_AAMR_2010_2014_asbestos_1965_paper2007countries, 
    weights = female_population)

Weighted Residuals:
     Min       1Q   Median       3Q      Max 
-2496.30  -210.23    89.49   550.07  2050.26 

Coefficients:
               Estimate Std. Error t value  Pr(>|t|)    
(Intercept)    -0.15492    0.08824  -1.756    0.0897 .  
PC_asbestos_kg  0.17304    0.03686   4.695 0.0000592 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 895.3 on 29 degrees of freedom
Multiple R-squared:  0.4318,	Adjusted R-squared:  0.4122 
F-statistic: 22.04 on 1 and 29 DF,  p-value: 0.00005924

> confint(model_lm, '(Intercept)', level=0.95)
                 2.5 %     97.5 %
(Intercept) -0.3353836 0.02554991
> confint(model_lm, 'PC_asbestos_kg', level=0.95)
                    2.5 %    97.5 %
PC_asbestos_kg 0.09765553 0.2484301
> se = sqrt(diag(vcov(model_lm)))
> se
   (Intercept) PC_asbestos_kg 
    0.08823788     0.03686007 
> AIC(model_lm)
[1] 31.60628
> BIC(model_lm)
[1] 35.90824
> shapiro.test(residuals(model_lm))

	Shapiro-Wilk normality test

data:  residuals(model_lm)
W = 0.98085, p-value = 0.8359
###

jpeg(paste("Results/", data_name, "_model_lm_hist_residuals.jpg", sep=""), width=600, height=600)
hist(residuals(model_lm), main=paste("residuals for model_lm_", data_name, sep=""))
dev.off()
jpeg(paste("Results/", data_name, "_model_lm_qqplot_residuals.jpg", sep=""), width=600, height=600)
qqnorm( residuals(model_lm), pch=1, frame=FALSE, main=paste("Q-Q plot(model_lm_", data_name, ")", sep="") )
qqline( residuals(model_lm), col="steelblue", lwd=2 )
dev.off()

model_lm_C45_females_AAMR_2010_2014_asbestos_1965_paper2007countries = model_lm
model_name = "model_lm_C45_females_AAMR_2010_2014_asbestos_1965_paper2007countries"
model_disease = "all mesothelioma"
model_gender = "females"
years_of_deaths = "2010-2014"
years_of_asbestos = "1965"
countries_included = "paper 2007 countries"

num_points = nrow(mortasb)
y_intercept = model_lm$coefficients[[1]]
slope = model_lm$coefficients[[2]]
BO_CI1 = confint(model_lm, '(Intercept)', level=0.95)[[1]]
BO_CI2 = confint(model_lm, '(Intercept)', level=0.95)[[2]]
B0_SE = sqrt(diag(vcov(model_lm)))[[1]]
B0_p_value = summary(model_lm)$coefficients[7]
B1_CI1 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[1]]
B1_CI2 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[2]]
B1_SE = sqrt(diag(vcov(model_lm)))[[2]]
B1_p_value = summary(model_lm)$coefficients[8]
R_squared = summary(model_lm)$r.squared
adjusted_R_squared = summary(model_lm)$adj.r.squared
fstat = summary(model_lm)$fstatistic
if (is.null(fstat)) {
  p_value = 1
} else {
  p_value = pf(fstat[1], fstat[2], fstat[3], lower.tail=F)
}

outline = paste(model_disease, model_gender, years_of_deaths, years_of_asbestos, num_points, countries_included, y_intercept, BO_CI1, BO_CI2, B0_SE, B0_p_value, slope, B1_CI1, B1_CI2, B1_SE, B1_p_value, adjusted_R_squared, p_value, sep="\t")
write(outline, file=outfile_stats, append=TRUE)



##########
##### Analysis for males pleural mesothelioma C450 deaths 2010-2014 vs asbestos 1965

mort1 = mort_2010_to_2014_C45_J61[((mort_2010_to_2014_C45_J61$Cause=="C450") & (mort_2010_to_2014_C45_J61$Sex==1) & (mort_2010_to_2014_C45_J61$deaths>0)),]
pop1 = pop_males_by_age_with_extra_countries

unique(mort1$Country_Name[(!(mort1$Country_Name %in% pop1$Country_Name))])

mort2 = merge( x=mort1, y=pop1, by=c("Country_Name", "Year", "age_group"), x.all=TRUE, y.all=FALSE )

mort2b = sqldf("select Country_Name, Country_3char, Year, age_group, sum(deaths), max(population) from mort2 where population > 0 group by Country_Name, Country_3char, Year, age_group")
colnames(mort2b) = c("Country_Name", "Country_3char", "Year", "age_group", "deaths", "population")
mort2b$death_rate_per_million = mort2b$deaths * 1000000 / mort2b$population

mort3 = merge( x=mort2b, y=std_pop, by=c("age_group"), x.all=TRUE, y.all=FALSE )
mort3$adjusted_death_rate_per_million = mort3$death_rate_per_million * mort3$WHO_World_Standard_rate

mort4 = sqldf('select Country_Name, Country_3char, Year, sum(adjusted_death_rate_per_million) from mort3 group by Country_Name, Country_3char, Year')
names(mort4)[names(mort4)=="sum(adjusted_death_rate_per_million)"] = "AAMR_per_million"

mort6 = sqldf('select Country_Name, Country_3char, avg(AAMR_per_million) from mort4 group by Country_Name, Country_3char')
names(mort6)[names(mort6)=="avg(AAMR_per_million)"] = "AAMR_per_million"

mort6$Country_Name[(!(mort6$Country_Name %in% PC_asbestos_1965$Country_Name))]
PC_asbestos_1965$Country_Name[(!(PC_asbestos_1965$Country_Name %in% mort6$Country_Name))]

mort_asb1 = merge( x=mort6, y=PC_asbestos_1965, by=c("Country_Name"), all.x=FALSE, all.y=FALSE )
mort_asb1$Production = NULL
mort_asb1$Imports = NULL
mort_asb1$Exports = NULL
mort_asb1$Apparent_consumption = NULL
mort_asb1$Year = NULL
mort_asb1$AAMR_per_million_log10 = log10(mort_asb1$AAMR_per_million)

pop2 = pop_males[(pop_males$Year==1965),]

mort_asb3 = merge( x=mort_asb1, y=pop2, by=c("Country_Name"), all.x=TRUE, all.y=FALSE )

mortasb = mort_asb3

# nudge the country text on the plot
min_population = min(mortasb$population)
max_population = max(mortasb$population)
nudge_x_slope_m = (0.10 - 0.6) / (max_population - min_population)
nudge_x_intercept_b = 0.6 - nudge_x_slope_m * min_population
mortasb$nudge_x = 1 * (mortasb$population * nudge_x_slope_m + nudge_x_intercept_b)
mortasb$nudge_y = 0

#mortasb$nudge_x = ifelse( (mortasb$Country_3char=="NLD"), 0.2, mortasb$nudge_x )
#mortasb$nudge_y = ifelse( (mortasb$Country_3char=="TUN"), 0.01, mortasb$nudge_y )
#mortasb[,c("Country_Name", "Country_3char", "population", "AAMR_per_million", "nudge_x", "nudge_y")]

data_for_plot = mortasb
data_for_plot$nudge_x = NULL
data_for_plot$nudge_y = NULL

C450_males_AAMR_2010_2014_asbestos_1965 = data_for_plot
data_name = "C450_males_AAMR_2010_2014_asbestos_1965"
plot_title = gsub( "_", " ", data_name )

file_name = paste("Results/", data_name, ".txt", sep="" )
plot_name = paste("Results/", data_name, ".png", sep="" )

ggplot(mortasb, aes(x=PC_asbestos_kg, y=AAMR_per_million, size=population)) + geom_point(colour="#4E8D24", shape=21) + 
  theme(axis.text.x=element_text(angle=0, vjust=0.5, hjust=1)) + scale_y_log10() + theme_bw() +
  theme(panel.border=element_blank(), panel.grid.major = element_blank(), panel.grid.minor=element_blank(), axis.line=element_line(colour="black")) +
  geom_text(label=mortasb$Country_3char, nudge_x=mortasb$nudge_x, nudge_y=mortasb$nudge_y, check_overlap=FALSE, size=3) +
  ggtitle(plot_title) + labs(x="1965 asbestos consumption (kg per head per year)", y="Deaths per million people per year 2010-2014")
ggsave(plot_name, width=8, height=5)

write.table( data_for_plot, file=file_name, quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE )

nrow(C450_males_AAMR_2010_2014_asbestos_1965)

cor.test( C450_males_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg, C450_males_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10, method="pearson", use="complete.obs")

model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C450_males_AAMR_2010_2014_asbestos_1965, weights=male_population)
model_lm
summary(model_lm)
confint(model_lm, '(Intercept)', level=0.95)
confint(model_lm, 'PC_asbestos_kg', level=0.95)
se = sqrt(diag(vcov(model_lm)))
se
AIC(model_lm)
BIC(model_lm)
shapiro.test(residuals(model_lm))

###
> nrow(C450_males_AAMR_2010_2014_asbestos_1965)
[1] 47
> 
> cor.test( C450_males_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg, C450_males_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10, method="pearson", use="complete.obs")

	Pearson's product-moment correlation

data:  C450_males_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg and C450_males_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10
t = 3.3626, df = 45, p-value = 0.001584
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 0.1847298 0.6514574
sample estimates:
      cor 
0.4481244 

> 
> model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C450_males_AAMR_2010_2014_asbestos_1965, weights=male_population)
> model_lm

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C450_males_AAMR_2010_2014_asbestos_1965, 
    weights = male_population)

Coefficients:
   (Intercept)  PC_asbestos_kg  
      -0.07893         0.14438  

> summary(model_lm)

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C450_males_AAMR_2010_2014_asbestos_1965, 
    weights = male_population)

Weighted Residuals:
    Min      1Q  Median      3Q     Max 
-6987.4  -520.1   -30.9   679.6  4573.0 

Coefficients:
               Estimate Std. Error t value Pr(>|t|)  
(Intercept)    -0.07893    0.15985  -0.494   0.6239  
PC_asbestos_kg  0.14438    0.06889   2.096   0.0417 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1923 on 45 degrees of freedom
Multiple R-squared:  0.08893,	Adjusted R-squared:  0.06869 
F-statistic: 4.393 on 1 and 45 DF,  p-value: 0.04175

> confint(model_lm, '(Intercept)', level=0.95)
                 2.5 %    97.5 %
(Intercept) -0.4008884 0.2430337
> confint(model_lm, 'PC_asbestos_kg', level=0.95)
                     2.5 %    97.5 %
PC_asbestos_kg 0.005632523 0.2831367
> se = sqrt(diag(vcov(model_lm)))
> se
   (Intercept) PC_asbestos_kg 
    0.15985327     0.06889026 
> AIC(model_lm)
[1] 128.3857
> BIC(model_lm)
[1] 133.9362
> shapiro.test(residuals(model_lm))

	Shapiro-Wilk normality test

data:  residuals(model_lm)
W = 0.98552, p-value = 0.8213
###

jpeg(paste("Results/", data_name, "_model_lm_hist_residuals.jpg", sep=""), width=600, height=600)
hist(residuals(model_lm), main=paste("residuals for model_lm_", data_name, sep=""))
dev.off()
jpeg(paste("Results/", data_name, "_model_lm_qqplot_residuals.jpg", sep=""), width=600, height=600)
qqnorm( residuals(model_lm), pch=1, frame=FALSE, main=paste("Q-Q plot(model_lm_", data_name, ")", sep="") )
qqline( residuals(model_lm), col="steelblue", lwd=2 )
dev.off()

model_lm_C450_males_AAMR_2010_2014_asbestos_1965 = model_lm
model_name = "model_lm_C450_males_AAMR_2010_2014_asbestos_1965"
model_disease = "pleural mesothelioma"
model_gender = "males"
years_of_deaths = "2010-2014"
years_of_asbestos = "1965"
countries_included = "all"

num_points = nrow(mortasb)
y_intercept = model_lm$coefficients[[1]]
slope = model_lm$coefficients[[2]]
BO_CI1 = confint(model_lm, '(Intercept)', level=0.95)[[1]]
BO_CI2 = confint(model_lm, '(Intercept)', level=0.95)[[2]]
B0_SE = sqrt(diag(vcov(model_lm)))[[1]]
B0_p_value = summary(model_lm)$coefficients[7]
B1_CI1 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[1]]
B1_CI2 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[2]]
B1_SE = sqrt(diag(vcov(model_lm)))[[2]]
B1_p_value = summary(model_lm)$coefficients[8]
R_squared = summary(model_lm)$r.squared
adjusted_R_squared = summary(model_lm)$adj.r.squared
fstat = summary(model_lm)$fstatistic
if (is.null(fstat)) {
  p_value = 1
} else {
  p_value = pf(fstat[1], fstat[2], fstat[3], lower.tail=F)
}

#outline = paste(model_disease, model_gender, years_of_deaths, years_of_asbestos, num_points, countries_included, y_intercept, BO_CI1, BO_CI2, B0_SE, B0_p_value, slope, B1_CI1, B1_CI2, B1_SE, B1_p_value, adjusted_R_squared, p_value, sep="\t")
#write(outline, file=outfile_stats, append=TRUE)



##########
##### Analysis for males pleural mesothelioma C450 deaths 2010-2014 vs asbestos 1965, using only countries in 2007 paper

mort_asb5 = C450_males_AAMR_2010_2014_asbestos_1965

mort_asb6 = mort_asb5[(mort_asb5$Country_3char %in% paper2007_countries_for_C450_males),]

mortasb = mort_asb6

# nudge the country text on the plot
min_population = min(mortasb$population)
max_population = max(mortasb$population)
nudge_x_slope_m = (0.10 - 0.6) / (max_population - min_population)
nudge_x_intercept_b = 0.6 - nudge_x_slope_m * min_population
mortasb$nudge_x = 1 * (mortasb$population * nudge_x_slope_m + nudge_x_intercept_b)
mortasb$nudge_y = 0

#mortasb$nudge_x = ifelse( (mortasb$Country_3char=="NLD"), 0.2, mortasb$nudge_x )
#mortasb$nudge_y = ifelse( (mortasb$Country_3char=="TUN"), 0.01, mortasb$nudge_y )
#mortasb[,c("Country_Name", "Country_3char", "population", "AAMR_per_million", "nudge_x", "nudge_y")]

data_for_plot = mortasb
data_for_plot$nudge_x = NULL
data_for_plot$nudge_y = NULL

C450_males_AAMR_2010_2014_asbestos_1965_paper2007countries = data_for_plot
data_name = "C450_males_AAMR_2010_2014_asbestos_1965_paper2007countries"
plot_title = gsub( "_", " ", data_name )

file_name = paste("Results/", data_name, ".txt", sep="" )
plot_name = paste("Results/", data_name, ".png", sep="" )

ggplot(mortasb, aes(x=PC_asbestos_kg, y=AAMR_per_million, size=population)) + geom_point(colour="#4E8D24", shape=21) + 
  theme(axis.text.x=element_text(angle=0, vjust=0.5, hjust=1)) + scale_y_log10() + theme_bw() +
  theme(panel.border=element_blank(), panel.grid.major = element_blank(), panel.grid.minor=element_blank(), axis.line=element_line(colour="black")) +
  geom_text(label=mortasb$Country_3char, nudge_x=mortasb$nudge_x, nudge_y=mortasb$nudge_y, check_overlap=FALSE, size=3) +
  ggtitle(plot_title) + labs(x="1965 asbestos consumption (kg per head per year)", y="Deaths per million people per year 2010-2014")
ggsave(plot_name, width=8, height=5)

write.table( data_for_plot, file=file_name, quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE )

nrow(C450_males_AAMR_2010_2014_asbestos_1965_paper2007countries)

cor.test( C450_males_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg, C450_males_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10, method="pearson", use="complete.obs")

model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C450_males_AAMR_2010_2014_asbestos_1965_paper2007countries, weights=male_population)
model_lm
summary(model_lm)
confint(model_lm, '(Intercept)', level=0.95)
confint(model_lm, 'PC_asbestos_kg', level=0.95)
se = sqrt(diag(vcov(model_lm)))
se
AIC(model_lm)
BIC(model_lm)
shapiro.test(residuals(model_lm))

###
> nrow(C450_males_AAMR_2010_2014_asbestos_1965_paper2007countries)
[1] 26
> 
> cor.test( C450_males_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg, C450_males_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10, method="pearson", use="complete.obs")

	Pearson's product-moment correlation

data:  C450_males_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg and C450_males_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10
t = 3.2157, df = 24, p-value = 0.003698
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 0.2049511 0.7719990
sample estimates:
      cor 
0.5487396 

> 
> model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C450_males_AAMR_2010_2014_asbestos_1965_paper2007countries, weights=male_population)
> model_lm

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C450_males_AAMR_2010_2014_asbestos_1965_paper2007countries, 
    weights = male_population)

Coefficients:
   (Intercept)  PC_asbestos_kg  
      -0.06998         0.12226  

> summary(model_lm)

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C450_males_AAMR_2010_2014_asbestos_1965_paper2007countries, 
    weights = male_population)

Weighted Residuals:
    Min      1Q  Median      3Q     Max 
-6354.3  -756.1   272.7  1040.4  4707.4 

Coefficients:
               Estimate Std. Error t value Pr(>|t|)
(Intercept)    -0.06998    0.24380  -0.287    0.777
PC_asbestos_kg  0.12226    0.10015   1.221    0.234

Residual standard error: 2340 on 24 degrees of freedom
Multiple R-squared:  0.05846,	Adjusted R-squared:  0.01923 
F-statistic:  1.49 on 1 and 24 DF,  p-value: 0.2341

> confint(model_lm, '(Intercept)', level=0.95)
                2.5 %    97.5 %
(Intercept) -0.573164 0.4332123
> confint(model_lm, 'PC_asbestos_kg', level=0.95)
                     2.5 %    97.5 %
PC_asbestos_kg -0.08445058 0.3289619
> se = sqrt(diag(vcov(model_lm)))
> se
   (Intercept) PC_asbestos_kg 
     0.2438047      0.1001533 
> AIC(model_lm)
[1] 69.55145
> BIC(model_lm)
[1] 73.32574
> shapiro.test(residuals(model_lm))

	Shapiro-Wilk normality test

data:  residuals(model_lm)
W = 0.94701, p-value = 0.1972
###

jpeg(paste("Results/", data_name, "_model_lm_hist_residuals.jpg", sep=""), width=600, height=600)
hist(residuals(model_lm), main=paste("residuals for model_lm_", data_name, sep=""))
dev.off()
jpeg(paste("Results/", data_name, "_model_lm_qqplot_residuals.jpg", sep=""), width=600, height=600)
qqnorm( residuals(model_lm), pch=1, frame=FALSE, main=paste("Q-Q plot(model_lm_", data_name, ")", sep="") )
qqline( residuals(model_lm), col="steelblue", lwd=2 )
dev.off()

model_lm_C450_males_AAMR_2010_2014_asbestos_1965_paper2007countries = model_lm
model_name = "model_lm_C450_males_AAMR_2010_2014_asbestos_1965_paper2007countries"
model_disease = "pleural mesothelioma"
model_gender = "males"
years_of_deaths = "2010-2014"
years_of_asbestos = "1965"
countries_included = "paper 2007 countries"

num_points = nrow(mortasb)
y_intercept = model_lm$coefficients[[1]]
slope = model_lm$coefficients[[2]]
BO_CI1 = confint(model_lm, '(Intercept)', level=0.95)[[1]]
BO_CI2 = confint(model_lm, '(Intercept)', level=0.95)[[2]]
B0_SE = sqrt(diag(vcov(model_lm)))[[1]]
B0_p_value = summary(model_lm)$coefficients[7]
B1_CI1 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[1]]
B1_CI2 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[2]]
B1_SE = sqrt(diag(vcov(model_lm)))[[2]]
B1_p_value = summary(model_lm)$coefficients[8]
R_squared = summary(model_lm)$r.squared
adjusted_R_squared = summary(model_lm)$adj.r.squared
fstat = summary(model_lm)$fstatistic
if (is.null(fstat)) {
  p_value = 1
} else {
  p_value = pf(fstat[1], fstat[2], fstat[3], lower.tail=F)
}

outline = paste(model_disease, model_gender, years_of_deaths, years_of_asbestos, num_points, countries_included, y_intercept, BO_CI1, BO_CI2, B0_SE, B0_p_value, slope, B1_CI1, B1_CI2, B1_SE, B1_p_value, adjusted_R_squared, p_value, sep="\t")
write(outline, file=outfile_stats, append=TRUE)



##########
##### Analysis for females pleural mesothelioma C450 deaths 2010-2014 vs asbestos 1965

mort1 = mort_2010_to_2014_C45_J61[((mort_2010_to_2014_C45_J61$Cause=="C450") & (mort_2010_to_2014_C45_J61$Sex==2) & (mort_2010_to_2014_C45_J61$deaths>0)),]
pop1 = pop_females_by_age_with_extra_countries

unique(mort1$Country_Name[(!(mort1$Country_Name %in% pop1$Country_Name))])

mort2 = merge( x=mort1, y=pop1, by=c("Country_Name", "Year", "age_group"), x.all=TRUE, y.all=FALSE )

mort2b = sqldf("select Country_Name, Country_3char, Year, age_group, sum(deaths), max(population) from mort2 where population > 0 group by Country_Name, Country_3char, Year, age_group")
colnames(mort2b) = c("Country_Name", "Country_3char", "Year", "age_group", "deaths", "population")
mort2b$death_rate_per_million = mort2b$deaths * 1000000 / mort2b$population

mort3 = merge( x=mort2b, y=std_pop, by=c("age_group"), x.all=TRUE, y.all=FALSE )
mort3$adjusted_death_rate_per_million = mort3$death_rate_per_million * mort3$WHO_World_Standard_rate

mort4 = sqldf('select Country_Name, Country_3char, Year, sum(adjusted_death_rate_per_million) from mort3 group by Country_Name, Country_3char, Year')
names(mort4)[names(mort4)=="sum(adjusted_death_rate_per_million)"] = "AAMR_per_million"

mort6 = sqldf('select Country_Name, Country_3char, avg(AAMR_per_million) from mort4 group by Country_Name, Country_3char')
names(mort6)[names(mort6)=="avg(AAMR_per_million)"] = "AAMR_per_million"

mort6$Country_Name[(!(mort6$Country_Name %in% PC_asbestos_1965$Country_Name))]
PC_asbestos_1965$Country_Name[(!(PC_asbestos_1965$Country_Name %in% mort6$Country_Name))]

mort_asb1 = merge( x=mort6, y=PC_asbestos_1965, by=c("Country_Name"), all.x=FALSE, all.y=FALSE )
mort_asb1$Production = NULL
mort_asb1$Imports = NULL
mort_asb1$Exports = NULL
mort_asb1$Apparent_consumption = NULL
mort_asb1$Year = NULL
mort_asb1$AAMR_per_million_log10 = log10(mort_asb1$AAMR_per_million)

pop2 = pop_females[(pop_females$Year==1965),]

mort_asb3 = merge( x=mort_asb1, y=pop2, by=c("Country_Name"), all.x=TRUE, all.y=FALSE )

mortasb = mort_asb3

# nudge the country text on the plot
min_population = min(mortasb$population)
max_population = max(mortasb$population)
nudge_x_slope_m = (0.10 - 0.6) / (max_population - min_population)
nudge_x_intercept_b = 0.6 - nudge_x_slope_m * min_population
mortasb$nudge_x = 1 * (mortasb$population * nudge_x_slope_m + nudge_x_intercept_b)
mortasb$nudge_y = 0

#mortasb$nudge_x = ifelse( (mortasb$Country_3char=="NLD"), 0.2, mortasb$nudge_x )
#mortasb$nudge_y = ifelse( (mortasb$Country_3char=="TUN"), 0.01, mortasb$nudge_y )
#mortasb[,c("Country_Name", "Country_3char", "population", "AAMR_per_million", "nudge_x", "nudge_y")]

data_for_plot = mortasb
data_for_plot$nudge_x = NULL
data_for_plot$nudge_y = NULL

C450_females_AAMR_2010_2014_asbestos_1965 = data_for_plot
data_name = "C450_females_AAMR_2010_2014_asbestos_1965"
plot_title = gsub( "_", " ", data_name )

file_name = paste("Results/", data_name, ".txt", sep="" )
plot_name = paste("Results/", data_name, ".png", sep="" )

ggplot(mortasb, aes(x=PC_asbestos_kg, y=AAMR_per_million, size=population)) + geom_point(colour="#4E8D24", shape=21) + 
  theme(axis.text.x=element_text(angle=0, vjust=0.5, hjust=1)) + scale_y_log10() + theme_bw() +
  theme(panel.border=element_blank(), panel.grid.major = element_blank(), panel.grid.minor=element_blank(), axis.line=element_line(colour="black")) +
  geom_text(label=mortasb$Country_3char, nudge_x=mortasb$nudge_x, nudge_y=mortasb$nudge_y, check_overlap=FALSE, size=3) +
  ggtitle(plot_title) + labs(x="1965 asbestos consumption (kg per head per year)", y="Deaths per million people per year 2010-2014")
ggsave(plot_name, width=8, height=5)

write.table( data_for_plot, file=file_name, quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE )

nrow(C450_females_AAMR_2010_2014_asbestos_1965)

cor.test( C450_females_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg, C450_females_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10, method="pearson", use="complete.obs")

model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C450_females_AAMR_2010_2014_asbestos_1965, weights=female_population)
model_lm
summary(model_lm)
confint(model_lm, '(Intercept)', level=0.95)
confint(model_lm, 'PC_asbestos_kg', level=0.95)
se = sqrt(diag(vcov(model_lm)))
se
AIC(model_lm)
BIC(model_lm)
shapiro.test(residuals(model_lm))

###
> nrow(C450_females_AAMR_2010_2014_asbestos_1965)
[1] 44
> 
> cor.test( C450_females_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg, C450_females_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10, method="pearson", use="complete.obs")

	Pearson's product-moment correlation

data:  C450_females_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg and C450_females_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10
t = 3.0322, df = 42, p-value = 0.004149
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 0.1451720 0.6401305
sample estimates:
      cor 
0.4237877 

> 
> model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C450_females_AAMR_2010_2014_asbestos_1965, weights=female_population)
> model_lm

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C450_females_AAMR_2010_2014_asbestos_1965, 
    weights = female_population)

Coefficients:
   (Intercept)  PC_asbestos_kg  
      -0.47551         0.05247  

> summary(model_lm)

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C450_females_AAMR_2010_2014_asbestos_1965, 
    weights = female_population)

Weighted Residuals:
    Min      1Q  Median      3Q     Max 
-6694.4  -209.2   192.3   768.2  4848.7 

Coefficients:
               Estimate Std. Error t value Pr(>|t|)   
(Intercept)    -0.47551    0.15291  -3.110  0.00336 **
PC_asbestos_kg  0.05247    0.06609   0.794  0.43170   
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1886 on 42 degrees of freedom
Multiple R-squared:  0.01479,	Adjusted R-squared:  -0.008672 
F-statistic: 0.6303 on 1 and 42 DF,  p-value: 0.4317

> confint(model_lm, '(Intercept)', level=0.95)
                 2.5 %     97.5 %
(Intercept) -0.7840879 -0.1669279
> confint(model_lm, 'PC_asbestos_kg', level=0.95)
                     2.5 %    97.5 %
PC_asbestos_kg -0.08090839 0.1858536
> se = sqrt(diag(vcov(model_lm)))
> se
   (Intercept) PC_asbestos_kg 
    0.15290757     0.06609296 
> AIC(model_lm)
[1] 112.1704
> BIC(model_lm)
[1] 117.523
> shapiro.test(residuals(model_lm))

	Shapiro-Wilk normality test

data:  residuals(model_lm)
W = 0.98252, p-value = 0.7343
###

jpeg(paste("Results/", data_name, "_model_lm_hist_residuals.jpg", sep=""), width=600, height=600)
hist(residuals(model_lm), main=paste("residuals for model_lm_", data_name, sep=""))
dev.off()
jpeg(paste("Results/", data_name, "_model_lm_qqplot_residuals.jpg", sep=""), width=600, height=600)
qqnorm( residuals(model_lm), pch=1, frame=FALSE, main=paste("Q-Q plot(model_lm_", data_name, ")", sep="") )
qqline( residuals(model_lm), col="steelblue", lwd=2 )
dev.off()

model_lm_C450_females_AAMR_2010_2014_asbestos_1965 = model_lm
model_name = "model_lm_C450_females_AAMR_2010_2014_asbestos_1965"
model_disease = "pleural mesothelioma"
model_gender = "females"
years_of_deaths = "2010-2014"
years_of_asbestos = "1965"
countries_included = "all"

num_points = nrow(mortasb)
y_intercept = model_lm$coefficients[[1]]
slope = model_lm$coefficients[[2]]
BO_CI1 = confint(model_lm, '(Intercept)', level=0.95)[[1]]
BO_CI2 = confint(model_lm, '(Intercept)', level=0.95)[[2]]
B0_SE = sqrt(diag(vcov(model_lm)))[[1]]
B0_p_value = summary(model_lm)$coefficients[7]
B1_CI1 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[1]]
B1_CI2 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[2]]
B1_SE = sqrt(diag(vcov(model_lm)))[[2]]
B1_p_value = summary(model_lm)$coefficients[8]
R_squared = summary(model_lm)$r.squared
adjusted_R_squared = summary(model_lm)$adj.r.squared
fstat = summary(model_lm)$fstatistic
if (is.null(fstat)) {
  p_value = 1
} else {
  p_value = pf(fstat[1], fstat[2], fstat[3], lower.tail=F)
}

#outline = paste(model_disease, model_gender, years_of_deaths, years_of_asbestos, num_points, countries_included, y_intercept, BO_CI1, BO_CI2, B0_SE, B0_p_value, slope, B1_CI1, B1_CI2, B1_SE, B1_p_value, adjusted_R_squared, p_value, sep="\t")
#write(outline, file=outfile_stats, append=TRUE)



##########
##### Analysis for females pleural mesothelioma C450 deaths 2010-2014 vs asbestos 1965, using only countries in 2007 paper

mort_asb5 = C450_females_AAMR_2010_2014_asbestos_1965

mort_asb6 = mort_asb5[(mort_asb5$Country_3char %in% paper2007_countries_for_C450_females),]

mortasb = mort_asb6

# nudge the country text on the plot
min_population = min(mortasb$population)
max_population = max(mortasb$population)
nudge_x_slope_m = (0.10 - 0.6) / (max_population - min_population)
nudge_x_intercept_b = 0.6 - nudge_x_slope_m * min_population
mortasb$nudge_x = 1 * (mortasb$population * nudge_x_slope_m + nudge_x_intercept_b)
mortasb$nudge_y = 0

#mortasb$nudge_x = ifelse( (mortasb$Country_3char=="NLD"), 0.2, mortasb$nudge_x )
#mortasb$nudge_y = ifelse( (mortasb$Country_3char=="TUN"), 0.01, mortasb$nudge_y )
#mortasb[,c("Country_Name", "Country_3char", "population", "AAMR_per_million", "nudge_x", "nudge_y")]

data_for_plot = mortasb
data_for_plot$nudge_x = NULL
data_for_plot$nudge_y = NULL

C450_females_AAMR_2010_2014_asbestos_1965_paper2007countries = data_for_plot
data_name = "C450_females_AAMR_2010_2014_asbestos_1965_paper2007countries"
plot_title = gsub( "_", " ", data_name )

file_name = paste("Results/", data_name, ".txt", sep="" )
plot_name = paste("Results/", data_name, ".png", sep="" )

ggplot(mortasb, aes(x=PC_asbestos_kg, y=AAMR_per_million, size=population)) + geom_point(colour="#4E8D24", shape=21) + 
  theme(axis.text.x=element_text(angle=0, vjust=0.5, hjust=1)) + scale_y_log10() + theme_bw() +
  theme(panel.border=element_blank(), panel.grid.major = element_blank(), panel.grid.minor=element_blank(), axis.line=element_line(colour="black")) +
  geom_text(label=mortasb$Country_3char, nudge_x=mortasb$nudge_x, nudge_y=mortasb$nudge_y, check_overlap=FALSE, size=3) +
  ggtitle(plot_title) + labs(x="1965 asbestos consumption (kg per head per year)", y="Deaths per million people per year 2010-2014")
ggsave(plot_name, width=8, height=5)

write.table( data_for_plot, file=file_name, quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE )

nrow(C450_females_AAMR_2010_2014_asbestos_1965_paper2007countries)

cor.test( C450_females_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg, C450_females_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10, method="pearson", use="complete.obs")

model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C450_females_AAMR_2010_2014_asbestos_1965_paper2007countries, weights=female_population)
model_lm
summary(model_lm)
confint(model_lm, '(Intercept)', level=0.95)
confint(model_lm, 'PC_asbestos_kg', level=0.95)
se = sqrt(diag(vcov(model_lm)))
se
AIC(model_lm)
BIC(model_lm)
shapiro.test(residuals(model_lm))

###
> nrow(C450_females_AAMR_2010_2014_asbestos_1965_paper2007countries)
[1] 23
> 
> cor.test( C450_females_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg, C450_females_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10, method="pearson", use="complete.obs")

	Pearson's product-moment correlation

data:  C450_females_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg and C450_females_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10
t = 1.091, df = 21, p-value = 0.2876
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 -0.1996526  0.5877043
sample estimates:
      cor 
0.2316105 

> 
> model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C450_females_AAMR_2010_2014_asbestos_1965_paper2007countries, weights=female_population)
> model_lm

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C450_females_AAMR_2010_2014_asbestos_1965_paper2007countries, 
    weights = female_population)

Coefficients:
   (Intercept)  PC_asbestos_kg  
      -0.36566        -0.01023  

> summary(model_lm)

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C450_females_AAMR_2010_2014_asbestos_1965_paper2007countries, 
    weights = female_population)

Weighted Residuals:
    Min      1Q  Median      3Q     Max 
-5729.4  -305.8   256.8  1334.1  4343.6 

Coefficients:
               Estimate Std. Error t value Pr(>|t|)
(Intercept)    -0.36566    0.23373  -1.564    0.133
PC_asbestos_kg -0.01023    0.09507  -0.108    0.915

Residual standard error: 2189 on 21 degrees of freedom
Multiple R-squared:  0.0005514,	Adjusted R-squared:  -0.04704 
F-statistic: 0.01158 on 1 and 21 DF,  p-value: 0.9153

> confint(model_lm, '(Intercept)', level=0.95)
                 2.5 %    97.5 %
(Intercept) -0.8517337 0.1204111
> confint(model_lm, 'PC_asbestos_kg', level=0.95)
                    2.5 %    97.5 %
PC_asbestos_kg -0.2079344 0.1874697
> se = sqrt(diag(vcov(model_lm)))
> se
   (Intercept) PC_asbestos_kg 
     0.2337320      0.0950667 
> AIC(model_lm)
[1] 54.65528
> BIC(model_lm)
[1] 58.06177
> shapiro.test(residuals(model_lm))

	Shapiro-Wilk normality test

data:  residuals(model_lm)
W = 0.94536, p-value = 0.2339
###

jpeg(paste("Results/", data_name, "_model_lm_hist_residuals.jpg", sep=""), width=600, height=600)
hist(residuals(model_lm), main=paste("residuals for model_lm_", data_name, sep=""))
dev.off()
jpeg(paste("Results/", data_name, "_model_lm_qqplot_residuals.jpg", sep=""), width=600, height=600)
qqnorm( residuals(model_lm), pch=1, frame=FALSE, main=paste("Q-Q plot(model_lm_", data_name, ")", sep="") )
qqline( residuals(model_lm), col="steelblue", lwd=2 )
dev.off()

model_lm_C450_females_AAMR_2010_2014_asbestos_1965_paper2007countries = model_lm
model_name = "model_lm_C450_females_AAMR_2010_2014_asbestos_1965_paper2007countries"
model_disease = "pleural mesothelioma"
model_gender = "females"
years_of_deaths = "2010-2014"
years_of_asbestos = "1965"
countries_included = "paper 2007 countries"

num_points = nrow(mortasb)
y_intercept = model_lm$coefficients[[1]]
slope = model_lm$coefficients[[2]]
BO_CI1 = confint(model_lm, '(Intercept)', level=0.95)[[1]]
BO_CI2 = confint(model_lm, '(Intercept)', level=0.95)[[2]]
B0_SE = sqrt(diag(vcov(model_lm)))[[1]]
B0_p_value = summary(model_lm)$coefficients[7]
B1_CI1 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[1]]
B1_CI2 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[2]]
B1_SE = sqrt(diag(vcov(model_lm)))[[2]]
B1_p_value = summary(model_lm)$coefficients[8]
R_squared = summary(model_lm)$r.squared
adjusted_R_squared = summary(model_lm)$adj.r.squared
fstat = summary(model_lm)$fstatistic
if (is.null(fstat)) {
  p_value = 1
} else {
  p_value = pf(fstat[1], fstat[2], fstat[3], lower.tail=F)
}

outline = paste(model_disease, model_gender, years_of_deaths, years_of_asbestos, num_points, countries_included, y_intercept, BO_CI1, BO_CI2, B0_SE, B0_p_value, slope, B1_CI1, B1_CI2, B1_SE, B1_p_value, adjusted_R_squared, p_value, sep="\t")
write(outline, file=outfile_stats, append=TRUE)



##########
##### Analysis for males peritoneal mesothelioma C451 deaths 2010-2014 vs asbestos 1965

mort1 = mort_2010_to_2014_C45_J61[((mort_2010_to_2014_C45_J61$Cause=="C451") & (mort_2010_to_2014_C45_J61$Sex==1) & (mort_2010_to_2014_C45_J61$deaths>0)),]
pop1 = pop_males_by_age_with_extra_countries

unique(mort1$Country_Name[(!(mort1$Country_Name %in% pop1$Country_Name))])

mort2 = merge( x=mort1, y=pop1, by=c("Country_Name", "Year", "age_group"), x.all=TRUE, y.all=FALSE )

mort2b = sqldf("select Country_Name, Country_3char, Year, age_group, sum(deaths), max(population) from mort2 where population > 0 group by Country_Name, Country_3char, Year, age_group")
colnames(mort2b) = c("Country_Name", "Country_3char", "Year", "age_group", "deaths", "population")
mort2b$death_rate_per_million = mort2b$deaths * 1000000 / mort2b$population

mort3 = merge( x=mort2b, y=std_pop, by=c("age_group"), x.all=TRUE, y.all=FALSE )
mort3$adjusted_death_rate_per_million = mort3$death_rate_per_million * mort3$WHO_World_Standard_rate

mort4 = sqldf('select Country_Name, Country_3char, Year, sum(adjusted_death_rate_per_million) from mort3 group by Country_Name, Country_3char, Year')
names(mort4)[names(mort4)=="sum(adjusted_death_rate_per_million)"] = "AAMR_per_million"

mort6 = sqldf('select Country_Name, Country_3char, avg(AAMR_per_million) from mort4 group by Country_Name, Country_3char')
names(mort6)[names(mort6)=="avg(AAMR_per_million)"] = "AAMR_per_million"

mort6$Country_Name[(!(mort6$Country_Name %in% PC_asbestos_1965$Country_Name))]
PC_asbestos_1965$Country_Name[(!(PC_asbestos_1965$Country_Name %in% mort6$Country_Name))]

mort_asb1 = merge( x=mort6, y=PC_asbestos_1965, by=c("Country_Name"), all.x=FALSE, all.y=FALSE )
mort_asb1$Production = NULL
mort_asb1$Imports = NULL
mort_asb1$Exports = NULL
mort_asb1$Apparent_consumption = NULL
mort_asb1$Year = NULL
mort_asb1$AAMR_per_million_log10 = log10(mort_asb1$AAMR_per_million)

pop2 = pop_males[(pop_males$Year==1965),]

mort_asb3 = merge( x=mort_asb1, y=pop2, by=c("Country_Name"), all.x=TRUE, all.y=FALSE )

mortasb = mort_asb3

# nudge the country text on the plot
min_population = min(mortasb$population)
max_population = max(mortasb$population)
nudge_x_slope_m = (0.10 - 0.6) / (max_population - min_population)
nudge_x_intercept_b = 0.6 - nudge_x_slope_m * min_population
mortasb$nudge_x = 1 * (mortasb$population * nudge_x_slope_m + nudge_x_intercept_b)
mortasb$nudge_y = 0

#mortasb$nudge_x = ifelse( (mortasb$Country_3char=="NLD"), 0.2, mortasb$nudge_x )
#mortasb$nudge_y = ifelse( (mortasb$Country_3char=="TUN"), 0.01, mortasb$nudge_y )
#mortasb[,c("Country_Name", "Country_3char", "population", "AAMR_per_million", "nudge_x", "nudge_y")]

data_for_plot = mortasb
data_for_plot$nudge_x = NULL
data_for_plot$nudge_y = NULL

C451_males_AAMR_2010_2014_asbestos_1965 = data_for_plot
data_name = "C451_males_AAMR_2010_2014_asbestos_1965"
plot_title = gsub( "_", " ", data_name )

file_name = paste("Results/", data_name, ".txt", sep="" )
plot_name = paste("Results/", data_name, ".png", sep="" )

ggplot(mortasb, aes(x=PC_asbestos_kg, y=AAMR_per_million, size=population)) + geom_point(colour="#4E8D24", shape=21) + 
  theme(axis.text.x=element_text(angle=0, vjust=0.5, hjust=1)) + scale_y_log10() + theme_bw() +
  theme(panel.border=element_blank(), panel.grid.major = element_blank(), panel.grid.minor=element_blank(), axis.line=element_line(colour="black")) +
  geom_text(label=mortasb$Country_3char, nudge_x=mortasb$nudge_x, nudge_y=mortasb$nudge_y, check_overlap=FALSE, size=3) +
  ggtitle(plot_title) + labs(x="1965 asbestos consumption (kg per head per year)", y="Deaths per million people per year 2010-2014")
ggsave(plot_name, width=8, height=5)

write.table( data_for_plot, file=file_name, quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE )

nrow(C451_males_AAMR_2010_2014_asbestos_1965)

cor.test( C451_males_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg, C451_males_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10, method="pearson", use="complete.obs")

model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C451_males_AAMR_2010_2014_asbestos_1965, weights=male_population)
model_lm
summary(model_lm)
confint(model_lm, '(Intercept)', level=0.95)
confint(model_lm, 'PC_asbestos_kg', level=0.95)
se = sqrt(diag(vcov(model_lm)))
se
AIC(model_lm)
BIC(model_lm)
shapiro.test(residuals(model_lm))

###
> nrow(C451_males_AAMR_2010_2014_asbestos_1965)
[1] 43
> 
> cor.test( C451_males_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg, C451_males_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10, method="pearson", use="complete.obs")

	Pearson's product-moment correlation

data:  C451_males_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg and C451_males_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10
t = 4.4455, df = 41, p-value = 0.00006538
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 0.3257468 0.7433198
sample estimates:
      cor 
0.5702952 

> 
> model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C451_males_AAMR_2010_2014_asbestos_1965, weights=male_population)
> model_lm

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C451_males_AAMR_2010_2014_asbestos_1965, 
    weights = male_population)

Coefficients:
   (Intercept)  PC_asbestos_kg  
       -0.8121          0.1572  

> summary(model_lm)

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C451_males_AAMR_2010_2014_asbestos_1965, 
    weights = male_population)

Weighted Residuals:
    Min      1Q  Median      3Q     Max 
-2129.7  -193.1   231.1   571.9  1798.7 

Coefficients:
               Estimate Std. Error t value           Pr(>|t|)    
(Intercept)    -0.81215    0.07213 -11.259 0.0000000000000404 ***
PC_asbestos_kg  0.15719    0.03072   5.116 0.0000077173503739 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 839 on 41 degrees of freedom
Multiple R-squared:  0.3896,	Adjusted R-squared:  0.3748 
F-statistic: 26.17 on 1 and 41 DF,  p-value: 0.000007717

> confint(model_lm, '(Intercept)', level=0.95)
                 2.5 %     97.5 %
(Intercept) -0.9578257 -0.6664734
> confint(model_lm, 'PC_asbestos_kg', level=0.95)
                    2.5 %    97.5 %
PC_asbestos_kg 0.09513815 0.2192389
> se = sqrt(diag(vcov(model_lm)))
> se
   (Intercept) PC_asbestos_kg 
    0.07213331     0.03072498 
> AIC(model_lm)
[1] 42.97662
> BIC(model_lm)
[1] 48.26022
> shapiro.test(residuals(model_lm))

	Shapiro-Wilk normality test

data:  residuals(model_lm)
W = 0.98949, p-value = 0.9589
###

jpeg(paste("Results/", data_name, "_model_lm_hist_residuals.jpg", sep=""), width=600, height=600)
hist(residuals(model_lm), main=paste("residuals for model_lm_", data_name, sep=""))
dev.off()
jpeg(paste("Results/", data_name, "_model_lm_qqplot_residuals.jpg", sep=""), width=600, height=600)
qqnorm( residuals(model_lm), pch=1, frame=FALSE, main=paste("Q-Q plot(model_lm_", data_name, ")", sep="") )
qqline( residuals(model_lm), col="steelblue", lwd=2 )
dev.off()

model_lm_C451_males_AAMR_2010_2014_asbestos_1965 = model_lm
model_name = "model_lm_C451_males_AAMR_2010_2014_asbestos_1965"
model_disease = "peritoneal mesothelioma"
model_gender = "males"
years_of_deaths = "2010-2014"
years_of_asbestos = "1965"
countries_included = "all"

num_points = nrow(mortasb)
y_intercept = model_lm$coefficients[[1]]
slope = model_lm$coefficients[[2]]
BO_CI1 = confint(model_lm, '(Intercept)', level=0.95)[[1]]
BO_CI2 = confint(model_lm, '(Intercept)', level=0.95)[[2]]
B0_SE = sqrt(diag(vcov(model_lm)))[[1]]
B0_p_value = summary(model_lm)$coefficients[7]
B1_CI1 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[1]]
B1_CI2 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[2]]
B1_SE = sqrt(diag(vcov(model_lm)))[[2]]
B1_p_value = summary(model_lm)$coefficients[8]
R_squared = summary(model_lm)$r.squared
adjusted_R_squared = summary(model_lm)$adj.r.squared
fstat = summary(model_lm)$fstatistic
if (is.null(fstat)) {
  p_value = 1
} else {
  p_value = pf(fstat[1], fstat[2], fstat[3], lower.tail=F)
}

#outline = paste(model_disease, model_gender, years_of_deaths, years_of_asbestos, num_points, countries_included, y_intercept, BO_CI1, BO_CI2, B0_SE, B0_p_value, slope, B1_CI1, B1_CI2, B1_SE, B1_p_value, adjusted_R_squared, p_value, sep="\t")
#write(outline, file=outfile_stats, append=TRUE)



##########
##### Analysis for males peritoneal mesothelioma C451 deaths 2010-2014 vs asbestos 1965, using only countries in 2007 paper

mort_asb5 = C451_males_AAMR_2010_2014_asbestos_1965

mort_asb6 = mort_asb5[(mort_asb5$Country_3char %in% paper2007_countries_for_C451_males),]

mortasb = mort_asb6

# nudge the country text on the plot
min_population = min(mortasb$population)
max_population = max(mortasb$population)
nudge_x_slope_m = (0.10 - 0.6) / (max_population - min_population)
nudge_x_intercept_b = 0.6 - nudge_x_slope_m * min_population
mortasb$nudge_x = 1 * (mortasb$population * nudge_x_slope_m + nudge_x_intercept_b)
mortasb$nudge_y = 0

#mortasb$nudge_x = ifelse( (mortasb$Country_3char=="NLD"), 0.2, mortasb$nudge_x )
#mortasb$nudge_y = ifelse( (mortasb$Country_3char=="TUN"), 0.01, mortasb$nudge_y )
#mortasb[,c("Country_Name", "Country_3char", "population", "AAMR_per_million", "nudge_x", "nudge_y")]

data_for_plot = mortasb
data_for_plot$nudge_x = NULL
data_for_plot$nudge_y = NULL

C451_males_AAMR_2010_2014_asbestos_1965_paper2007countries = data_for_plot
data_name = "C451_males_AAMR_2010_2014_asbestos_1965_paper2007countries"
plot_title = gsub( "_", " ", data_name )

file_name = paste("Results/", data_name, ".txt", sep="" )
plot_name = paste("Results/", data_name, ".png", sep="" )

ggplot(mortasb, aes(x=PC_asbestos_kg, y=AAMR_per_million, size=population)) + geom_point(colour="#4E8D24", shape=21) + 
  theme(axis.text.x=element_text(angle=0, vjust=0.5, hjust=1)) + scale_y_log10() + theme_bw() +
  theme(panel.border=element_blank(), panel.grid.major = element_blank(), panel.grid.minor=element_blank(), axis.line=element_line(colour="black")) +
  geom_text(label=mortasb$Country_3char, nudge_x=mortasb$nudge_x, nudge_y=mortasb$nudge_y, check_overlap=FALSE, size=3) +
  ggtitle(plot_title) + labs(x="1965 asbestos consumption (kg per head per year)", y="Deaths per million people per year 2010-2014")
ggsave(plot_name, width=8, height=5)

write.table( data_for_plot, file=file_name, quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE )

nrow(C451_males_AAMR_2010_2014_asbestos_1965_paper2007countries)

cor.test( C451_males_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg, C451_males_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10, method="pearson", use="complete.obs")

model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C451_males_AAMR_2010_2014_asbestos_1965_paper2007countries, weights=male_population)
model_lm
summary(model_lm)
confint(model_lm, '(Intercept)', level=0.95)
confint(model_lm, 'PC_asbestos_kg', level=0.95)
se = sqrt(diag(vcov(model_lm)))
se
AIC(model_lm)
BIC(model_lm)
shapiro.test(residuals(model_lm))

###
> nrow(C451_males_AAMR_2010_2014_asbestos_1965_paper2007countries)
[1] 24
> 
> cor.test( C451_males_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg, C451_males_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10, method="pearson", use="complete.obs")

	Pearson's product-moment correlation

data:  C451_males_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg and C451_males_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10
t = 4.5165, df = 22, p-value = 0.0001709
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 0.4029818 0.8571767
sample estimates:
      cor 
0.6936222 

> 
> model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C451_males_AAMR_2010_2014_asbestos_1965_paper2007countries, weights=male_population)
> model_lm

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C451_males_AAMR_2010_2014_asbestos_1965_paper2007countries, 
    weights = male_population)

Coefficients:
   (Intercept)  PC_asbestos_kg  
       -0.8795          0.1770  

> summary(model_lm)

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C451_males_AAMR_2010_2014_asbestos_1965_paper2007countries, 
    weights = male_population)

Weighted Residuals:
    Min      1Q  Median      3Q     Max 
-1755.3  -204.4   193.0   475.3  1591.8 

Coefficients:
               Estimate Std. Error t value      Pr(>|t|)    
(Intercept)    -0.87951    0.09599  -9.162 0.00000000579 ***
PC_asbestos_kg  0.17700    0.03908   4.529      0.000166 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 889.6 on 22 degrees of freedom
Multiple R-squared:  0.4825,	Adjusted R-squared:  0.459 
F-statistic: 20.51 on 1 and 22 DF,  p-value: 0.0001657

> confint(model_lm, '(Intercept)', level=0.95)
                2.5 %     97.5 %
(Intercept) -1.078589 -0.6804296
> confint(model_lm, 'PC_asbestos_kg', level=0.95)
                    2.5 %    97.5 %
PC_asbestos_kg 0.09594814 0.2580463
> se = sqrt(diag(vcov(model_lm)))
> se
   (Intercept) PC_asbestos_kg 
    0.09599416     0.03908103 
> AIC(model_lm)
[1] 16.10966
> BIC(model_lm)
[1] 19.64383
> shapiro.test(residuals(model_lm))

	Shapiro-Wilk normality test

data:  residuals(model_lm)
W = 0.96731, p-value = 0.6011
###

jpeg(paste("Results/", data_name, "_model_lm_hist_residuals.jpg", sep=""), width=600, height=600)
hist(residuals(model_lm), main=paste("residuals for model_lm_", data_name, sep=""))
dev.off()
jpeg(paste("Results/", data_name, "_model_lm_qqplot_residuals.jpg", sep=""), width=600, height=600)
qqnorm( residuals(model_lm), pch=1, frame=FALSE, main=paste("Q-Q plot(model_lm_", data_name, ")", sep="") )
qqline( residuals(model_lm), col="steelblue", lwd=2 )
dev.off()

model_lm_C451_males_AAMR_2010_2014_asbestos_1965_paper2007countries = model_lm
model_name = "model_lm_C451_males_AAMR_2010_2014_asbestos_1965_paper2007countries"
model_disease = "peritoneal mesothelioma"
model_gender = "males"
years_of_deaths = "2010-2014"
years_of_asbestos = "1965"
countries_included = "paper 2007 countries"

num_points = nrow(mortasb)
y_intercept = model_lm$coefficients[[1]]
slope = model_lm$coefficients[[2]]
BO_CI1 = confint(model_lm, '(Intercept)', level=0.95)[[1]]
BO_CI2 = confint(model_lm, '(Intercept)', level=0.95)[[2]]
B0_SE = sqrt(diag(vcov(model_lm)))[[1]]
B0_p_value = summary(model_lm)$coefficients[7]
B1_CI1 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[1]]
B1_CI2 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[2]]
B1_SE = sqrt(diag(vcov(model_lm)))[[2]]
B1_p_value = summary(model_lm)$coefficients[8]
R_squared = summary(model_lm)$r.squared
adjusted_R_squared = summary(model_lm)$adj.r.squared
fstat = summary(model_lm)$fstatistic
if (is.null(fstat)) {
  p_value = 1
} else {
  p_value = pf(fstat[1], fstat[2], fstat[3], lower.tail=F)
}

outline = paste(model_disease, model_gender, years_of_deaths, years_of_asbestos, num_points, countries_included, y_intercept, BO_CI1, BO_CI2, B0_SE, B0_p_value, slope, B1_CI1, B1_CI2, B1_SE, B1_p_value, adjusted_R_squared, p_value, sep="\t")
write(outline, file=outfile_stats, append=TRUE)



##########
##### Analysis for females peritoneal mesothelioma C451 deaths 2010-2014 vs asbestos 1965

mort1 = mort_2010_to_2014_C45_J61[((mort_2010_to_2014_C45_J61$Cause=="C451") & (mort_2010_to_2014_C45_J61$Sex==2) & (mort_2010_to_2014_C45_J61$deaths>0)),]
pop1 = pop_females_by_age_with_extra_countries

unique(mort1$Country_Name[(!(mort1$Country_Name %in% pop1$Country_Name))])

mort2 = merge( x=mort1, y=pop1, by=c("Country_Name", "Year", "age_group"), x.all=TRUE, y.all=FALSE )

mort2b = sqldf("select Country_Name, Country_3char, Year, age_group, sum(deaths), max(population) from mort2 where population > 0 group by Country_Name, Country_3char, Year, age_group")
colnames(mort2b) = c("Country_Name", "Country_3char", "Year", "age_group", "deaths", "population")
mort2b$death_rate_per_million = mort2b$deaths * 1000000 / mort2b$population

mort3 = merge( x=mort2b, y=std_pop, by=c("age_group"), x.all=TRUE, y.all=FALSE )
mort3$adjusted_death_rate_per_million = mort3$death_rate_per_million * mort3$WHO_World_Standard_rate

mort4 = sqldf('select Country_Name, Country_3char, Year, sum(adjusted_death_rate_per_million) from mort3 group by Country_Name, Country_3char, Year')
names(mort4)[names(mort4)=="sum(adjusted_death_rate_per_million)"] = "AAMR_per_million"

mort6 = sqldf('select Country_Name, Country_3char, avg(AAMR_per_million) from mort4 group by Country_Name, Country_3char')
names(mort6)[names(mort6)=="avg(AAMR_per_million)"] = "AAMR_per_million"

mort6$Country_Name[(!(mort6$Country_Name %in% PC_asbestos_1965$Country_Name))]
PC_asbestos_1965$Country_Name[(!(PC_asbestos_1965$Country_Name %in% mort6$Country_Name))]

mort_asb1 = merge( x=mort6, y=PC_asbestos_1965, by=c("Country_Name"), all.x=FALSE, all.y=FALSE )
mort_asb1$Production = NULL
mort_asb1$Imports = NULL
mort_asb1$Exports = NULL
mort_asb1$Apparent_consumption = NULL
mort_asb1$Year = NULL
mort_asb1$AAMR_per_million_log10 = log10(mort_asb1$AAMR_per_million)

pop2 = pop_females[(pop_females$Year==1965),]

mort_asb3 = merge( x=mort_asb1, y=pop2, by=c("Country_Name"), all.x=TRUE, all.y=FALSE )

mortasb = mort_asb3

# nudge the country text on the plot
min_population = min(mortasb$population)
max_population = max(mortasb$population)
nudge_x_slope_m = (0.10 - 0.6) / (max_population - min_population)
nudge_x_intercept_b = 0.6 - nudge_x_slope_m * min_population
mortasb$nudge_x = 1 * (mortasb$population * nudge_x_slope_m + nudge_x_intercept_b)
mortasb$nudge_y = 0

#mortasb$nudge_x = ifelse( (mortasb$Country_3char=="NLD"), 0.2, mortasb$nudge_x )
#mortasb$nudge_y = ifelse( (mortasb$Country_3char=="TUN"), 0.01, mortasb$nudge_y )
#mortasb[,c("Country_Name", "Country_3char", "population", "AAMR_per_million", "nudge_x", "nudge_y")]

data_for_plot = mortasb
data_for_plot$nudge_x = NULL
data_for_plot$nudge_y = NULL

C451_females_AAMR_2010_2014_asbestos_1965 = data_for_plot
data_name = "C451_females_AAMR_2010_2014_asbestos_1965"
plot_title = gsub( "_", " ", data_name )

file_name = paste("Results/", data_name, ".txt", sep="" )
plot_name = paste("Results/", data_name, ".png", sep="" )

ggplot(mortasb, aes(x=PC_asbestos_kg, y=AAMR_per_million, size=population)) + geom_point(colour="#4E8D24", shape=21) + 
  theme(axis.text.x=element_text(angle=0, vjust=0.5, hjust=1)) + scale_y_log10() + theme_bw() +
  theme(panel.border=element_blank(), panel.grid.major = element_blank(), panel.grid.minor=element_blank(), axis.line=element_line(colour="black")) +
  geom_text(label=mortasb$Country_3char, nudge_x=mortasb$nudge_x, nudge_y=mortasb$nudge_y, check_overlap=FALSE, size=3) +
  ggtitle(plot_title) + labs(x="1965 asbestos consumption (kg per head per year)", y="Deaths per million people per year 2010-2014")
ggsave(plot_name, width=8, height=5)

write.table( data_for_plot, file=file_name, quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE )

nrow(C451_females_AAMR_2010_2014_asbestos_1965)

cor.test( C451_females_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg, C451_females_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10, method="pearson", use="complete.obs")

model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C451_females_AAMR_2010_2014_asbestos_1965, weights=female_population)
model_lm
summary(model_lm)
confint(model_lm, '(Intercept)', level=0.95)
confint(model_lm, 'PC_asbestos_kg', level=0.95)
se = sqrt(diag(vcov(model_lm)))
se
AIC(model_lm)
BIC(model_lm)
shapiro.test(residuals(model_lm))

###
> nrow(C451_females_AAMR_2010_2014_asbestos_1965)
[1] 44
> 
> cor.test( C451_females_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg, C451_females_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10, method="pearson", use="complete.obs")

	Pearson's product-moment correlation

data:  C451_females_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg and C451_females_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10
t = 2.3735, df = 42, p-value = 0.02227
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 0.05236502 0.58141844
sample estimates:
      cor 
0.3438991 

> 
> model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C451_females_AAMR_2010_2014_asbestos_1965, weights=female_population)
> model_lm

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C451_females_AAMR_2010_2014_asbestos_1965, 
    weights = female_population)

Coefficients:
   (Intercept)  PC_asbestos_kg  
      -0.92193         0.09371  

> summary(model_lm)

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C451_females_AAMR_2010_2014_asbestos_1965, 
    weights = female_population)

Weighted Residuals:
     Min       1Q   Median       3Q      Max 
-2023.12   -88.75   315.39   538.40  1598.16 

Coefficients:
               Estimate Std. Error t value             Pr(>|t|)    
(Intercept)    -0.92193    0.05835 -15.799 < 0.0000000000000002 ***
PC_asbestos_kg  0.09371    0.02508   3.736             0.000558 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 702.9 on 42 degrees of freedom
Multiple R-squared:  0.2494,	Adjusted R-squared:  0.2315 
F-statistic: 13.96 on 1 and 42 DF,  p-value: 0.0005581

> confint(model_lm, '(Intercept)', level=0.95)
                2.5 %     97.5 %
(Intercept) -1.039686 -0.8041656
> confint(model_lm, 'PC_asbestos_kg', level=0.95)
                    2.5 %    97.5 %
PC_asbestos_kg 0.04308656 0.1443274
> se = sqrt(diag(vcov(model_lm)))
> se
   (Intercept) PC_asbestos_kg 
    0.05835262     0.02508343 
> AIC(model_lm)
[1] 23.71984
> BIC(model_lm)
[1] 29.07241
> shapiro.test(residuals(model_lm))

	Shapiro-Wilk normality test

data:  residuals(model_lm)
W = 0.97951, p-value = 0.614
###

jpeg(paste("Results/", data_name, "_model_lm_hist_residuals.jpg", sep=""), width=600, height=600)
hist(residuals(model_lm), main=paste("residuals for model_lm_", data_name, sep=""))
dev.off()
jpeg(paste("Results/", data_name, "_model_lm_qqplot_residuals.jpg", sep=""), width=600, height=600)
qqnorm( residuals(model_lm), pch=1, frame=FALSE, main=paste("Q-Q plot(model_lm_", data_name, ")", sep="") )
qqline( residuals(model_lm), col="steelblue", lwd=2 )
dev.off()

model_lm_C451_females_AAMR_2010_2014_asbestos_1965 = model_lm
model_name = "model_lm_C451_females_AAMR_2010_2014_asbestos_1965"
model_disease = "peritoneal mesothelioma"
model_gender = "females"
years_of_deaths = "2010-2014"
years_of_asbestos = "1965"
countries_included = "all"

num_points = nrow(mortasb)
y_intercept = model_lm$coefficients[[1]]
slope = model_lm$coefficients[[2]]
BO_CI1 = confint(model_lm, '(Intercept)', level=0.95)[[1]]
BO_CI2 = confint(model_lm, '(Intercept)', level=0.95)[[2]]
B0_SE = sqrt(diag(vcov(model_lm)))[[1]]
B0_p_value = summary(model_lm)$coefficients[7]
B1_CI1 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[1]]
B1_CI2 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[2]]
B1_SE = sqrt(diag(vcov(model_lm)))[[2]]
B1_p_value = summary(model_lm)$coefficients[8]
R_squared = summary(model_lm)$r.squared
adjusted_R_squared = summary(model_lm)$adj.r.squared
fstat = summary(model_lm)$fstatistic
if (is.null(fstat)) {
  p_value = 1
} else {
  p_value = pf(fstat[1], fstat[2], fstat[3], lower.tail=F)
}

#outline = paste(model_disease, model_gender, years_of_deaths, years_of_asbestos, num_points, countries_included, y_intercept, BO_CI1, BO_CI2, B0_SE, B0_p_value, slope, B1_CI1, B1_CI2, B1_SE, B1_p_value, adjusted_R_squared, p_value, sep="\t")
#write(outline, file=outfile_stats, append=TRUE)



##########
##### Analysis for females peritoneal mesothelioma C451 deaths 2010-2014 vs asbestos 1965, using only countries in 2007 paper

mort_asb5 = C451_females_AAMR_2010_2014_asbestos_1965

mort_asb6 = mort_asb5[(mort_asb5$Country_3char %in% paper2007_countries_for_C451_females),]

mortasb = mort_asb6

# nudge the country text on the plot
min_population = min(mortasb$population)
max_population = max(mortasb$population)
nudge_x_slope_m = (0.10 - 0.6) / (max_population - min_population)
nudge_x_intercept_b = 0.6 - nudge_x_slope_m * min_population
mortasb$nudge_x = 1 * (mortasb$population * nudge_x_slope_m + nudge_x_intercept_b)
mortasb$nudge_y = 0

#mortasb$nudge_x = ifelse( (mortasb$Country_3char=="NLD"), 0.2, mortasb$nudge_x )
#mortasb$nudge_y = ifelse( (mortasb$Country_3char=="TUN"), 0.01, mortasb$nudge_y )
#mortasb[,c("Country_Name", "Country_3char", "population", "AAMR_per_million", "nudge_x", "nudge_y")]

data_for_plot = mortasb
data_for_plot$nudge_x = NULL
data_for_plot$nudge_y = NULL

C451_females_AAMR_2010_2014_asbestos_1965_paper2007countries = data_for_plot
data_name = "C451_females_AAMR_2010_2014_asbestos_1965_paper2007countries"
plot_title = gsub( "_", " ", data_name )

file_name = paste("Results/", data_name, ".txt", sep="" )
plot_name = paste("Results/", data_name, ".png", sep="" )

ggplot(mortasb, aes(x=PC_asbestos_kg, y=AAMR_per_million, size=population)) + geom_point(colour="#4E8D24", shape=21) + 
  theme(axis.text.x=element_text(angle=0, vjust=0.5, hjust=1)) + scale_y_log10() + theme_bw() +
  theme(panel.border=element_blank(), panel.grid.major = element_blank(), panel.grid.minor=element_blank(), axis.line=element_line(colour="black")) +
  geom_text(label=mortasb$Country_3char, nudge_x=mortasb$nudge_x, nudge_y=mortasb$nudge_y, check_overlap=FALSE, size=3) +
  ggtitle(plot_title) + labs(x="1965 asbestos consumption (kg per head per year)", y="Deaths per million people per year 2010-2014")
ggsave(plot_name, width=8, height=5)

write.table( data_for_plot, file=file_name, quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE )

nrow(C451_females_AAMR_2010_2014_asbestos_1965_paper2007countries)

cor.test( C451_females_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg, C451_females_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10, method="pearson", use="complete.obs")

model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C451_females_AAMR_2010_2014_asbestos_1965_paper2007countries, weights=female_population)
model_lm
summary(model_lm)
confint(model_lm, '(Intercept)', level=0.95)
confint(model_lm, 'PC_asbestos_kg', level=0.95)
se = sqrt(diag(vcov(model_lm)))
se
AIC(model_lm)
BIC(model_lm)
shapiro.test(residuals(model_lm))

###
> nrow(C451_females_AAMR_2010_2014_asbestos_1965_paper2007countries)
[1] 23
> 
> cor.test( C451_females_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg, C451_females_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10, method="pearson", use="complete.obs")

	Pearson's product-moment correlation

data:  C451_females_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg and C451_females_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10
t = 2.5606, df = 21, p-value = 0.01822
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 0.09461208 0.74932695
sample estimates:
      cor 
0.4877908 

> 
> model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=C451_females_AAMR_2010_2014_asbestos_1965_paper2007countries, weights=female_population)
> model_lm

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C451_females_AAMR_2010_2014_asbestos_1965_paper2007countries, 
    weights = female_population)

Coefficients:
   (Intercept)  PC_asbestos_kg  
       -1.0653          0.1348  

> summary(model_lm)

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = C451_females_AAMR_2010_2014_asbestos_1965_paper2007countries, 
    weights = female_population)

Weighted Residuals:
    Min      1Q  Median      3Q     Max 
-1467.3    -3.5   268.4   484.5   875.9 

Coefficients:
               Estimate Std. Error t value          Pr(>|t|)    
(Intercept)    -1.06526    0.06519 -16.342 0.000000000000204 ***
PC_asbestos_kg  0.13483    0.02649   5.089 0.000048553274782 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 604.2 on 21 degrees of freedom
Multiple R-squared:  0.5523,	Adjusted R-squared:  0.5309 
F-statistic:  25.9 on 1 and 21 DF,  p-value: 0.00004855

> confint(model_lm, '(Intercept)', level=0.95)
                2.5 %     97.5 %
(Intercept) -1.200826 -0.9296982
> confint(model_lm, 'PC_asbestos_kg', level=0.95)
                    2.5 %    97.5 %
PC_asbestos_kg 0.07973822 0.1899311
> se = sqrt(diag(vcov(model_lm)))
> se
   (Intercept) PC_asbestos_kg 
    0.06518701     0.02649360 
> AIC(model_lm)
[1] -3.650543
> BIC(model_lm)
[1] -0.24406
> shapiro.test(residuals(model_lm))

	Shapiro-Wilk normality test

data:  residuals(model_lm)
W = 0.93007, p-value = 0.1097
###

jpeg(paste("Results/", data_name, "_model_lm_hist_residuals.jpg", sep=""), width=600, height=600)
hist(residuals(model_lm), main=paste("residuals for model_lm_", data_name, sep=""))
dev.off()
jpeg(paste("Results/", data_name, "_model_lm_qqplot_residuals.jpg", sep=""), width=600, height=600)
qqnorm( residuals(model_lm), pch=1, frame=FALSE, main=paste("Q-Q plot(model_lm_", data_name, ")", sep="") )
qqline( residuals(model_lm), col="steelblue", lwd=2 )
dev.off()

model_lm_C451_females_AAMR_2010_2014_asbestos_1965_paper2007countries = model_lm
model_name = "model_lm_C451_females_AAMR_2010_2014_asbestos_1965_paper2007countries"
model_disease = "peritoneal mesothelioma"
model_gender = "females"
years_of_deaths = "2010-2014"
years_of_asbestos = "1965"
countries_included = "paper 2007 countries"

num_points = nrow(mortasb)
y_intercept = model_lm$coefficients[[1]]
slope = model_lm$coefficients[[2]]
BO_CI1 = confint(model_lm, '(Intercept)', level=0.95)[[1]]
BO_CI2 = confint(model_lm, '(Intercept)', level=0.95)[[2]]
B0_SE = sqrt(diag(vcov(model_lm)))[[1]]
B0_p_value = summary(model_lm)$coefficients[7]
B1_CI1 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[1]]
B1_CI2 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[2]]
B1_SE = sqrt(diag(vcov(model_lm)))[[2]]
B1_p_value = summary(model_lm)$coefficients[8]
R_squared = summary(model_lm)$r.squared
adjusted_R_squared = summary(model_lm)$adj.r.squared
fstat = summary(model_lm)$fstatistic
if (is.null(fstat)) {
  p_value = 1
} else {
  p_value = pf(fstat[1], fstat[2], fstat[3], lower.tail=F)
}

outline = paste(model_disease, model_gender, years_of_deaths, years_of_asbestos, num_points, countries_included, y_intercept, BO_CI1, BO_CI2, B0_SE, B0_p_value, slope, B1_CI1, B1_CI2, B1_SE, B1_p_value, adjusted_R_squared, p_value, sep="\t")
write(outline, file=outfile_stats, append=TRUE)



##########
##### Analysis for males asbestosis J61 deaths 2010-2014 vs asbestos 1965

mort1 = mort_2010_to_2014_C45_J61[((mort_2010_to_2014_C45_J61$Cause=="J61") & (mort_2010_to_2014_C45_J61$Sex==1) & (mort_2010_to_2014_C45_J61$deaths>0)),]
pop1 = pop_males_by_age_with_extra_countries

unique(mort1$Country_Name[(!(mort1$Country_Name %in% pop1$Country_Name))])

mort2 = merge( x=mort1, y=pop1, by=c("Country_Name", "Year", "age_group"), x.all=TRUE, y.all=FALSE )

mort2b = sqldf("select Country_Name, Country_3char, Year, age_group, sum(deaths), max(population) from mort2 where population > 0 group by Country_Name, Country_3char, Year, age_group")
colnames(mort2b) = c("Country_Name", "Country_3char", "Year", "age_group", "deaths", "population")
mort2b$death_rate_per_million = mort2b$deaths * 1000000 / mort2b$population

mort3 = merge( x=mort2b, y=std_pop, by=c("age_group"), x.all=TRUE, y.all=FALSE )
mort3$adjusted_death_rate_per_million = mort3$death_rate_per_million * mort3$WHO_World_Standard_rate

mort4 = sqldf('select Country_Name, Country_3char, Year, sum(adjusted_death_rate_per_million) from mort3 group by Country_Name, Country_3char, Year')
names(mort4)[names(mort4)=="sum(adjusted_death_rate_per_million)"] = "AAMR_per_million"

mort6 = sqldf('select Country_Name, Country_3char, avg(AAMR_per_million) from mort4 group by Country_Name, Country_3char')
names(mort6)[names(mort6)=="avg(AAMR_per_million)"] = "AAMR_per_million"

mort6$Country_Name[(!(mort6$Country_Name %in% PC_asbestos_1965$Country_Name))]
PC_asbestos_1965$Country_Name[(!(PC_asbestos_1965$Country_Name %in% mort6$Country_Name))]

mort_asb1 = merge( x=mort6, y=PC_asbestos_1965, by=c("Country_Name"), all.x=FALSE, all.y=FALSE )
mort_asb1$Production = NULL
mort_asb1$Imports = NULL
mort_asb1$Exports = NULL
mort_asb1$Apparent_consumption = NULL
mort_asb1$Year = NULL
mort_asb1$AAMR_per_million_log10 = log10(mort_asb1$AAMR_per_million)

pop2 = pop_males[(pop_males$Year==1965),]

mort_asb3 = merge( x=mort_asb1, y=pop2, by=c("Country_Name"), all.x=TRUE, all.y=FALSE )

mortasb = mort_asb3

# nudge the country text on the plot
min_population = min(mortasb$population)
max_population = max(mortasb$population)
nudge_x_slope_m = (0.10 - 0.6) / (max_population - min_population)
nudge_x_intercept_b = 0.6 - nudge_x_slope_m * min_population
mortasb$nudge_x = 1 * (mortasb$population * nudge_x_slope_m + nudge_x_intercept_b)
mortasb$nudge_y = 0

#mortasb$nudge_x = ifelse( (mortasb$Country_3char=="NLD"), 0.2, mortasb$nudge_x )
#mortasb$nudge_y = ifelse( (mortasb$Country_3char=="TUN"), 0.01, mortasb$nudge_y )
#mortasb[,c("Country_Name", "Country_3char", "population", "AAMR_per_million", "nudge_x", "nudge_y")]

data_for_plot = mortasb
data_for_plot$nudge_x = NULL
data_for_plot$nudge_y = NULL

J61_males_AAMR_2010_2014_asbestos_1965 = data_for_plot
data_name = "J61_males_AAMR_2010_2014_asbestos_1965"
plot_title = gsub( "_", " ", data_name )

file_name = paste("Results/", data_name, ".txt", sep="" )
plot_name = paste("Results/", data_name, ".png", sep="" )

ggplot(mortasb, aes(x=PC_asbestos_kg, y=AAMR_per_million, size=population)) + geom_point(colour="#4E8D24", shape=21) + 
  theme(axis.text.x=element_text(angle=0, vjust=0.5, hjust=1)) + scale_y_log10() + theme_bw() +
  theme(panel.border=element_blank(), panel.grid.major = element_blank(), panel.grid.minor=element_blank(), axis.line=element_line(colour="black")) +
  geom_text(label=mortasb$Country_3char, nudge_x=mortasb$nudge_x, nudge_y=mortasb$nudge_y, check_overlap=FALSE, size=3) +
  ggtitle(plot_title) + labs(x="1965 asbestos consumption (kg per head per year)", y="Deaths per million people per year 2010-2014")
ggsave(plot_name, width=8, height=5)

write.table( data_for_plot, file=file_name, quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE )

nrow(J61_males_AAMR_2010_2014_asbestos_1965)

cor.test( J61_males_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg, J61_males_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10, method="pearson", use="complete.obs")

model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=J61_males_AAMR_2010_2014_asbestos_1965, weights=male_population)
model_lm
summary(model_lm)
confint(model_lm, '(Intercept)', level=0.95)
confint(model_lm, 'PC_asbestos_kg', level=0.95)
se = sqrt(diag(vcov(model_lm)))
se
AIC(model_lm)
BIC(model_lm)
shapiro.test(residuals(model_lm))

###
> nrow(J61_males_AAMR_2010_2014_asbestos_1965)
[1] 50
> 
> cor.test( J61_males_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg, J61_males_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10, method="pearson", use="complete.obs")

	Pearson's product-moment correlation

data:  J61_males_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg and J61_males_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10
t = 4.871, df = 48, p-value = 0.00001249
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 0.3533673 0.7357119
sample estimates:
      cor 
0.5751444 

> 
> model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=J61_males_AAMR_2010_2014_asbestos_1965, weights=male_population)
> model_lm

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = J61_males_AAMR_2010_2014_asbestos_1965, 
    weights = male_population)

Coefficients:
   (Intercept)  PC_asbestos_kg  
       -1.0318          0.3485  

> summary(model_lm)

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = J61_males_AAMR_2010_2014_asbestos_1965, 
    weights = male_population)

Weighted Residuals:
    Min      1Q  Median      3Q     Max 
-1847.9  -779.9   -20.4   584.1  3948.5 

Coefficients:
               Estimate Std. Error t value             Pr(>|t|)    
(Intercept)    -1.03181    0.08061 -12.801 < 0.0000000000000002 ***
PC_asbestos_kg  0.34850    0.03592   9.702    0.000000000000676 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1096 on 48 degrees of freedom
Multiple R-squared:  0.6623,	Adjusted R-squared:  0.6552 
F-statistic: 94.13 on 1 and 48 DF,  p-value: 0.0000000000006757

> confint(model_lm, '(Intercept)', level=0.95)
                2.5 %     97.5 %
(Intercept) -1.193879 -0.8697371
> confint(model_lm, 'PC_asbestos_kg', level=0.95)
                   2.5 %    97.5 %
PC_asbestos_kg 0.2762739 0.4207195
> se = sqrt(diag(vcov(model_lm)))
> se
   (Intercept) PC_asbestos_kg 
    0.08060682     0.03592038 
> AIC(model_lm)
[1] 72.82427
> BIC(model_lm)
[1] 78.56034
> shapiro.test(residuals(model_lm))

	Shapiro-Wilk normality test

data:  residuals(model_lm)
W = 0.96675, p-value = 0.1702
###

jpeg(paste("Results/", data_name, "_model_lm_hist_residuals.jpg", sep=""), width=600, height=600)
hist(residuals(model_lm), main=paste("residuals for model_lm_", data_name, sep=""))
dev.off()
jpeg(paste("Results/", data_name, "_model_lm_qqplot_residuals.jpg", sep=""), width=600, height=600)
qqnorm( residuals(model_lm), pch=1, frame=FALSE, main=paste("Q-Q plot(model_lm_", data_name, ")", sep="") )
qqline( residuals(model_lm), col="steelblue", lwd=2 )
dev.off()

model_lm_J61_males_AAMR_2010_2014_asbestos_1965 = model_lm
model_name = "model_lm_J61_males_AAMR_2010_2014_asbestos_1965"
model_disease = "asbestosis"
model_gender = "males"
years_of_deaths = "2010-2014"
years_of_asbestos = "1965"
countries_included = "all"

num_points = nrow(mortasb)
y_intercept = model_lm$coefficients[[1]]
slope = model_lm$coefficients[[2]]
BO_CI1 = confint(model_lm, '(Intercept)', level=0.95)[[1]]
BO_CI2 = confint(model_lm, '(Intercept)', level=0.95)[[2]]
B0_SE = sqrt(diag(vcov(model_lm)))[[1]]
B0_p_value = summary(model_lm)$coefficients[7]
B1_CI1 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[1]]
B1_CI2 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[2]]
B1_SE = sqrt(diag(vcov(model_lm)))[[2]]
B1_p_value = summary(model_lm)$coefficients[8]
R_squared = summary(model_lm)$r.squared
adjusted_R_squared = summary(model_lm)$adj.r.squared
fstat = summary(model_lm)$fstatistic
if (is.null(fstat)) {
  p_value = 1
} else {
  p_value = pf(fstat[1], fstat[2], fstat[3], lower.tail=F)
}

#outline = paste(model_disease, model_gender, years_of_deaths, years_of_asbestos, num_points, countries_included, y_intercept, BO_CI1, BO_CI2, B0_SE, B0_p_value, slope, B1_CI1, B1_CI2, B1_SE, B1_p_value, adjusted_R_squared, p_value, sep="\t")
#write(outline, file=outfile_stats, append=TRUE)



##########
##### Analysis for males asbestosis J61 deaths 2010-2014 vs asbestos 1965, using only countries in 2007 paper

mort_asb5 = J61_males_AAMR_2010_2014_asbestos_1965

mort_asb6 = mort_asb5[(mort_asb5$Country_3char %in% paper2007_countries_for_J61_males),]

mortasb = mort_asb6

# nudge the country text on the plot
min_population = min(mortasb$population)
max_population = max(mortasb$population)
nudge_x_slope_m = (0.10 - 0.6) / (max_population - min_population)
nudge_x_intercept_b = 0.6 - nudge_x_slope_m * min_population
mortasb$nudge_x = 1 * (mortasb$population * nudge_x_slope_m + nudge_x_intercept_b)
mortasb$nudge_y = 0

#mortasb$nudge_x = ifelse( (mortasb$Country_3char=="NLD"), 0.2, mortasb$nudge_x )
#mortasb$nudge_y = ifelse( (mortasb$Country_3char=="TUN"), 0.01, mortasb$nudge_y )
#mortasb[,c("Country_Name", "Country_3char", "population", "AAMR_per_million", "nudge_x", "nudge_y")]

data_for_plot = mortasb
data_for_plot$nudge_x = NULL
data_for_plot$nudge_y = NULL

J61_males_AAMR_2010_2014_asbestos_1965_paper2007countries = data_for_plot
data_name = "J61_males_AAMR_2010_2014_asbestos_1965_paper2007countries"
plot_title = gsub( "_", " ", data_name )

file_name = paste("Results/", data_name, ".txt", sep="" )
plot_name = paste("Results/", data_name, ".png", sep="" )

ggplot(mortasb, aes(x=PC_asbestos_kg, y=AAMR_per_million, size=population)) + geom_point(colour="#4E8D24", shape=21) + 
  theme(axis.text.x=element_text(angle=0, vjust=0.5, hjust=1)) + scale_y_log10() + theme_bw() +
  theme(panel.border=element_blank(), panel.grid.major = element_blank(), panel.grid.minor=element_blank(), axis.line=element_line(colour="black")) +
  geom_text(label=mortasb$Country_3char, nudge_x=mortasb$nudge_x, nudge_y=mortasb$nudge_y, check_overlap=FALSE, size=3) +
  ggtitle(plot_title) + labs(x="1965 asbestos consumption (kg per head per year)", y="Deaths per million people per year 2010-2014")
ggsave(plot_name, width=8, height=5)

write.table( data_for_plot, file=file_name, quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE )

nrow(J61_males_AAMR_2010_2014_asbestos_1965_paper2007countries)

cor.test( J61_males_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg, J61_males_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10, method="pearson", use="complete.obs")

model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=J61_males_AAMR_2010_2014_asbestos_1965_paper2007countries, weights=male_population)
model_lm
summary(model_lm)
confint(model_lm, '(Intercept)', level=0.95)
confint(model_lm, 'PC_asbestos_kg', level=0.95)
se = sqrt(diag(vcov(model_lm)))
se
AIC(model_lm)
BIC(model_lm)
shapiro.test(residuals(model_lm))

###
> nrow(J61_males_AAMR_2010_2014_asbestos_1965_paper2007countries)
[1] 27
> 
> cor.test( J61_males_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg, J61_males_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10, method="pearson", use="complete.obs")

	Pearson's product-moment correlation

data:  J61_males_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg and J61_males_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10
t = 5.1688, df = 25, p-value = 0.00002409
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 0.4660206 0.8630371
sample estimates:
      cor 
0.7187483 

> 
> model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=J61_males_AAMR_2010_2014_asbestos_1965_paper2007countries, weights=male_population)
> model_lm

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = J61_males_AAMR_2010_2014_asbestos_1965_paper2007countries, 
    weights = male_population)

Coefficients:
   (Intercept)  PC_asbestos_kg  
       -1.1486          0.4044  

> summary(model_lm)

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = J61_males_AAMR_2010_2014_asbestos_1965_paper2007countries, 
    weights = male_population)

Weighted Residuals:
    Min      1Q  Median      3Q     Max 
-1887.9  -704.2  -150.4   618.7  1973.9 

Coefficients:
               Estimate Std. Error t value         Pr(>|t|)    
(Intercept)    -1.14858    0.09370  -12.26 0.00000000000455 ***
PC_asbestos_kg  0.40439    0.03953   10.23 0.00000000020187 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 971.5 on 25 degrees of freedom
Multiple R-squared:  0.8072,	Adjusted R-squared:  0.7995 
F-statistic: 104.7 on 1 and 25 DF,  p-value: 0.0000000002019

> confint(model_lm, '(Intercept)', level=0.95)
                2.5 %     97.5 %
(Intercept) -1.341565 -0.9555945
> confint(model_lm, 'PC_asbestos_kg', level=0.95)
                   2.5 %    97.5 %
PC_asbestos_kg 0.3229862 0.4857995
> se = sqrt(diag(vcov(model_lm)))
> se
   (Intercept) PC_asbestos_kg 
    0.09370324     0.03952666 
> AIC(model_lm)
[1] 22.47988
> BIC(model_lm)
[1] 26.36739
> shapiro.test(residuals(model_lm))

	Shapiro-Wilk normality test

data:  residuals(model_lm)
W = 0.94823, p-value = 0.1941
###

jpeg(paste("Results/", data_name, "_model_lm_hist_residuals.jpg", sep=""), width=600, height=600)
hist(residuals(model_lm), main=paste("residuals for model_lm_", data_name, sep=""))
dev.off()
jpeg(paste("Results/", data_name, "_model_lm_qqplot_residuals.jpg", sep=""), width=600, height=600)
qqnorm( residuals(model_lm), pch=1, frame=FALSE, main=paste("Q-Q plot(model_lm_", data_name, ")", sep="") )
qqline( residuals(model_lm), col="steelblue", lwd=2 )
dev.off()

model_lm_J61_males_AAMR_2010_2014_asbestos_1965_paper2007countries = model_lm
model_name = "model_lm_J61_males_AAMR_2010_2014_asbestos_1965_paper2007countries"
model_disease = "asbestosis"
model_gender = "males"
years_of_deaths = "2010-2014"
years_of_asbestos = "1965"
countries_included = "paper 2007 countries"

num_points = nrow(mortasb)
y_intercept = model_lm$coefficients[[1]]
slope = model_lm$coefficients[[2]]
BO_CI1 = confint(model_lm, '(Intercept)', level=0.95)[[1]]
BO_CI2 = confint(model_lm, '(Intercept)', level=0.95)[[2]]
B0_SE = sqrt(diag(vcov(model_lm)))[[1]]
B0_p_value = summary(model_lm)$coefficients[7]
B1_CI1 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[1]]
B1_CI2 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[2]]
B1_SE = sqrt(diag(vcov(model_lm)))[[2]]
B1_p_value = summary(model_lm)$coefficients[8]
R_squared = summary(model_lm)$r.squared
adjusted_R_squared = summary(model_lm)$adj.r.squared
fstat = summary(model_lm)$fstatistic
if (is.null(fstat)) {
  p_value = 1
} else {
  p_value = pf(fstat[1], fstat[2], fstat[3], lower.tail=F)
}

outline = paste(model_disease, model_gender, years_of_deaths, years_of_asbestos, num_points, countries_included, y_intercept, BO_CI1, BO_CI2, B0_SE, B0_p_value, slope, B1_CI1, B1_CI2, B1_SE, B1_p_value, adjusted_R_squared, p_value, sep="\t")
write(outline, file=outfile_stats, append=TRUE)



##########
##### Analysis for females asbestosis J61 deaths 2010-2014 vs asbestos 1965

mort1 = mort_2010_to_2014_C45_J61[((mort_2010_to_2014_C45_J61$Cause=="J61") & (mort_2010_to_2014_C45_J61$Sex==2) & (mort_2010_to_2014_C45_J61$deaths>0)),]
pop1 = pop_females_by_age_with_extra_countries

unique(mort1$Country_Name[(!(mort1$Country_Name %in% pop1$Country_Name))])

mort2 = merge( x=mort1, y=pop1, by=c("Country_Name", "Year", "age_group"), x.all=TRUE, y.all=FALSE )

mort2b = sqldf("select Country_Name, Country_3char, Year, age_group, sum(deaths), max(population) from mort2 where population > 0 group by Country_Name, Country_3char, Year, age_group")
colnames(mort2b) = c("Country_Name", "Country_3char", "Year", "age_group", "deaths", "population")
mort2b$death_rate_per_million = mort2b$deaths * 1000000 / mort2b$population

mort3 = merge( x=mort2b, y=std_pop, by=c("age_group"), x.all=TRUE, y.all=FALSE )
mort3$adjusted_death_rate_per_million = mort3$death_rate_per_million * mort3$WHO_World_Standard_rate

mort4 = sqldf('select Country_Name, Country_3char, Year, sum(adjusted_death_rate_per_million) from mort3 group by Country_Name, Country_3char, Year')
names(mort4)[names(mort4)=="sum(adjusted_death_rate_per_million)"] = "AAMR_per_million"

mort6 = sqldf('select Country_Name, Country_3char, avg(AAMR_per_million) from mort4 group by Country_Name, Country_3char')
names(mort6)[names(mort6)=="avg(AAMR_per_million)"] = "AAMR_per_million"

mort6$Country_Name[(!(mort6$Country_Name %in% PC_asbestos_1965$Country_Name))]
PC_asbestos_1965$Country_Name[(!(PC_asbestos_1965$Country_Name %in% mort6$Country_Name))]

mort_asb1 = merge( x=mort6, y=PC_asbestos_1965, by=c("Country_Name"), all.x=FALSE, all.y=FALSE )
mort_asb1$Production = NULL
mort_asb1$Imports = NULL
mort_asb1$Exports = NULL
mort_asb1$Apparent_consumption = NULL
mort_asb1$Year = NULL
mort_asb1$AAMR_per_million_log10 = log10(mort_asb1$AAMR_per_million)

pop2 = pop_females[(pop_females$Year==1965),]

mort_asb3 = merge( x=mort_asb1, y=pop2, by=c("Country_Name"), all.x=TRUE, all.y=FALSE )

mortasb = mort_asb3

# nudge the country text on the plot
min_population = min(mortasb$population)
max_population = max(mortasb$population)
nudge_x_slope_m = (0.10 - 0.6) / (max_population - min_population)
nudge_x_intercept_b = 0.6 - nudge_x_slope_m * min_population
mortasb$nudge_x = 1 * (mortasb$population * nudge_x_slope_m + nudge_x_intercept_b)
mortasb$nudge_y = 0

#mortasb$nudge_x = ifelse( (mortasb$Country_3char=="NLD"), 0.2, mortasb$nudge_x )
#mortasb$nudge_y = ifelse( (mortasb$Country_3char=="TUN"), 0.01, mortasb$nudge_y )
#mortasb[,c("Country_Name", "Country_3char", "population", "AAMR_per_million", "nudge_x", "nudge_y")]

data_for_plot = mortasb
data_for_plot$nudge_x = NULL
data_for_plot$nudge_y = NULL

J61_females_AAMR_2010_2014_asbestos_1965 = data_for_plot
data_name = "J61_females_AAMR_2010_2014_asbestos_1965"
plot_title = gsub( "_", " ", data_name )

file_name = paste("Results/", data_name, ".txt", sep="" )
plot_name = paste("Results/", data_name, ".png", sep="" )

ggplot(mortasb, aes(x=PC_asbestos_kg, y=AAMR_per_million, size=population)) + geom_point(colour="#4E8D24", shape=21) + 
  theme(axis.text.x=element_text(angle=0, vjust=0.5, hjust=1)) + scale_y_log10() + theme_bw() +
  theme(panel.border=element_blank(), panel.grid.major = element_blank(), panel.grid.minor=element_blank(), axis.line=element_line(colour="black")) +
  geom_text(label=mortasb$Country_3char, nudge_x=mortasb$nudge_x, nudge_y=mortasb$nudge_y, check_overlap=FALSE, size=3) +
  ggtitle(plot_title) + labs(x="1965 asbestos consumption (kg per head per year)", y="Deaths per million people per year 2010-2014")
ggsave(plot_name, width=8, height=5)

write.table( data_for_plot, file=file_name, quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE )

nrow(J61_females_AAMR_2010_2014_asbestos_1965)

cor.test( J61_females_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg, J61_females_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10, method="pearson", use="complete.obs")

model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=J61_females_AAMR_2010_2014_asbestos_1965, weights=female_population)
model_lm
summary(model_lm)
confint(model_lm, '(Intercept)', level=0.95)
confint(model_lm, 'PC_asbestos_kg', level=0.95)
se = sqrt(diag(vcov(model_lm)))
se
AIC(model_lm)
BIC(model_lm)
shapiro.test(residuals(model_lm))

###
> nrow(J61_females_AAMR_2010_2014_asbestos_1965)
[1] 30
> 
> cor.test( J61_females_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg, J61_females_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10, method="pearson", use="complete.obs")

	Pearson's product-moment correlation

data:  J61_females_AAMR_2010_2014_asbestos_1965$PC_asbestos_kg and J61_females_AAMR_2010_2014_asbestos_1965$AAMR_per_million_log10
t = 1.6117, df = 28, p-value = 0.1182
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 -0.07698695  0.58972928
sample estimates:
      cor 
0.2913635 

> 
> model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=J61_females_AAMR_2010_2014_asbestos_1965, weights=female_population)
> model_lm

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = J61_females_AAMR_2010_2014_asbestos_1965, 
    weights = female_population)

Coefficients:
   (Intercept)  PC_asbestos_kg  
      -1.46309         0.04068  

> summary(model_lm)

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = J61_females_AAMR_2010_2014_asbestos_1965, 
    weights = female_population)

Weighted Residuals:
    Min      1Q  Median      3Q     Max 
-2460.9  -137.8   496.6   757.2  3188.2 

Coefficients:
               Estimate Std. Error t value            Pr(>|t|)    
(Intercept)    -1.46309    0.09883 -14.805 0.00000000000000905 ***
PC_asbestos_kg  0.04068    0.04210   0.966               0.342    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1161 on 28 degrees of freedom
Multiple R-squared:  0.03227,	Adjusted R-squared:  -0.002294 
F-statistic: 0.9336 on 1 and 28 DF,  p-value: 0.3422

> confint(model_lm, '(Intercept)', level=0.95)
                2.5 %    97.5 %
(Intercept) -1.665521 -1.260652
> confint(model_lm, 'PC_asbestos_kg', level=0.95)
                     2.5 %    97.5 %
PC_asbestos_kg -0.04555503 0.1269064
> se = sqrt(diag(vcov(model_lm)))
> se
   (Intercept) PC_asbestos_kg 
    0.09882523     0.04209648 
> AIC(model_lm)
[1] 31.54526
> BIC(model_lm)
[1] 35.74885
> shapiro.test(residuals(model_lm))

	Shapiro-Wilk normality test

data:  residuals(model_lm)
W = 0.9522, p-value = 0.1936
###

jpeg(paste("Results/", data_name, "_model_lm_hist_residuals.jpg", sep=""), width=600, height=600)
hist(residuals(model_lm), main=paste("residuals for model_lm_", data_name, sep=""))
dev.off()
jpeg(paste("Results/", data_name, "_model_lm_qqplot_residuals.jpg", sep=""), width=600, height=600)
qqnorm( residuals(model_lm), pch=1, frame=FALSE, main=paste("Q-Q plot(model_lm_", data_name, ")", sep="") )
qqline( residuals(model_lm), col="steelblue", lwd=2 )
dev.off()

model_lm_J61_females_AAMR_2010_2014_asbestos_1965 = model_lm
model_name = "model_lm_J61_females_AAMR_2010_2014_asbestos_1965"
model_disease = "asbestosis"
model_gender = "females"
years_of_deaths = "2010-2014"
years_of_asbestos = "1965"
countries_included = "all"

num_points = nrow(mortasb)
y_intercept = model_lm$coefficients[[1]]
slope = model_lm$coefficients[[2]]
BO_CI1 = confint(model_lm, '(Intercept)', level=0.95)[[1]]
BO_CI2 = confint(model_lm, '(Intercept)', level=0.95)[[2]]
B0_SE = sqrt(diag(vcov(model_lm)))[[1]]
B0_p_value = summary(model_lm)$coefficients[7]
B1_CI1 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[1]]
B1_CI2 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[2]]
B1_SE = sqrt(diag(vcov(model_lm)))[[2]]
B1_p_value = summary(model_lm)$coefficients[8]
R_squared = summary(model_lm)$r.squared
adjusted_R_squared = summary(model_lm)$adj.r.squared
fstat = summary(model_lm)$fstatistic
if (is.null(fstat)) {
  p_value = 1
} else {
  p_value = pf(fstat[1], fstat[2], fstat[3], lower.tail=F)
}

#outline = paste(model_disease, model_gender, years_of_deaths, years_of_asbestos, num_points, countries_included, y_intercept, BO_CI1, BO_CI2, B0_SE, B0_p_value, slope, B1_CI1, B1_CI2, B1_SE, B1_p_value, adjusted_R_squared, p_value, sep="\t")
#write(outline, file=outfile_stats, append=TRUE)



##########
##### Analysis for females asbestosis J61 deaths 2010-2014 vs asbestos 1965, using only countries in 2007 paper

mort_asb5 = J61_females_AAMR_2010_2014_asbestos_1965

mort_asb6 = mort_asb5[(mort_asb5$Country_3char %in% paper2007_countries_for_J61_females),]

mortasb = mort_asb6

# nudge the country text on the plot
min_population = min(mortasb$population)
max_population = max(mortasb$population)
nudge_x_slope_m = (0.10 - 0.6) / (max_population - min_population)
nudge_x_intercept_b = 0.6 - nudge_x_slope_m * min_population
mortasb$nudge_x = 1 * (mortasb$population * nudge_x_slope_m + nudge_x_intercept_b)
mortasb$nudge_y = 0

#mortasb$nudge_x = ifelse( (mortasb$Country_3char=="NLD"), 0.2, mortasb$nudge_x )
#mortasb$nudge_y = ifelse( (mortasb$Country_3char=="TUN"), 0.01, mortasb$nudge_y )
#mortasb[,c("Country_Name", "Country_3char", "population", "AAMR_per_million", "nudge_x", "nudge_y")]

data_for_plot = mortasb
data_for_plot$nudge_x = NULL
data_for_plot$nudge_y = NULL

J61_females_AAMR_2010_2014_asbestos_1965_paper2007countries = data_for_plot
data_name = "J61_females_AAMR_2010_2014_asbestos_1965_paper2007countries"
plot_title = gsub( "_", " ", data_name )

file_name = paste("Results/", data_name, ".txt", sep="" )
plot_name = paste("Results/", data_name, ".png", sep="" )

ggplot(mortasb, aes(x=PC_asbestos_kg, y=AAMR_per_million, size=population)) + geom_point(colour="#4E8D24", shape=21) + 
  theme(axis.text.x=element_text(angle=0, vjust=0.5, hjust=1)) + scale_y_log10() + theme_bw() +
  theme(panel.border=element_blank(), panel.grid.major = element_blank(), panel.grid.minor=element_blank(), axis.line=element_line(colour="black")) +
  geom_text(label=mortasb$Country_3char, nudge_x=mortasb$nudge_x, nudge_y=mortasb$nudge_y, check_overlap=FALSE, size=3) +
  ggtitle(plot_title) + labs(x="1965 asbestos consumption (kg per head per year)", y="Deaths per million people per year 2010-2014")
ggsave(plot_name, width=8, height=5)

write.table( data_for_plot, file=file_name, quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE )

nrow(J61_females_AAMR_2010_2014_asbestos_1965_paper2007countries)

cor.test( J61_females_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg, J61_females_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10, method="pearson", use="complete.obs")

model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=J61_females_AAMR_2010_2014_asbestos_1965_paper2007countries, weights=female_population)
model_lm
summary(model_lm)
confint(model_lm, '(Intercept)', level=0.95)
confint(model_lm, 'PC_asbestos_kg', level=0.95)
se = sqrt(diag(vcov(model_lm)))
se
AIC(model_lm)
BIC(model_lm)
shapiro.test(residuals(model_lm))

###
> nrow(J61_females_AAMR_2010_2014_asbestos_1965_paper2007countries)
[1] 14
> 
> cor.test( J61_females_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg, J61_females_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10, method="pearson", use="complete.obs")

	Pearson's product-moment correlation

data:  J61_females_AAMR_2010_2014_asbestos_1965_paper2007countries$PC_asbestos_kg and J61_females_AAMR_2010_2014_asbestos_1965_paper2007countries$AAMR_per_million_log10
t = 1.2427, df = 12, p-value = 0.2377
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 -0.2350210  0.7363254
sample estimates:
      cor 
0.3376644 

> 
> model_lm = lm(AAMR_per_million_log10 ~ PC_asbestos_kg, data=J61_females_AAMR_2010_2014_asbestos_1965_paper2007countries, weights=female_population)
> model_lm

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = J61_females_AAMR_2010_2014_asbestos_1965_paper2007countries, 
    weights = female_population)

Coefficients:
   (Intercept)  PC_asbestos_kg  
      -1.57562         0.06411  

> summary(model_lm)

Call:
lm(formula = AAMR_per_million_log10 ~ PC_asbestos_kg, data = J61_females_AAMR_2010_2014_asbestos_1965_paper2007countries, 
    weights = female_population)

Weighted Residuals:
    Min      1Q  Median      3Q     Max 
-2012.0  -303.6   401.8   911.2  1903.9 

Coefficients:
               Estimate Std. Error t value     Pr(>|t|)    
(Intercept)    -1.57562    0.13384 -11.772 0.0000000598 ***
PC_asbestos_kg  0.06411    0.05238   1.224        0.244    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1069 on 12 degrees of freedom
Multiple R-squared:  0.111,	Adjusted R-squared:  0.03689 
F-statistic: 1.498 on 1 and 12 DF,  p-value: 0.2445

> confint(model_lm, '(Intercept)', level=0.95)
                2.5 %    97.5 %
(Intercept) -1.867229 -1.284006
> confint(model_lm, 'PC_asbestos_kg', level=0.95)
                    2.5 %    97.5 %
PC_asbestos_kg -0.0500217 0.1782485
> se = sqrt(diag(vcov(model_lm)))
> se
   (Intercept) PC_asbestos_kg 
    0.13383957     0.05238409 
> AIC(model_lm)
[1] 8.153118
> BIC(model_lm)
[1] 10.07029
> shapiro.test(residuals(model_lm))

	Shapiro-Wilk normality test

data:  residuals(model_lm)
W = 0.95562, p-value = 0.6508
###

jpeg(paste("Results/", data_name, "_model_lm_hist_residuals.jpg", sep=""), width=600, height=600)
hist(residuals(model_lm), main=paste("residuals for model_lm_", data_name, sep=""))
dev.off()
jpeg(paste("Results/", data_name, "_model_lm_qqplot_residuals.jpg", sep=""), width=600, height=600)
qqnorm( residuals(model_lm), pch=1, frame=FALSE, main=paste("Q-Q plot(model_lm_", data_name, ")", sep="") )
qqline( residuals(model_lm), col="steelblue", lwd=2 )
dev.off()

model_lm_J61_females_AAMR_2010_2014_asbestos_1965_paper2007countries = model_lm
model_name = "model_lm_J61_females_AAMR_2010_2014_asbestos_1965_paper2007countries"
model_disease = "asbestosis"
model_gender = "females"
years_of_deaths = "2010-2014"
years_of_asbestos = "1965"
countries_included = "paper 2007 countries"

num_points = nrow(mortasb)
y_intercept = model_lm$coefficients[[1]]
slope = model_lm$coefficients[[2]]
BO_CI1 = confint(model_lm, '(Intercept)', level=0.95)[[1]]
BO_CI2 = confint(model_lm, '(Intercept)', level=0.95)[[2]]
B0_SE = sqrt(diag(vcov(model_lm)))[[1]]
B0_p_value = summary(model_lm)$coefficients[7]
B1_CI1 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[1]]
B1_CI2 = confint(model_lm, 'PC_asbestos_kg', level=0.95)[[2]]
B1_SE = sqrt(diag(vcov(model_lm)))[[2]]
B1_p_value = summary(model_lm)$coefficients[8]
R_squared = summary(model_lm)$r.squared
adjusted_R_squared = summary(model_lm)$adj.r.squared
fstat = summary(model_lm)$fstatistic
if (is.null(fstat)) {
  p_value = 1
} else {
  p_value = pf(fstat[1], fstat[2], fstat[3], lower.tail=F)
}

outline = paste(model_disease, model_gender, years_of_deaths, years_of_asbestos, num_points, countries_included, y_intercept, BO_CI1, BO_CI2, B0_SE, B0_p_value, slope, B1_CI1, B1_CI2, B1_SE, B1_p_value, adjusted_R_squared, p_value, sep="\t")
write(outline, file=outfile_stats, append=TRUE)



########## Adjust the order of the output stats file

stats1 = read.table( outfile_stats, sep="\t", header=TRUE, quote='"', comment.char="", row.names=NULL, stringsAsFactors=FALSE, colClasses=c("character") )

stats1$tmp_countries_included = 0
stats1$tmp_countries_included = ifelse( (stats1$countries_included=="all including Slovenia"), 1, stats1$tmp_countries_included )
stats1$tmp_countries_included = ifelse( (stats1$countries_included=="all excluding Slovenia"), 2, stats1$tmp_countries_included )
stats1$tmp_countries_included = ifelse( (stats1$countries_included=="paper 2007 countries"), 3, stats1$tmp_countries_included )
stats1$tmp_years_of_deaths = 0
stats1$tmp_years_of_deaths = ifelse( (stats1$years_of_deaths=="2010-2014"), 1, stats1$tmp_years_of_deaths )
stats1$tmp_years_of_deaths = ifelse( (stats1$years_of_deaths=="2000-2004"), 2, stats1$tmp_years_of_deaths )
stats1$tmp_years_of_asbestos = 0
stats1$tmp_years_of_asbestos = ifelse( (stats1$years_of_asbestos==1975), 1, stats1$tmp_years_of_asbestos )
stats1$tmp_years_of_asbestos = ifelse( (stats1$years_of_asbestos==1965), 2, stats1$tmp_years_of_asbestos )
stats1$tmp_model_gender = 0
stats1$tmp_model_gender = ifelse( (stats1$model_gender=="males and females"), 1, stats1$tmp_model_gender )
stats1$tmp_model_gender = ifelse( (stats1$model_gender=="males"), 2, stats1$tmp_model_gender )
stats1$tmp_model_gender = ifelse( (stats1$model_gender=="females"), 3, stats1$tmp_model_gender )
stats1$tmp_model_disease = 0
stats1$tmp_model_disease = ifelse( (stats1$model_disease=="all mesothelioma (with Slovenia)"), 1, stats1$tmp_model_disease )
stats1$tmp_model_disease = ifelse( (stats1$model_disease=="all mesothelioma"), 2, stats1$tmp_model_disease )
stats1$tmp_model_disease = ifelse( (stats1$model_disease=="pleural mesothelioma"), 3, stats1$tmp_model_disease )
stats1$tmp_model_disease = ifelse( (stats1$model_disease=="peritoneal mesothelioma"), 4, stats1$tmp_model_disease )
stats1$tmp_model_disease = ifelse( (stats1$model_disease=="asbestosis"), 5, stats1$tmp_model_disease )
stats1$tmp_years_of_deaths = ifelse( (stats1$years_of_deaths=="2010-2014"), 1, stats1$tmp_years_of_deaths )
stats1$tmp_field1 = 1
stats1$tmp_field1 = ifelse( (stats1$model_gender=="males and females"), 0, stats1$tmp_field1 )

stats1$tmp_for_sort = paste( stats1$tmp_field1, stats1$tmp_years_of_deaths, stats1$tmp_years_of_asbestos, stats1$tmp_countries_included, stats1$tmp_model_disease, stats1$tmp_model_gender, sep="_" )

stats2 = stats1[order(stats1$tmp_for_sort),]

stats2$tmp_field1 = NULL
stats2$tmp_countries_included = NULL
stats2$tmp_years_of_deaths = NULL
stats2$tmp_years_of_asbestos = NULL
stats2$tmp_model_gender = NULL
stats2$tmp_model_disease = NULL
stats2$tmp_for_sort = NULL

write.table( stats2, file=outfile_stats, quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE )


##########



